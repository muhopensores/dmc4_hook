#include "FloorIsLava.hpp"
#include "..\sdk\Devil4.hpp"
#include "EnemyTracker.hpp"

bool FloorIsLava::mod_enabled = false;
static bool grounded_allowed = false;
static utility::Timer* timer{};
static glm::ivec2 screen_res{ 0, 0 };

static const uint8_t bytes1[] = { // fake ebx (I don't know how many bytes I need so)
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x80, 0x3F, 0x63, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    0x6D, 0x28, 0x88, 0x44, 0xF2, 0xDB, 0xB4, 0x43, 0x0D, 0x4F, 0x86, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x6D, 0x28, 0x88, 0x44, 0xF2, 0xDB, 0xB4, 0x43, 0x0D, 0x4F, 0x86, 0x43, 0xFF, 0xFF, 0xFF, 0xFF,
    0xC0, 0xC9, 0xC4, 0x1C, 0x30, 0xC8, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x01, 0x19, 0x00, 0x00, 0x00,
    0xA2, 0x91, 0x88, 0x44, 0x6B, 0x90, 0xB0, 0x43, 0x04, 0xE8, 0x87, 0x43, 0xCC, 0x80, 0x57, 0x3E,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xD2, 0x41, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x54, 0x54, 0x87, 0x44, 0x90, 0x98, 0x90, 0x43, 0xB8, 0x7A, 0x31, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x54, 0x94, 0x92, 0x44, 0x8A, 0xA4, 0xC1, 0x43, 0xFA, 0xAA, 0x8F, 0x43, 0xFF, 0xFF, 0xFF, 0x02,
    0x01, 0x99, 0x19, 0x3F, 0x02, 0x00, 0x00, 0x00, 0x80, 0x58, 0xC4, 0x1C, 0x80, 0x01, 0xC9, 0x1C,
    0xD0, 0xA4, 0x34, 0x11, 0x6E, 0x6F, 0x2D, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6B, 0x00, 0x31, 0x00,
    0x37, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xB1, 0x33, 0x11,
    0x4E, 0x4F, 0x4E, 0x41, 0x4D, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0xFF, 0xFF, 0x05, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x05, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0xC7, 0xC4, 0x1C, 0x50, 0xCA, 0xC4, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
    0xC0, 0xC6, 0xC4, 0x1C, 0xA0, 0xC9, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x88, 0x01, 0xCB, 0x03,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1E, 0x66, 0x44, 0x10, 0x32, 0x34, 0x11, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x54, 0x54, 0x87, 0x44, 0x90, 0x98, 0x90, 0x43, 0xB8, 0x7A, 0x31, 0x43, 0xFF, 0xFF, 0xFF, 0x01,
    0x54, 0x94, 0x92, 0x44, 0x90, 0x98, 0xBD, 0x43, 0x5C, 0xBD, 0x85, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x01, 0x99, 0x19, 0x3F, 0xE0, 0xC6, 0xC4, 0x1C, 0xC3, 0xAD, 0x85, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    0x8A, 0xC3, 0x6F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x95, 0x6F, 0xB3, 0x3E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x95, 0x6F, 0xB3, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x8A, 0xC3, 0x6F, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x54, 0xF4, 0x8C, 0x44, 0x90, 0x18, 0xA7, 0x43, 0xB8, 0x7A, 0x5E, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0xEF, 0xDC, 0xD3, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x19, 0x40, 0xBF, 0x00, 0x00, 0x80, 0x3F,
    0x8A, 0xC3, 0x6F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x95, 0x6F, 0xB3, 0x3E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x95, 0x6F, 0xB3, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x8A, 0xC3, 0x6F, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x1A, 0xBF, 0x8C, 0x44, 0x1D, 0xA4, 0xA7, 0x43, 0x48, 0x33, 0x5F, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD4, 0xCF, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x58, 0xB9, 0x64, 0x44, 0x64, 0x92, 0xA6, 0x41, 0x13, 0xD4, 0xCF, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x01,
    0x9A, 0x99, 0x19, 0x3F, 0xF8, 0x3F, 0x48, 0x3E, 0x22, 0xD0, 0x1C, 0xBF, 0x00, 0x00, 0x80, 0x3F,
    0x40, 0xC8, 0xC4, 0x1C, 0xE0, 0xCA, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x88, 0x01, 0xCB, 0x03,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x54, 0xC4, 0x1C, 0x50, 0x32, 0x34, 0x11, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x8C, 0x0E, 0x88, 0x44, 0x8A, 0xA4, 0xA8, 0x43, 0xF4, 0x55, 0x6D, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x8C, 0x4E, 0x8E, 0x44, 0x8A, 0xA4, 0xC1, 0x43, 0xFA, 0xAA, 0x8F, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0xE0, 0xC6, 0xC4, 0x1C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x82, 0x04, 0x6A, 0x3F, 0x4E, 0x60, 0xBD, 0xBB, 0x9E, 0x8D, 0xCF, 0x3E, 0x00, 0x00, 0x00, 0x00,
    0xDB, 0x18, 0x7C, 0xBE, 0x69, 0x59, 0x49, 0x3F, 0xBC, 0xFD, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0xB5, 0xEB, 0xA4, 0xBE, 0xEB, 0x16, 0x1E, 0xBF, 0x06, 0xB2, 0x37, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x8C, 0x2E, 0x8B, 0x44, 0x8A, 0x24, 0xB5, 0x43, 0xFA, 0x2A, 0x83, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0xEF, 0xDC, 0xD3, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x19, 0x40, 0xBF, 0x00, 0x00, 0x80, 0x3F,
    0x3F, 0x59, 0x6A, 0x3F, 0x35, 0xFE, 0x83, 0xBB, 0x8E, 0x10, 0xCE, 0x3E, 0x00, 0x00, 0x00, 0x00,
    0x40, 0xA0, 0x7A, 0xBE, 0x05, 0xCB, 0x49, 0x3F, 0x64, 0x88, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x98, 0xA3, 0xBE, 0xB4, 0x86, 0x1D, 0xBF, 0x51, 0x79, 0x38, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x39, 0xFE, 0x8A, 0x44, 0x35, 0xB5, 0xB6, 0x43, 0xAE, 0x17, 0x83, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x54, 0xC4, 0x1C, 0x00, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x23, 0x00, 0x00, 0x00, 0x00,
    0xA0, 0xC9, 0xC4, 0x1C, 0x20, 0xCD, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x88, 0x01, 0xCB, 0x03,
    0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE0, 0x86, 0xBC, 0x00, 0xA2, 0x4C, 0x01, 0x0F, 0x30, 0xDA, 0xC4, 0x1C, 0xA0, 0xB7, 0xC4, 0x1C,
    0x43, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0x04, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x4C, 0x3E, 0x2F, 0x81, 0xA7, 0xBC, 0xF6, 0x18, 0x08, 0xBF,
    0x6B, 0xDC, 0x19, 0x44, 0x12, 0xE7, 0x04, 0x42, 0x6D, 0x8F, 0xEC, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x80, 0xCD, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x69, 0xEE, 0x14, 0x3F, 0x16, 0x23, 0x1A, 0x3F,
    0x32, 0x05, 0x65, 0x44, 0x52, 0x62, 0xD6, 0x41, 0xBB, 0x6D, 0xCE, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x32, 0x05, 0x65, 0x44, 0x07, 0x2D, 0xD2, 0x41, 0xBB, 0x6D, 0xCE, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x6B, 0xDC, 0x19, 0x44, 0x12, 0xE7, 0x04, 0x42, 0x6D, 0x8F, 0xEC, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x20, 0x00, 0x00, 0xB0, 0xC6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xCB, 0xC4, 0x1C,
    0x00, 0x00, 0x70, 0x42, 0xEA, 0x99, 0x19, 0x3F, 0x9A, 0x99, 0x99, 0x3F, 0xEA, 0x99, 0x19, 0x3F,
    0xCD, 0xCC, 0xCC, 0x3D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x06, 0x05, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x6B, 0xDC, 0x19, 0x44, 0x12, 0xE7, 0x04, 0x42, 0x6D, 0x8F, 0xEC, 0x43, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x24, 0x2A, 0x1D, 0x3F,
    0x60, 0xEB, 0xF3, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0C, 0x00, 0x00, 0x40, 0xCD, 0xC4, 0x1C,
    0x00, 0x00
};

static const uint8_t bytes2[] = { // fake edi (I don't know how many bytes I need so)
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x22, 0x20, 0x20, 0x22,
    0x00, 0x00, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE5, 0x40, 0x88, 0x44, 0x3D, 0xDE, 0xB4, 0x43, 0xA3, 0x35, 0x86, 0x43, 0xF0, 0xB8, 0xC4, 0x1C,
    0xE5, 0x40, 0x88, 0x44, 0x3D, 0xDE, 0xB4, 0x43, 0xA3, 0x35, 0x86, 0x43, 0x06, 0x00, 0x9E, 0x0B,
    0x00, 0xB5, 0xC4, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0xA1, 0x7D, 0x68, 0x44, 0x88, 0xBE, 0x98, 0x43, 0x34, 0x3D, 0x63, 0x43, 0x00, 0x00, 0x00, 0x00,
    0xD4, 0x79, 0x88, 0x44, 0x62, 0x1A, 0xF0, 0x43, 0x28, 0x73, 0xC4, 0x43, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x80, 0x3F, 0x02, 0x00, 0x00, 0x00, 0x70, 0xCB, 0xD1, 0x1C, 0x00, 0x91, 0xCE, 0x1C,
    0xF0, 0x3D, 0x2D, 0x13, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4B, 0x5F, 0x30, 0x32, 0x00, 0x31, 0x00,
    0x45, 0x46, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x0C, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x89, 0x44,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x1B, 0x2D, 0x13,
    0x4E, 0x4F, 0x4E, 0x41, 0x4D, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0xFF, 0xFF, 0x05, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x05, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x60, 0xB3, 0xC4, 0x1C, 0x40, 0xB6, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0xA8, 0x01, 0xCB, 0x03, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x22, 0x2D, 0x13, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xDD, 0x50, 0x72, 0x44, 0x88, 0xBE, 0x98, 0x43, 0x34, 0x3D, 0x63, 0x43,
    0x00, 0x00, 0x00, 0x00, 0xD4, 0x79, 0x88, 0x44, 0x55, 0x31, 0xDA, 0x43, 0x5F, 0xEE, 0xAE, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x01, 0x00, 0x80, 0x3F, 0x80, 0xB3, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x29, 0x3F, 0x05, 0xC7, 0xBF, 0xBD, 0x79, 0xB4, 0x3E, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xDE, 0xCE, 0x3D, 0xBF, 0xDA, 0x78, 0xBF, 0x61, 0xD7, 0x58, 0xBE,
    0x00, 0x00, 0x00, 0x00, 0x55, 0x75, 0x3E, 0x3F, 0x54, 0x48, 0x5C, 0x3E, 0x06, 0xF4, 0x21, 0xBF,
    0x00, 0x00, 0x00, 0x00, 0xD9, 0xC3, 0x81, 0x44, 0xFA, 0xEC, 0xAD, 0x43, 0x3C, 0xBE, 0x8B, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xEF, 0xDC, 0xD3, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x19, 0x40, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0x01, 0x45, 0x2D, 0x3F, 0xAB, 0x6D, 0xDD, 0xBD, 0x32, 0x68, 0x3A, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xCF, 0xA1, 0x8C, 0x3E, 0xBB, 0x70, 0x61, 0xBF, 0x64, 0xAB, 0xC5, 0xBE,
    0x00, 0x00, 0x00, 0x00, 0x43, 0xD7, 0x2E, 0x3F, 0xE8, 0x30, 0xEC, 0x3E, 0xB3, 0xFB, 0x10, 0xBF,
    0x00, 0x00, 0x00, 0x00, 0xA9, 0xAF, 0x80, 0x44, 0xF8, 0xF7, 0xB8, 0x43, 0xE5, 0x8B, 0x90, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xE0, 0xB4, 0xC4, 0x1C, 0x80, 0xB7, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0xA8, 0x01, 0xCB, 0x03, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x64, 0x44, 0x40, 0x22, 0x2D, 0x13, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0xA1, 0x7D, 0x68, 0x44, 0x22, 0x7D, 0xB5, 0x43, 0xD1, 0x69, 0x82, 0x43,
    0xE0, 0xFB, 0x27, 0x13, 0x77, 0xC2, 0x84, 0x44, 0x62, 0x1A, 0xF0, 0x43, 0x28, 0x73, 0xC4, 0x43,
    0xC0, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x27, 0x13, 0x80, 0xB3, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x00, 0x00, 0x30, 0x18, 0x29, 0x3F, 0x05, 0xC7, 0xBF, 0xBD, 0x79, 0xB4, 0x3E, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xDE, 0xCE, 0x3D, 0xBF, 0xDA, 0x78, 0xBF, 0x61, 0xD7, 0x58, 0xBE,
    0x00, 0x00, 0x00, 0x00, 0x55, 0x75, 0x3E, 0x3F, 0x54, 0x48, 0x5C, 0x3E, 0x06, 0xF4, 0x21, 0xBF,
    0x00, 0x00, 0x00, 0x00, 0xD9, 0xC3, 0x81, 0x44, 0xFA, 0xEC, 0xAD, 0x43, 0x3C, 0xBE, 0x8B, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xEF, 0xDC, 0xD3, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x19, 0x40, 0x3F,
    0x00, 0x00, 0x80, 0x3F, 0x01, 0x45, 0x2D, 0x3F, 0xAB, 0x6D, 0xDD, 0xBD, 0x32, 0x68, 0x3A, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0xCF, 0xA1, 0x8C, 0x3E, 0xBB, 0x70, 0x61, 0xBF, 0x64, 0xAB, 0xC5, 0xBE,
    0x00, 0x00, 0x00, 0x00, 0x43, 0xD7, 0x2E, 0x3F, 0xE8, 0x30, 0xEC, 0x3E, 0xB3, 0xFB, 0x10, 0xBF,
    0x00, 0x00, 0x00, 0x00, 0xA9, 0xAF, 0x80, 0x44, 0xF8, 0xF7, 0xB8, 0x43, 0xE5, 0x8B, 0x90, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x40, 0xB6, 0xC4, 0x1C, 0xC0, 0xB9, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0xA8, 0x01, 0xCB, 0x03, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xE0, 0x86, 0xBC, 0x00, 0xA2, 0x4C, 0x01, 0x0F, 0x00, 0xCB, 0xC4, 0x1C,
    0x60, 0x8B, 0xCE, 0x1C, 0x43, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0xF0, 0x0A, 0x98, 0x41, 0x66, 0x06, 0xD2, 0x43,
    0x00, 0x00, 0x00, 0x00, 0x70, 0x64, 0x18, 0x44, 0xE1, 0x37, 0x35, 0x42, 0x4A, 0xE2, 0xEE, 0x43,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    0x2A, 0x92, 0x73, 0x3E, 0xD3, 0xD0, 0x62, 0x44, 0x28, 0xC7, 0xC6, 0x41, 0xB5, 0x63, 0xD3, 0x43,
    0x00, 0x00, 0x00, 0x00, 0xD3, 0xD0, 0x62, 0x44, 0x9B, 0x3A, 0xCB, 0x41, 0xB5, 0x63, 0xD3, 0x43,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01,
    0xFF, 0xFF, 0xFF, 0x03, 0x9A, 0x99, 0x19, 0x3F, 0xB0, 0x75, 0x7E, 0x3E, 0xBA, 0xA2, 0x0E, 0xC0,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x70, 0x64, 0x18, 0x44, 0xE1, 0x37, 0x35, 0x42, 0x4A, 0xE2, 0xEE, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x20, 0x00, 0x00, 0xB0, 0xC6, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x88, 0xB8, 0xC4, 0x1C, 0x00, 0x00, 0x70, 0x42, 0xEA, 0x99, 0x19, 0x3F, 0x9A, 0x99, 0x99, 0x3F,
    0x50, 0xCF, 0x4C, 0x3E, 0xCD, 0xCC, 0xCC, 0x3D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x06, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x70, 0x64, 0x18, 0x44, 0xE1, 0x37, 0x35, 0x42, 0x4A, 0xE2, 0xEE, 0x43,
    0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAC, 0x0B, 0x80, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x00, 0x60, 0xEB, 0xF3, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0C, 0x00, 0x00,
    0xE0, 0xB9, 0xC4, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00,
};

static const uint8_t* attack1 = bytes1;
static const uint8_t* attack2 = bytes2;

static constexpr uintptr_t static_mediator_ptr = 0x00E558B8;
naked void KillPlayer() { // vtable+BC (DevilMayCry4_DX9.exe+3B7AD0) is die with damage IDs, vtable+1A4 (DevilMayCry4_DX9.exe+3AAB80) is die but it crashes if I do it while aerial???
    _asm {
        pushad
        // get player
        mov ecx, [static_mediator_ptr]
        mov ecx, [ecx]
        mov ecx, [ecx+0x24]
        test ecx, ecx
        je retcode

        // copy here in case it matters
        mov ebp, ecx
        mov esi, ecx

        // lie about incoming attack
        mov ebx, [attack1]
        mov edi, [attack2]
        push ebx
        push edi

        //push ecx // only do this if trying vtable+1A4
        mov eax, [ecx]
        mov eax, [eax+0xBC]
        call eax
        retcode:
        popad
        ret
    }
}

static int get_enemy_count(uEnemy* enemy) {
    int enemies_alive = 0;
    while (enemy) {
        uDamage* currentEnemyDamage = (uDamage*)((char*)enemy + EnemyTracker::get_enemy_specific_damage_offset(enemy->ID));
        if (currentEnemyDamage->HP > 0.0f) {
            enemies_alive++;
        }
        enemy = enemy->nextEnemy;
    }
    return enemies_alive;
}

void FloorIsLava::on_frame(fmilliseconds& dt) {
    if (!mod_enabled) { return; }
    SMediator* sMed = devil4_sdk::get_sMediator();
    sArea* s_area_ptr = devil4_sdk::get_sArea();
    uPlayer* player = devil4_sdk::get_local_player();
    int enemyCount = get_enemy_count(devil4_sdk::get_uEnemies());
    sRender* sRen = devil4_sdk::get_sRender();

    bool player_exists_now = (player != nullptr);
    bool player_is_alive = player_exists_now && player->damageStruct.HP > 0.0f;
    static bool player_existed_last_frame = false;

    if ((player_exists_now && !player_existed_last_frame) || (player_existed_last_frame && (!player_exists_now || !player_is_alive))) {
        grounded_allowed = true;
    }
    
    if (timer && player_exists_now && player_is_alive) {
        float dante_seconds = player->m_delta_time / 60.0f;
        timer->tick((fmilliseconds)dante_seconds * 1000.0f);

        if (!player_existed_last_frame) {
            timer->start();
        }

        if (!timer->m_active) {
            if (enemyCount > 0) {
                grounded_allowed = false;
            }
        } else {
            grounded_allowed = true;
            ImGui::Begin("FloorIsLavaTimer", NULL, ImGuiWindowFlags_NoBackground | ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_AlwaysAutoResize);
            ImGui::UpdateCurrentFontSize(3.0f * ImGui::GetStyle().FontSizeBase);
            screen_res = sRen->screenRes;
            ImVec2 window_size = ImGui::GetWindowSize();
            ImVec2 window_pos((screen_res.x - window_size.x) * 0.5f, 0.0f);
            ImGui::SetWindowPos(window_pos);
            static ImColor texCol = { 1.0f, 0.0f, 0.0f, 1.0f };
            ImGui::TextColored(texCol, "%.2f", timer->m_time.count());
            ImGui::End();
        }

        if (!grounded_allowed && player->collisionSettings->mLand == 1) {
            player->damageStruct.HP = 0.0f;
            KillPlayer();
        }
    }

    player_existed_last_frame = player_exists_now && player_is_alive;
}

void on_timer_trigger() {}

void FloorIsLava::on_gui_frame(int display) {
    ImGui::Checkbox(_("Floor Is Lava"), &mod_enabled);
    ImGui::SameLine();
    help_marker(_("Upon spawning, you have 5 seconds. Once them 5 seconds are up, if you touch the floor you die"));
}

// void on_game_pause(bool toggle) {}
// bool on_message(HWND wnd, UINT message, WPARAM wParam, LPARAM lParam) {}

std::optional<std::string> FloorIsLava::on_initialize() {
    timer = new utility::Timer(5.0f, on_timer_trigger);
    return Mod::on_initialize();
}

void FloorIsLava::on_config_load(const utility::Config& cfg){
    mod_enabled = cfg.get<bool>("FloorIsLava").value_or(false);
}

void FloorIsLava::on_config_save(utility::Config& cfg) {
    cfg.set<bool>("FloorIsLava", mod_enabled);
}
