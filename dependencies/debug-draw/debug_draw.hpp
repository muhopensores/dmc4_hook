
// ================================================================================================
// -*- C++ -*-
// File:   debug_draw.hpp
// Author: Guilherme R. Lampert
// Brief:  Debug Draw - an immediate-mode, renderer agnostic, lightweight debug drawing API.
// ================================================================================================

#ifndef DEBUG_DRAW_HPP
#define DEBUG_DRAW_HPP

// ========================================================
// Library Overview:
// ========================================================
//
// ---------
//  LICENSE
// ---------
// This software is in the public domain. Where that dedication is not recognized,
// you are granted a perpetual, irrevocable license to copy, distribute, and modify
// this file as you see fit.
//
// The source code is provided "as is", without warranty of any kind, express or implied.
// No attribution is required, but a mention about the author(s) is appreciated.
//
// -------------
//  QUICK SETUP
// -------------
// In *one* C++ source file, *before* including this file, do this:
//
//   #define DEBUG_DRAW_IMPLEMENTATION
//
// To enable the implementation. Further includes of this
// file *should not* redefine DEBUG_DRAW_IMPLEMENTATION.
// Example:
//
// In my_program.cpp:
//
//   #define DEBUG_DRAW_IMPLEMENTATION
//   #include "debug_draw.hpp"
//
// In my_program.hpp:
//
//   #include "debug_draw.hpp"
//
// ----------------------
//  COMPILATION SWITCHES
// ----------------------
//
// DEBUG_DRAW_CXX11_SUPPORTED
//  Enables the use of some C++11 features. If your compiler supports C++11
//  or better, you should define this switch globally or before every inclusion
//  of this file. If it is not defined, we try to guess it from the value of the
//  '__cplusplus' built-in macro constant.
//
// DEBUG_DRAW_MAX_*
//  Sizes of internal intermediate buffers, which are allocated on initialization
//  by the implementation. If you need to draw more primitives than the sizes of
//  these buffers, you need to redefine the macros and recompile.
//
// DEBUG_DRAW_VERTEX_BUFFER_SIZE
//  Size in dd::DrawVertex elements of the intermediate vertex buffer used
//  to batch primitives before sending them to dd::RenderInterface. A bigger
//  buffer will reduce the number of calls to dd::RenderInterface when drawing
//  large sets of debug primitives.
//
// DEBUG_DRAW_OVERFLOWED(message)
//  An error handler called if any of the DEBUG_DRAW_MAX_* sizes overflow.
//  By default it just prints a message to stderr.
//
// DEBUG_DRAW_USE_STD_MATH
//  If defined to nonzero, uses cmath/math.h. If you redefine it to zero before
//  the library implementation, it will force the use of local replacements
//  for the Standard Library. This might be useful if you want to avoid the
//  dependency. It is defined to zero by default (i.e. we use cmath by default).
//
// DEBUG_DRAW_*_TYPE_DEFINED
//  The compound types used by Debug Draw can also be customized.
//  By default, ddVec3 and ddMat4x4 are plain C-arrays, but you can
//  redefine them to use your own classes or structures (see below).
//  ddStr is by default a std::string, but you can redefine it to
//  a custom string type if necessary. The only requirements are that
//  it provides a 'c_str()' method returning a null terminated
//  const char* string and an assignment operator (=).
//
// DEBUG_DRAW_STR_DEALLOC_FUNC(str)
//  If you define a custom string type for ddStr and it requires some
//  extra cleanup besides the class destructor, you might define this
//  function macro to perform said cleanup. It is called by dd::clear()
//  and dd::shutdown() on every instance of the internal DebugString buffer.
//
// DEBUG_DRAW_NO_DEFAULT_COLORS
//  If defined, doesn't add the set of predefined color constants inside
//  dd::colors:: namespace. Each color is a ddVec3, so you can define this
//  to prevent adding more global data to the binary if you don't need them.
//
// DEBUG_DRAW_PER_THREAD_CONTEXT
//  If defined, a per-thread global context will be created for Debug Draw.
//  This allows having an instance of the library for each thread in
//  your application. You must then call initialize/shutdown/flush/etc
//  for each thread that wishes to use the library. If this is not
//  defined it defaults to a single threaded global context.
//
// DEBUG_DRAW_EXPLICIT_CONTEXT
//  If defined, each Debug Draw function will expect and additional argument
//  (the first one) which is the library context instance. This is an alternative
//  to DEBUG_DRAW_PER_THREAD_CONTEXT to allow having multiple instances of the
//  library in the same application. This flag is mutually exclusive with
//  DEBUG_DRAW_PER_THREAD_CONTEXT.
//
// -------------------
//  MEMORY ALLOCATION
// -------------------
// Debug Draw will only perform a couple of memory allocations during startup to decompress
// the built-in glyph bitmap used for debug text rendering and to allocate the vertex buffers
// and intermediate draw/batch buffers and context data used internally.
//
// Memory allocation and deallocation for Debug Draw will be done via:
//
//   DD_MALLOC(size)
//   DD_MFREE(ptr)
//
// These two macros can be redefined if you'd like to supply you own memory allocator.
// By default, they are defined to use std::malloc and std::free, respectively.
// Note: If you redefine one, you must also provide the other.
//
// --------------------------------
//  INTERFACING WITH YOUR RENDERER
// --------------------------------
// Debug Draw doesn't touch on any renderer-specific aspects or APIs, instead you provide
// the library with all of it's rendering needs via the dd::RenderInterface abstract class.
//
// See the declaration of dd::RenderInterface for details. Not all methods are
// required. In fact, you could also implement a full no-op RenderInterface that
// disables debug drawing by simply inheriting from dd::RenderInterface and not overriding
// any of the methods (or even easier, call dd::initialize(nullptr) to make everything a no-op).
//
// For examples on how to implement your own dd::RenderInterface, see the accompanying samples.
// You can also find them in the source code repository for this project:
// https://github.com/glampert/debug-draw
//
// ------------------
//  CONVENTIONS USED
// ------------------
// Points and lines are always specified in world-space positions. This also
// applies to shapes drawn from lines, like boxes, spheres, cones, etc.
//
// 2D screen-text is in screen-space pixels (from 0,0 in the upper-left
// corner of the screen to screen_width-1 and screen_height-1).
// RenderInterface::drawGlyphList() also receives vertexes in screen-space.
//
// We make some usage of matrices for things like the projected text labels.
// Matrix layout used is column-major and vectors multiply as columns.
// This is the convention normally used by standard OpenGL.
//
// C++ Exceptions are not used. Little error checking is provided or
// done inside the library. We favor simpler, faster and easier to maintain
// code over more sophisticated error handling. The rationale is that a
// debug drawing API doesn't have to be very robust, since it won't make
// into the final release executable in most cases.
//

// ========================================================
// Configurable compilation switches:
// ========================================================

//
// If the user didn't specify if C++11 or above are supported, try to guess
// from the value of '__cplusplus'. It should be 199711L for pre-C++11 compilers
// and 201103L in those supporting C++11, but this is not a guarantee that all
// C++11 features will be available and stable, so again, we are making a guess.
// It is recommended to instead supply the DEBUG_DRAW_CXX11_SUPPORTED switch
// yourself before including this file.
//
#ifndef DEBUG_DRAW_CXX11_SUPPORTED
    #if (__cplusplus > 199711L)
        #define DEBUG_DRAW_CXX11_SUPPORTED 1
    #endif // __cplusplus
#endif // DEBUG_DRAW_CXX11_SUPPORTED

//
// Max elements of each type at any given time.
// We supply these reasonable defaults, but you can provide your
// own tunned values to save memory or fit all of your debug data.
// These are hard constraints. If not enough, change and recompile.
//
#ifndef DEBUG_DRAW_MAX_STRINGS
    #define DEBUG_DRAW_MAX_STRINGS 512
#endif // DEBUG_DRAW_MAX_STRINGS

#ifndef DEBUG_DRAW_MAX_POINTS
    #define DEBUG_DRAW_MAX_POINTS 8192
#endif // DEBUG_DRAW_MAX_POINTS

#ifndef DEBUG_DRAW_MAX_LINES
    #define DEBUG_DRAW_MAX_LINES 32768
#endif // DEBUG_DRAW_MAX_LINES

//
// Size in vertexes of a local buffer we use to sort elements
// drawn with and without depth testing before submitting them to
// the dd::RenderInterface. A larger buffer will require less flushes
// (e.g. dd::RenderInterface calls) when drawing large amounts of
// primitives. Less will obviously save more memory. Each DrawVertex
// is about 32 bytes in size, we keep a context-specific array
// with this many entries.
//
#ifndef DEBUG_DRAW_VERTEX_BUFFER_SIZE
    #define DEBUG_DRAW_VERTEX_BUFFER_SIZE 4096
#endif // DEBUG_DRAW_VERTEX_BUFFER_SIZE

//
// This macro is called with an error message if any of the above
// sizes is overflowed during runtime. In a debug build, you might
// keep this enabled to be able to log and find out if more space
// is needed for the debug data arrays. Default output is stderr.
//
#ifndef DEBUG_DRAW_OVERFLOWED
    #include <cstdio>
    #define DEBUG_DRAW_OVERFLOWED(message) std::fprintf(stderr, "%s\n", message)
#endif // DEBUG_DRAW_OVERFLOWED

//
// Use <math.h> and <float.h> for trigonometry functions by default.
// If you wish to avoid those dependencies, DD provides local approximations
// of the required functions as a portable replacement. Just define
// DEBUG_DRAW_USE_STD_MATH to zero before including this file.
//
#ifndef DEBUG_DRAW_USE_STD_MATH
    #define DEBUG_DRAW_USE_STD_MATH 1
#endif // DEBUG_DRAW_USE_STD_MATH

// ========================================================
// Overridable Debug Draw types:
// ========================================================

#include <cstddef>
#include <cstdint>

//
// Following typedefs are not members of the dd:: namespace to allow easy redefinition by the user.
// If you provide a custom implementation for them before including this file, be sure to
// also define the proper DEBUG_DRAW_*_TYPE_DEFINED switch to disable the default typedefs.
//
// The only requirement placed on the vector/matrix types is that they provide
// an array subscript operator [] and have the expected number of elements. Apart
// from that, they could be structs, classes, what-have-you. POD types are recommended
// but not mandatory.
//

#ifndef DEBUG_DRAW_VEC3_TYPE_DEFINED
    // ddVec3:
    //  A small array of floats with at least three elements, but
    //  it could have more for alignment purposes, extra slots are ignored.
    //  A custom ddVec3 type must provide the array subscript operator.
    typedef float ddVec3[3];

    // ddVec3_In/ddVec3_Out:
    //  Since our default ddVec3 is a plain C-array, it decays to a pointer
    //  when passed as an input parameter to a function, so we can use it directly.
    //  If you change it to some structured type, it might be more efficient
    //  passing by const reference instead, however, some platforms have optimized
    //  hardware registers for vec3s/vec4s, so passing by value might also be efficient.
    typedef const ddVec3 ddVec3_In;
    typedef       ddVec3 ddVec3_Out;

    #define DEBUG_DRAW_VEC3_TYPE_DEFINED 1
#endif // DEBUG_DRAW_VEC3_TYPE_DEFINED

#ifndef DEBUG_DRAW_MAT4X4_TYPE_DEFINED
    // ddMat4x4:
    //  Homogeneous matrix of 16 floats, representing rotations as well as
    //  translation/scaling and projections. The internal matrix layout used by this
    //  library is COLUMN-MAJOR, vectors multiplying as columns (usual OpenGL convention).
    //  Column-major matrix layout:
    //          c.0   c.1   c.2    c.3
    //    r.0 | 0.x   4.x   8.x    12.x |
    //    r.1 | 1.y   5.y   9.y    13.y |
    //    r.2 | 2.z   6.z   10.z   14.z |
    //    r.3 | 3.w   7.w   11.w   15.w |
    //  If your custom matrix type uses row-major format internally, you'll
    //  have to transpose them before passing your matrices to the DD functions.
    //  We use the array subscript operator internally, so it must also be provided.
    typedef float ddMat4x4[4 * 4];

    // ddMat4x4_In/ddMat4x4_Out:
    //  Since our default ddMat4x4 is a plain C-array, it decays to a pointer
    //  when passed as an input parameter to a function, so we can use it directly.
    //  If you change it to some structured type, it might be more efficient
    //  passing by const reference instead.
    typedef const ddMat4x4 ddMat4x4_In;
    typedef       ddMat4x4 ddMat4x4_Out;

    #define DEBUG_DRAW_MAT4X4_TYPE_DEFINED 1
#endif // DEBUG_DRAW_MAT4X4_TYPE_DEFINED

#ifndef DEBUG_DRAW_STRING_TYPE_DEFINED
    // ddStr:
    //  String type used internally to store the debug text strings.
    //  A custom string type must provide at least an assignment
    //  operator (=) and a 'c_str()' method that returns a
    //  null-terminated const char* string pointer. That's it.
    //  An array subscript operator [] is not required for ddStr.
    #include <string>
    typedef std::string   ddStr;
    typedef const ddStr & ddStr_In;
    typedef       ddStr & ddStr_Out;

    #define DEBUG_DRAW_STRING_TYPE_DEFINED 1
#endif // DEBUG_DRAW_STRING_TYPE_DEFINED

namespace dd
{

// ========================================================
// Optional built-in colors in RGB float format:
// ========================================================

#ifndef DEBUG_DRAW_NO_DEFAULT_COLORS
namespace colors
{
extern const ddVec3 AliceBlue;
extern const ddVec3 AntiqueWhite;
extern const ddVec3 Aquamarine;
extern const ddVec3 Azure;
extern const ddVec3 Beige;
extern const ddVec3 Bisque;
extern const ddVec3 Black;
extern const ddVec3 BlanchedAlmond;
extern const ddVec3 Blue;
extern const ddVec3 BlueViolet;
extern const ddVec3 Brown;
extern const ddVec3 BurlyWood;
extern const ddVec3 CadetBlue;
extern const ddVec3 Chartreuse;
extern const ddVec3 Chocolate;
extern const ddVec3 Coral;
extern const ddVec3 CornflowerBlue;
extern const ddVec3 Cornsilk;
extern const ddVec3 Crimson;
extern const ddVec3 Cyan;
extern const ddVec3 DarkBlue;
extern const ddVec3 DarkCyan;
extern const ddVec3 DarkGoldenRod;
extern const ddVec3 DarkGray;
extern const ddVec3 DarkGreen;
extern const ddVec3 DarkKhaki;
extern const ddVec3 DarkMagenta;
extern const ddVec3 DarkOliveGreen;
extern const ddVec3 DarkOrange;
extern const ddVec3 DarkOrchid;
extern const ddVec3 DarkRed;
extern const ddVec3 DarkSalmon;
extern const ddVec3 DarkSeaGreen;
extern const ddVec3 DarkSlateBlue;
extern const ddVec3 DarkSlateGray;
extern const ddVec3 DarkTurquoise;
extern const ddVec3 DarkViolet;
extern const ddVec3 DeepPink;
extern const ddVec3 DeepSkyBlue;
extern const ddVec3 DimGray;
extern const ddVec3 DodgerBlue;
extern const ddVec3 FireBrick;
extern const ddVec3 FloralWhite;
extern const ddVec3 ForestGreen;
extern const ddVec3 Gainsboro;
extern const ddVec3 GhostWhite;
extern const ddVec3 Gold;
extern const ddVec3 GoldenRod;
extern const ddVec3 Gray;
extern const ddVec3 Green;
extern const ddVec3 GreenYellow;
extern const ddVec3 HoneyDew;
extern const ddVec3 HotPink;
extern const ddVec3 IndianRed;
extern const ddVec3 Indigo;
extern const ddVec3 Ivory;
extern const ddVec3 Khaki;
extern const ddVec3 Lavender;
extern const ddVec3 LavenderBlush;
extern const ddVec3 LawnGreen;
extern const ddVec3 LemonChiffon;
extern const ddVec3 LightBlue;
extern const ddVec3 LightCoral;
extern const ddVec3 LightCyan;
extern const ddVec3 LightGoldenYellow;
extern const ddVec3 LightGray;
extern const ddVec3 LightGreen;
extern const ddVec3 LightPink;
extern const ddVec3 LightSalmon;
extern const ddVec3 LightSeaGreen;
extern const ddVec3 LightSkyBlue;
extern const ddVec3 LightSlateGray;
extern const ddVec3 LightSteelBlue;
extern const ddVec3 LightYellow;
extern const ddVec3 Lime;
extern const ddVec3 LimeGreen;
extern const ddVec3 Linen;
extern const ddVec3 Magenta;
extern const ddVec3 Maroon;
extern const ddVec3 MediumAquaMarine;
extern const ddVec3 MediumBlue;
extern const ddVec3 MediumOrchid;
extern const ddVec3 MediumPurple;
extern const ddVec3 MediumSeaGreen;
extern const ddVec3 MediumSlateBlue;
extern const ddVec3 MediumSpringGreen;
extern const ddVec3 MediumTurquoise;
extern const ddVec3 MediumVioletRed;
extern const ddVec3 MidnightBlue;
extern const ddVec3 MintCream;
extern const ddVec3 MistyRose;
extern const ddVec3 Moccasin;
extern const ddVec3 NavajoWhite;
extern const ddVec3 Navy;
extern const ddVec3 OldLace;
extern const ddVec3 Olive;
extern const ddVec3 OliveDrab;
extern const ddVec3 Orange;
extern const ddVec3 OrangeRed;
extern const ddVec3 Orchid;
extern const ddVec3 PaleGoldenRod;
extern const ddVec3 PaleGreen;
extern const ddVec3 PaleTurquoise;
extern const ddVec3 PaleVioletRed;
extern const ddVec3 PapayaWhip;
extern const ddVec3 PeachPuff;
extern const ddVec3 Peru;
extern const ddVec3 Pink;
extern const ddVec3 Plum;
extern const ddVec3 PowderBlue;
extern const ddVec3 Purple;
extern const ddVec3 RebeccaPurple;
extern const ddVec3 Red;
extern const ddVec3 RosyBrown;
extern const ddVec3 RoyalBlue;
extern const ddVec3 SaddleBrown;
extern const ddVec3 Salmon;
extern const ddVec3 SandyBrown;
extern const ddVec3 SeaGreen;
extern const ddVec3 SeaShell;
extern const ddVec3 Sienna;
extern const ddVec3 Silver;
extern const ddVec3 SkyBlue;
extern const ddVec3 SlateBlue;
extern const ddVec3 SlateGray;
extern const ddVec3 Snow;
extern const ddVec3 SpringGreen;
extern const ddVec3 SteelBlue;
extern const ddVec3 Tan;
extern const ddVec3 Teal;
extern const ddVec3 Thistle;
extern const ddVec3 Tomato;
extern const ddVec3 Turquoise;
extern const ddVec3 Violet;
extern const ddVec3 Wheat;
extern const ddVec3 White;
extern const ddVec3 WhiteSmoke;
extern const ddVec3 Yellow;
extern const ddVec3 YellowGreen;
} // namespace colors
#endif // DEBUG_DRAW_NO_DEFAULT_COLORS

// ========================================================
// Optional explicit context mode:
// ========================================================

#ifdef DEBUG_DRAW_EXPLICIT_CONTEXT
    struct OpaqueContextType { };
    typedef OpaqueContextType * ContextHandle;
    #define DD_EXPLICIT_CONTEXT_ONLY(...) __VA_ARGS__
#else // !DEBUG_DRAW_EXPLICIT_CONTEXT
    #define DD_EXPLICIT_CONTEXT_ONLY(...) /* nothing */
#endif // DEBUG_DRAW_EXPLICIT_CONTEXT

// ========================================================
// Debug Draw functions:
// - Durations are always in milliseconds.
// - Colors are RGB floats in the [0,1] range.
// - Positions are in world-space, unless stated otherwise.
// ========================================================

// Add a point in 3D space to the debug draw queue.
// Point is expressed in world-space coordinates.
// Note that not all renderer support configurable point
// size, so take the 'size' parameter as a hint only
void point(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In pos,
           ddVec3_In color,
           float size = 1.0f,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a 3D line to the debug draw queue. Note that
// lines are expressed in world coordinates, and so are
// all wireframe primitives which are built from lines.
void line(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
          ddVec3_In from,
          ddVec3_In to,
          ddVec3_In color,
          int durationMillis = 0,
          bool depthEnabled = true);

// Add a 2D text string as an overlay to the current view, using a built-in font.
// Position is in screen-space pixels, origin at the top-left corner of the screen.
// The third element (Z) of the position vector is ignored.
// Note: Newlines and tabs are handled (1 tab = 4 spaces).
void screenText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                const char * str,
                ddVec3_In pos,
                ddVec3_In color,
                float scaling = 1.0f,
                int durationMillis = 0);

// Add a 3D text label centered at the given world position that
// gets projected to screen-space. The label always faces the viewer.
// sx/sy, sw/sh are the viewport coordinates/size, in pixels.
// 'vpMatrix' is the view * projection transform to map the text from 3D to 2D.
void projectedText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                   const char * str,
                   ddVec3_In pos,
                   ddVec3_In color,
                   ddMat4x4_In vpMatrix,
                   int sx, int sy,
                   int sw, int sh,
                   float scaling = 1.0f,
                   int durationMillis = 0);

// Add a set of three coordinate axis depicting the position and orientation of the given transform.
// 'size' defines the size of the arrow heads. 'length' defines the length of the arrow's base line.
void axisTriad(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
               ddMat4x4_In transform,
               float size,
               float length,
               int durationMillis = 0,
               bool depthEnabled = true);

// Add a 3D line with an arrow-like end to the debug draw queue.
// 'size' defines the arrow head size. 'from' and 'to' the length of the arrow's base line.
void arrow(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In from,
           ddVec3_In to,
           ddVec3_In color,
           float size,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add an axis-aligned cross (3 lines converging at a point) to the debug draw queue.
// 'length' defines the length of the crossing lines.
// 'center' is the world-space point where the lines meet.
void cross(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In center,
           float length,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a wireframe circle to the debug draw queue.
void circle(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
            ddVec3_In center,
            ddVec3_In planeNormal,
            ddVec3_In color,
            float radius,
            float numSteps,
            int durationMillis = 0,
            bool depthEnabled = true);

// Add a wireframe plane in 3D space to the debug draw queue.
// If 'normalVecScale' is not zero, a line depicting the plane normal is also draw.
void plane(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           ddVec3_In center,
           ddVec3_In planeNormal,
           ddVec3_In planeColor,
           ddVec3_In normalVecColor,
           float planeScale,
           float normalVecScale,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a wireframe sphere to the debug draw queue.
void sphere(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
            ddVec3_In center,
            ddVec3_In color,
            float radius,
            int durationMillis = 0,
            bool depthEnabled = true);

// Add a wireframe cone to the debug draw queue.
// The cone 'apex' is the point where all lines meet.
// The length of the 'dir' vector determines the thickness.
// 'baseRadius' & 'apexRadius' are in degrees.
void cone(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
          ddVec3_In apex,
          ddVec3_In dir,
          ddVec3_In color,
          float baseRadius,
          float apexRadius,
          int durationMillis = 0,
          bool depthEnabled = true);

// Wireframe box from the eight points that define it.
void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
         const ddVec3 points[8],
         ddVec3_In color,
         int durationMillis = 0,
         bool depthEnabled = true);

// Add a wireframe box to the debug draw queue.
void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
         ddVec3_In center,
         ddVec3_In color,
         float width,
         float height,
         float depth,
         int durationMillis = 0,
         bool depthEnabled = true);

// Add a wireframe Axis Aligned Bounding Box (AABB) to the debug draw queue.
void aabb(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
          ddVec3_In mins,
          ddVec3_In maxs,
          ddVec3_In color,
          int durationMillis = 0,
          bool depthEnabled = true);

// Add a wireframe frustum pyramid to the debug draw queue.
// 'invClipMatrix' is the inverse of the matrix defining the frustum
// (AKA clip) volume, which normally consists of the projection * view matrix.
// E.g.: inverse(projMatrix * viewMatrix)
void frustum(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
             ddMat4x4_In invClipMatrix,
             ddVec3_In color,
             int durationMillis = 0,
             bool depthEnabled = true);

// Add a vertex normal for debug visualization.
// The normal vector 'normal' is assumed to be already normalized.
void vertexNormal(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                  ddVec3_In origin,
                  ddVec3_In normal,
                  float length,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// Add a "tangent basis" at a given point in world space.
// Color scheme used is: normal=WHITE, tangent=YELLOW, bi-tangent=MAGENTA.
// The normal vector, tangent and bi-tangent vectors are assumed to be already normalized.
void tangentBasis(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                  ddVec3_In origin,
                  ddVec3_In normal,
                  ddVec3_In tangent,
                  ddVec3_In bitangent,
                  float lengths,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// Makes a 3D square grid of lines along the X and Z planes.
// 'y' defines the height in the Y axis where the grid is placed.
// The grid will go from 'mins' to 'maxs' units in both the X and Z.
// 'step' defines the gap between each line of the grid.
void xzSquareGrid(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
                  float mins,
                  float maxs,
                  float y,
                  float step,
                  ddVec3_In color,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// ========================================================
// Debug Draw vertex type:
// The only drawing type the user has to interface with.
// ========================================================

union DrawVertex
{
    struct
    {
        float x, y, z;
        float r, g, b;
        float size;
    } point;

    struct
    {
        float x, y, z;
        float r, g, b;
    } line;

    struct
    {
        float x, y;
        float u, v;
        float r, g, b;
    } glyph;
};

//
// Opaque handle to a texture object.
// Used by the debug text drawing functions.
//
struct OpaqueTextureType { };
typedef OpaqueTextureType * GlyphTextureHandle;

// ========================================================
// Debug Draw rendering callbacks:
// Implementation is provided by the user so we don't
// tie this code directly to a specific rendering API.
// ========================================================

class RenderInterface
{
public:

    //
    // These are called by dd::flush() before any drawing and after drawing is finished.
    // User can override these to perform any common setup for subsequent draws and to
    // cleanup afterwards. By default, no-ops stubs are provided.
    //
    virtual void beginDraw();
    virtual void endDraw();

    //
    // Create/free the glyph bitmap texture used by the debug text drawing functions.
    // The debug renderer currently only creates one of those on startup.
    //
    // You're not required to implement these two if you don't care about debug text drawing.
    // Default no-op stubs are provided by default, which disable debug text rendering.
    //
    // Texture dimensions are in pixels, data format is always 8-bits per pixel (Grayscale/GL_RED).
    // The pixel values range from 255 for a pixel within a glyph to 0 for a transparent pixel.
    // If createGlyphTexture() returns null, the renderer will disable all text drawing functions.
    //
    virtual GlyphTextureHandle createGlyphTexture(int width, int height, const void * pixels);
    virtual void destroyGlyphTexture(GlyphTextureHandle glyphTex);

    //
    // Batch drawing methods for the primitives used by the debug renderer.
    // If you don't wish to support a given primitive type, don't override the method.
    //
    virtual void drawPointList(const DrawVertex * points, int count, bool depthEnabled);
    virtual void drawLineList(const DrawVertex * lines, int count, bool depthEnabled);
    virtual void drawGlyphList(const DrawVertex * glyphs, int count, GlyphTextureHandle glyphTex);

    // User defined cleanup. Nothing by default.
    virtual ~RenderInterface() = 0;
};

// ========================================================
// Housekeeping functions:
// ========================================================

// Flags for dd::flush()
enum FlushFlags
{
    FlushPoints = 1 << 1,
    FlushLines  = 1 << 2,
    FlushText   = 1 << 3,
    FlushAll    = (FlushPoints | FlushLines | FlushText)
};

// Initialize with the user-supplied renderer interface.
// Given object must remain valid until after dd::shutdown() is called!
// If 'renderer' is null, the Debug Draw functions become no-ops, but
// can still be safely called.
bool initialize(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle * outCtx,) RenderInterface * renderer);

// After this is called, it is safe to dispose the dd::RenderInterface instance
// you passed to dd::initialize(). Shutdown will also attempt to free the glyph texture.
void shutdown(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Test if the Debug Draw library is currently initialized and has a render interface.
bool isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Test if there's data in the debug draw queue and dd::flush() should be called.
bool hasPendingDraws(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Manually removes all queued debug render data without drawing.
// This is not normally called. To draw stuff, call dd::flush() instead.
void clear(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx));

// Actually calls the dd::RenderInterface to consume the debug draw queues.
// Objects that have expired their lifetimes get removed. Pass the current
// application time in milliseconds to remove timed objects that have expired.
// Passing zero removes all objects after they get drawn, regardless of lifetime.
void flush(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,)
           std::int64_t currTimeMillis = 0,
           std::uint32_t flags = FlushAll);

} // namespace dd

// ================== End of header file ==================
#endif // DEBUG_DRAW_HPP
// ================== End of header file ==================

// ================================================================================================
//
//                                  Debug Draw Implementation
//
// ================================================================================================

#ifdef DEBUG_DRAW_IMPLEMENTATION

#ifndef DD_MALLOC
    #include <cstdlib>
    #define DD_MALLOC std::malloc
    #define DD_MFREE  std::free
#endif // DD_MALLOC

#if DEBUG_DRAW_USE_STD_MATH
    #include <math.h>
    #include <float.h>
#endif // DEBUG_DRAW_USE_STD_MATH

namespace dd
{

#if defined(FLT_EPSILON) && DEBUG_DRAW_USE_STD_MATH
    static const float FloatEpsilon = FLT_EPSILON;
#else // !FLT_EPSILON || !DEBUG_DRAW_USE_STD_MATH
    static const float FloatEpsilon = 1e-14;
#endif // FLT_EPSILON && DEBUG_DRAW_USE_STD_MATH

#if defined(M_PI) && DEBUG_DRAW_USE_STD_MATH
    static const float PI = static_cast<float>(M_PI);
#else // !M_PI || !DEBUG_DRAW_USE_STD_MATH
    static const float PI = 3.1415926535897931f;
#endif // M_PI && DEBUG_DRAW_USE_STD_MATH

static const float HalfPI = PI * 0.5f;
static const float TAU    = PI * 2.0f;

template<typename T>
static inline float degreesToRadians(const T degrees)
{
    return (static_cast<float>(degrees) * PI / 180.0f);
}

template<typename T, int Size>
static inline int arrayLength(const T (&)[Size])
{
    return Size;
}

// ========================================================
// Built-in color constants:
// ========================================================

#ifndef DEBUG_DRAW_NO_DEFAULT_COLORS
namespace colors
{
const ddVec3 AliceBlue         = {0.941176f, 0.972549f, 1.000000f};
const ddVec3 AntiqueWhite      = {0.980392f, 0.921569f, 0.843137f};
const ddVec3 Aquamarine        = {0.498039f, 1.000000f, 0.831373f};
const ddVec3 Azure             = {0.941176f, 1.000000f, 1.000000f};
const ddVec3 Beige             = {0.960784f, 0.960784f, 0.862745f};
const ddVec3 Bisque            = {1.000000f, 0.894118f, 0.768627f};
const ddVec3 Black             = {0.000000f, 0.000000f, 0.000000f};
const ddVec3 BlanchedAlmond    = {1.000000f, 0.921569f, 0.803922f};
const ddVec3 Blue              = {0.000000f, 0.000000f, 1.000000f};
const ddVec3 BlueViolet        = {0.541176f, 0.168627f, 0.886275f};
const ddVec3 Brown             = {0.647059f, 0.164706f, 0.164706f};
const ddVec3 BurlyWood         = {0.870588f, 0.721569f, 0.529412f};
const ddVec3 CadetBlue         = {0.372549f, 0.619608f, 0.627451f};
const ddVec3 Chartreuse        = {0.498039f, 1.000000f, 0.000000f};
const ddVec3 Chocolate         = {0.823529f, 0.411765f, 0.117647f};
const ddVec3 Coral             = {1.000000f, 0.498039f, 0.313726f};
const ddVec3 CornflowerBlue    = {0.392157f, 0.584314f, 0.929412f};
const ddVec3 Cornsilk          = {1.000000f, 0.972549f, 0.862745f};
const ddVec3 Crimson           = {0.862745f, 0.078431f, 0.235294f};
const ddVec3 Cyan              = {0.000000f, 1.000000f, 1.000000f};
const ddVec3 DarkBlue          = {0.000000f, 0.000000f, 0.545098f};
const ddVec3 DarkCyan          = {0.000000f, 0.545098f, 0.545098f};
const ddVec3 DarkGoldenRod     = {0.721569f, 0.525490f, 0.043137f};
const ddVec3 DarkGray          = {0.662745f, 0.662745f, 0.662745f};
const ddVec3 DarkGreen         = {0.000000f, 0.392157f, 0.000000f};
const ddVec3 DarkKhaki         = {0.741176f, 0.717647f, 0.419608f};
const ddVec3 DarkMagenta       = {0.545098f, 0.000000f, 0.545098f};
const ddVec3 DarkOliveGreen    = {0.333333f, 0.419608f, 0.184314f};
const ddVec3 DarkOrange        = {1.000000f, 0.549020f, 0.000000f};
const ddVec3 DarkOrchid        = {0.600000f, 0.196078f, 0.800000f};
const ddVec3 DarkRed           = {0.545098f, 0.000000f, 0.000000f};
const ddVec3 DarkSalmon        = {0.913725f, 0.588235f, 0.478431f};
const ddVec3 DarkSeaGreen      = {0.560784f, 0.737255f, 0.560784f};
const ddVec3 DarkSlateBlue     = {0.282353f, 0.239216f, 0.545098f};
const ddVec3 DarkSlateGray     = {0.184314f, 0.309804f, 0.309804f};
const ddVec3 DarkTurquoise     = {0.000000f, 0.807843f, 0.819608f};
const ddVec3 DarkViolet        = {0.580392f, 0.000000f, 0.827451f};
const ddVec3 DeepPink          = {1.000000f, 0.078431f, 0.576471f};
const ddVec3 DeepSkyBlue       = {0.000000f, 0.749020f, 1.000000f};
const ddVec3 DimGray           = {0.411765f, 0.411765f, 0.411765f};
const ddVec3 DodgerBlue        = {0.117647f, 0.564706f, 1.000000f};
const ddVec3 FireBrick         = {0.698039f, 0.133333f, 0.133333f};
const ddVec3 FloralWhite       = {1.000000f, 0.980392f, 0.941176f};
const ddVec3 ForestGreen       = {0.133333f, 0.545098f, 0.133333f};
const ddVec3 Gainsboro         = {0.862745f, 0.862745f, 0.862745f};
const ddVec3 GhostWhite        = {0.972549f, 0.972549f, 1.000000f};
const ddVec3 Gold              = {1.000000f, 0.843137f, 0.000000f};
const ddVec3 GoldenRod         = {0.854902f, 0.647059f, 0.125490f};
const ddVec3 Gray              = {0.501961f, 0.501961f, 0.501961f};
const ddVec3 Green             = {0.000000f, 0.501961f, 0.000000f};
const ddVec3 GreenYellow       = {0.678431f, 1.000000f, 0.184314f};
const ddVec3 HoneyDew          = {0.941176f, 1.000000f, 0.941176f};
const ddVec3 HotPink           = {1.000000f, 0.411765f, 0.705882f};
const ddVec3 IndianRed         = {0.803922f, 0.360784f, 0.360784f};
const ddVec3 Indigo            = {0.294118f, 0.000000f, 0.509804f};
const ddVec3 Ivory             = {1.000000f, 1.000000f, 0.941176f};
const ddVec3 Khaki             = {0.941176f, 0.901961f, 0.549020f};
const ddVec3 Lavender          = {0.901961f, 0.901961f, 0.980392f};
const ddVec3 LavenderBlush     = {1.000000f, 0.941176f, 0.960784f};
const ddVec3 LawnGreen         = {0.486275f, 0.988235f, 0.000000f};
const ddVec3 LemonChiffon      = {1.000000f, 0.980392f, 0.803922f};
const ddVec3 LightBlue         = {0.678431f, 0.847059f, 0.901961f};
const ddVec3 LightCoral        = {0.941176f, 0.501961f, 0.501961f};
const ddVec3 LightCyan         = {0.878431f, 1.000000f, 1.000000f};
const ddVec3 LightGoldenYellow = {0.980392f, 0.980392f, 0.823529f};
const ddVec3 LightGray         = {0.827451f, 0.827451f, 0.827451f};
const ddVec3 LightGreen        = {0.564706f, 0.933333f, 0.564706f};
const ddVec3 LightPink         = {1.000000f, 0.713726f, 0.756863f};
const ddVec3 LightSalmon       = {1.000000f, 0.627451f, 0.478431f};
const ddVec3 LightSeaGreen     = {0.125490f, 0.698039f, 0.666667f};
const ddVec3 LightSkyBlue      = {0.529412f, 0.807843f, 0.980392f};
const ddVec3 LightSlateGray    = {0.466667f, 0.533333f, 0.600000f};
const ddVec3 LightSteelBlue    = {0.690196f, 0.768627f, 0.870588f};
const ddVec3 LightYellow       = {1.000000f, 1.000000f, 0.878431f};
const ddVec3 Lime              = {0.000000f, 1.000000f, 0.000000f};
const ddVec3 LimeGreen         = {0.196078f, 0.803922f, 0.196078f};
const ddVec3 Linen             = {0.980392f, 0.941176f, 0.901961f};
const ddVec3 Magenta           = {1.000000f, 0.000000f, 1.000000f};
const ddVec3 Maroon            = {0.501961f, 0.000000f, 0.000000f};
const ddVec3 MediumAquaMarine  = {0.400000f, 0.803922f, 0.666667f};
const ddVec3 MediumBlue        = {0.000000f, 0.000000f, 0.803922f};
const ddVec3 MediumOrchid      = {0.729412f, 0.333333f, 0.827451f};
const ddVec3 MediumPurple      = {0.576471f, 0.439216f, 0.858824f};
const ddVec3 MediumSeaGreen    = {0.235294f, 0.701961f, 0.443137f};
const ddVec3 MediumSlateBlue   = {0.482353f, 0.407843f, 0.933333f};
const ddVec3 MediumSpringGreen = {0.000000f, 0.980392f, 0.603922f};
const ddVec3 MediumTurquoise   = {0.282353f, 0.819608f, 0.800000f};
const ddVec3 MediumVioletRed   = {0.780392f, 0.082353f, 0.521569f};
const ddVec3 MidnightBlue      = {0.098039f, 0.098039f, 0.439216f};
const ddVec3 MintCream         = {0.960784f, 1.000000f, 0.980392f};
const ddVec3 MistyRose         = {1.000000f, 0.894118f, 0.882353f};
const ddVec3 Moccasin          = {1.000000f, 0.894118f, 0.709804f};
const ddVec3 NavajoWhite       = {1.000000f, 0.870588f, 0.678431f};
const ddVec3 Navy              = {0.000000f, 0.000000f, 0.501961f};
const ddVec3 OldLace           = {0.992157f, 0.960784f, 0.901961f};
const ddVec3 Olive             = {0.501961f, 0.501961f, 0.000000f};
const ddVec3 OliveDrab         = {0.419608f, 0.556863f, 0.137255f};
const ddVec3 Orange            = {1.000000f, 0.647059f, 0.000000f};
const ddVec3 OrangeRed         = {1.000000f, 0.270588f, 0.000000f};
const ddVec3 Orchid            = {0.854902f, 0.439216f, 0.839216f};
const ddVec3 PaleGoldenRod     = {0.933333f, 0.909804f, 0.666667f};
const ddVec3 PaleGreen         = {0.596078f, 0.984314f, 0.596078f};
const ddVec3 PaleTurquoise     = {0.686275f, 0.933333f, 0.933333f};
const ddVec3 PaleVioletRed     = {0.858824f, 0.439216f, 0.576471f};
const ddVec3 PapayaWhip        = {1.000000f, 0.937255f, 0.835294f};
const ddVec3 PeachPuff         = {1.000000f, 0.854902f, 0.725490f};
const ddVec3 Peru              = {0.803922f, 0.521569f, 0.247059f};
const ddVec3 Pink              = {1.000000f, 0.752941f, 0.796078f};
const ddVec3 Plum              = {0.866667f, 0.627451f, 0.866667f};
const ddVec3 PowderBlue        = {0.690196f, 0.878431f, 0.901961f};
const ddVec3 Purple            = {0.501961f, 0.000000f, 0.501961f};
const ddVec3 RebeccaPurple     = {0.400000f, 0.200000f, 0.600000f};
const ddVec3 Red               = {1.000000f, 0.000000f, 0.000000f};
const ddVec3 RosyBrown         = {0.737255f, 0.560784f, 0.560784f};
const ddVec3 RoyalBlue         = {0.254902f, 0.411765f, 0.882353f};
const ddVec3 SaddleBrown       = {0.545098f, 0.270588f, 0.074510f};
const ddVec3 Salmon            = {0.980392f, 0.501961f, 0.447059f};
const ddVec3 SandyBrown        = {0.956863f, 0.643137f, 0.376471f};
const ddVec3 SeaGreen          = {0.180392f, 0.545098f, 0.341176f};
const ddVec3 SeaShell          = {1.000000f, 0.960784f, 0.933333f};
const ddVec3 Sienna            = {0.627451f, 0.321569f, 0.176471f};
const ddVec3 Silver            = {0.752941f, 0.752941f, 0.752941f};
const ddVec3 SkyBlue           = {0.529412f, 0.807843f, 0.921569f};
const ddVec3 SlateBlue         = {0.415686f, 0.352941f, 0.803922f};
const ddVec3 SlateGray         = {0.439216f, 0.501961f, 0.564706f};
const ddVec3 Snow              = {1.000000f, 0.980392f, 0.980392f};
const ddVec3 SpringGreen       = {0.000000f, 1.000000f, 0.498039f};
const ddVec3 SteelBlue         = {0.274510f, 0.509804f, 0.705882f};
const ddVec3 Tan               = {0.823529f, 0.705882f, 0.549020f};
const ddVec3 Teal              = {0.000000f, 0.501961f, 0.501961f};
const ddVec3 Thistle           = {0.847059f, 0.749020f, 0.847059f};
const ddVec3 Tomato            = {1.000000f, 0.388235f, 0.278431f};
const ddVec3 Turquoise         = {0.250980f, 0.878431f, 0.815686f};
const ddVec3 Violet            = {0.933333f, 0.509804f, 0.933333f};
const ddVec3 Wheat             = {0.960784f, 0.870588f, 0.701961f};
const ddVec3 White             = {1.000000f, 1.000000f, 1.000000f};
const ddVec3 WhiteSmoke        = {0.960784f, 0.960784f, 0.960784f};
const ddVec3 Yellow            = {1.000000f, 1.000000f, 0.000000f};
const ddVec3 YellowGreen       = {0.603922f, 0.803922f, 0.196078f};
} // namespace colors
#endif // DEBUG_DRAW_NO_DEFAULT_COLORS

// ========================================================
// Embedded bitmap font for debug text rendering:
// ========================================================

struct FontChar
{
    std::uint16_t x;
    std::uint16_t y;
};

struct FontCharSet
{
    enum { MaxChars = 256 };
    const std::uint8_t * bitmap;
    int bitmapWidth;
    int bitmapHeight;
    int bitmapColorChannels;
    int bitmapDecompressSize;
    int charBaseHeight;
    int charWidth;
    int charHeight;
    int charCount;
    FontChar chars[MaxChars];
};


#if DEBUG_DRAW_CXX11_SUPPORTED
    #define DD_ALIGNED_BUFFER(name) alignas(16) static const std::uint8_t name[]
#else // !C++11
    #if defined(__GNUC__) // Clang & GCC
        #define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] __attribute__((aligned(16)))
    #elif defined(_MSC_VER) // Visual Studio
        #define DD_ALIGNED_BUFFER(name) __declspec(align(16)) static const std::uint8_t name[]
    #else // Unknown compiler
        #define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] /* hope for the best! */
    #endif // Compiler id
#endif // DEBUG_DRAW_CXX11_SUPPORTED

//
// Data generated from font 'Monoid18' by font-tool.
// Command line: monoid-18.fnt monoid-18.png monoid-18.h Monoid18 --static --compress --structs --hex --encoding=lzw
//
// The Monoid font, copyright (c) 2015 Andreas Larsen and contributors,
// is released under the MIT license. See: https://github.com/larsenwork/monoid
//
// The following glyph bitmap is an LZW compressed graymap.
// ~7.55 KB of data.
//
// It is better to ensure it is aligned to a, say 16 bytes boundary,
// because we cast the first few bytes to uint32s.
//
// font-tool: https://github.com/glampert/font-tool
// LZW compression: https://github.com/glampert/compression-algorithms
//
DD_ALIGNED_BUFFER(s_fontMonoid18Bitmap) =
"\x2F\x1E\x00\x00\x78\xF1\x00\x00\x00\x00\x06\x14\x38\x90\x60\x41\x83\x07\x11\x26\x54\xB8"
"\x90\x61\x43\x87\x0F\x21\x46\x94\x38\x91\x62\x45\x8B\x17\x31\x66\xD4\x88\x70\x43\x13\x8C"
"\x15\x80\x0D\xD8\x98\x10\x0D\x98\x84\x4D\x36\x8C\x8C\x28\x40\xC1\x01\x95\x2F\x1F\x06\x10"
"\x10\x00\x26\xC0\x44\xFE\x5C\x5A\xA4\xF4\x8F\x4E\xCD\x81\x01\xF8\xFD\x4B\x70\x30\x40\x3F"
"\x3F\x3E\x17\x32\xFA\xB7\xB4\x5F\xCA\x8C\x67\xFC\xD1\x04\xB0\x2F\x0D\x52\x82\x74\x96\xF2"
"\x54\xD9\xC4\x5D\xD6\xA5\xBF\x10\x36\x5B\xBA\xE3\x60\x81\x7E\xFD\xA4\x2E\x3C\xC0\xE8\xDB"
"\xD2\x77\xC1\x2A\x34\xF4\xF2\xEF\x52\x42\x7E\x3D\xAD\x1E\x74\xB5\x34\x13\xB4\xA5\x11\x9E"
"\x46\x05\x78\x37\x6F\xC0\x25\x4B\xDB\xFE\xAB\xB2\x51\x0E\xE2\x7E\xFF\xDE\xF9\x73\xA6\xF7"
"\x9F\xBF\xA5\x14\x0E\xEE\xFC\xC2\xD0\x44\x56\x7F\xEF\xB2\xB2\x60\xA8\xCF\xDF\x50\x84\x84"
"\x0B\x13\x8C\xF0\xAF\x5F\xCE\x2F\xFF\xC0\x62\x84\x4A\x13\x28\xDE\xC2\xD8\xFC\xC5\xA5\xE0"
"\xAF\x5B\x40\x1A\x16\x0F\xF8\xF3\x67\x02\x40\x17\x7F\x09\x4B\xB0\x06\x30\xE4\x5F\x6F\x83"
"\xC1\xFB\x31\xDC\xF7\x4F\x4D\x5A\x2B\xFF\xD8\x2D\x9C\xF2\x8F\x94\x42\xD4\xA9\x05\x7E\xF8"
"\x57\x35\xE0\x3E\x6E\x19\x8D\x07\xE4\x47\xBE\xF0\xB2\xE3\x83\x9D\x2B\x1A\x5F\x91\xF9\x66"
"\x00\xB3\x11\x66\xFB\x07\x02\xA0\xB2\x7F\xA2\x0D\x12\xE5\x1F\x26\x14\x3A\xAC\xBB\x81\x70"
"\x4B\xEB\xA0\x7C\xFE\x01\xCC\x2E\xDB\x16\x6A\x86\xC0\x8C\xC4\x3B\x10\x80\x01\xFA\x71\xCE"
"\xA2\x59\xDA\x9A\xC5\xC3\x7F\xBE\x01\x46\x23\x09\x11\x4A\xE4\x1F\x6F\x9A\xE8\x86\x2E\x00"
"\xE4\x6B\xAD\xA2\xC6\x34\x00\x08\x3F\x83\x34\xF8\x67\x32\x80\x6A\xBC\xB1\x20\x08\xFE\xE1"
"\x47\x21\x34\xFE\xF9\x00\xA0\x06\xAC\x00\xC3\x0A\x67\x04\x43\x88\xB9\xD8\x1E\x74\xE8\x3B"
"\x8C\xA6\xC3\x0C\x00\x66\xB4\xB2\x28\x00\xCB\xBC\x5A\x2A\xC9\x81\x5A\x3A\xC0\xCB\x03\x14"
"\x10\xC0\x3B\x08\x0B\xDA\x26\xAB\x76\x00\x30\xB1\x1F\x91\x2A\x92\x61\xC5\xFB\xB6\x24\x48"
"\x97\x7F\x66\x10\xE8\x9E\x06\x0F\xDA\xE5\x1F\xB2\x10\x82\xCA\x00\x00\xD2\xC8\x32\xCE\x82"
"\xD2\xF9\x27\xC6\x31\x9D\x24\xD3\xA2\xC3\xFC\x51\xE3\xB1\xE8\x30\x12\xC0\x0F\x7F\x1A\x20"
"\xA0\x01\x7E\xFE\x10\x93\xA0\x2B\xB3\xFC\xE7\xA8\x26\x13\x32\x81\x08\xE2\xD4\xFC\xD3\x22"
"\x0C\xFF\xA9\x03\x00\x34\xDE\x7B\xCE\xC1\x80\x0E\x78\xB5\xA0\x0C\xFE\x41\xB3\xCF\xE3\x3C"
"\xA8\xAC\x89\x06\x14\xF8\x63\xD0\x81\xDC\xD4\x11\xD4\x83\x36\x88\x6B\x30\xF2\x04\xF8\x8D"
"\xA0\x06\x32\x99\x45\xD5\x80\x76\x90\xC5\xA0\x40\xB3\x7A\x46\x41\x8B\x66\x7C\x72\x20\x60"
"\x3C\xEC\x36\x98\x09\x4F\x53\xF4\x20\x4B\x58\x33\xF5\xA2\x1D\xBC\xF2\xC7\x8A\x8D\x96\xF9"
"\xEF\x56\x00\xCC\xD8\x33\x20\x57\x7E\x15\x48\x3F\xFE\x16\xD2\x96\x20\x7B\x2A\xAB\x03\x84"
"\x7E\x30\x31\x21\x98\xA5\x00\x0C\x08\xA8\xAC\x20\x05\xA0\x92\x5F\x47\xF1\x0A\x2F\x01\x08"
"\x90\x2D\x49\x7D\x21\x92\x49\x00\x01\x0E\xC0\x14\x80\x8B\x35\x35\x88\x5C\x17\x0D\xB2\x98"
"\xE3\x91\x3B\x26\x08\x24\xAF\xFA\x31\xED\xA2\xE4\x34\x2C\x08\x2A\x78\xF7\x0B\x28\x9B\x7A"
"\x01\x62\xB9\x21\x8A\x05\x02\x23\xB1\x4E\x4D\x71\x2A\xA0\x19\xFE\x29\x25\x02\x75\x60\x03"
"\x68\xE6\x6B\x19\xAD\x80\x07\xD6\x44\x92\x83\xE6\x87\xD2\x3B\xD6\xA2\xC6\x3A\xD5\xF2\xDA"
"\x80\x1A\x5E\x13\x21\xAA\xAB\x7E\x7A\xAA\x45\x2A\x50\xD1\xC7\x8C\xB4\x89\xD9\xA0\x97\xE3"
"\xAD\x13\x00\x1E\x9F\x6E\xB7\x60\x44\x15\x52\x00\x0C\x84\xF1\x25\xA8\x31\x21\x03\x98\x6E"
"\x16\x40\xB0\x23\xA8\xEC\x12\x00\x12\x70\xB2\x19\x29\x6A\x62\x16\x7F\xC0\x68\x02\x0C\x7F"
"\x80\xF1\x88\x22\x2A\xBE\x81\x46\x72\xC8\x24\x87\xC6\x9B\xAB\x01\xC8\x5A\x01\xC3\x67\x31"
"\x89\x20\xC8\x2B\x0F\xDD\x72\xCC\xD5\x23\xAF\x6C\x21\x31\x0A\xF6\xA0\x97\x55\xA8\x8C\x07"
"\x1E\x82\xA2\x99\x56\x5B\x19\xC2\x99\xA0\xE4\x96\x6A\x79\x20\xA7\xD9\x8C\x00\x4B\x79\x05"
"\x02\x2A\xBB\x80\xF4\xF9\x87\x08\x2A\xBC\x5E\x28\x80\xAA\x97\x22\x3D\xA2\xF5\x12\x6A\x18"
"\xA7\x4A\xBC\x8A\x45\x23\xD4\x56\x98\x2F\xA3\x42\x8D\x25\xE8\x8C\x7F\x20\x00\x60\xAF\xA5"
"\xDC\x09\x86\x66\x3D\xF9\xAC\x5D\x5C\x82\x50\x25\x42\x2C\x45\x0C\x8A\xA0\x85\xE0\x79\x20"
"\xA2\x81\x4D\xF9\x39\x2F\xA0\x1A\xAD\xB6\xA8\x85\x52\xFC\xC1\x83\x16\xF0\xA0\x1F\xA5\x98"
"\x5F\x41\x82\x92\xA5\xF5\x19\xCC\x76\x99\xAB\x4C\x02\x14\xC0\x9A\x0A\x54\x80\x1D\x86\xCA"
"\x08\x6A\x68\xB5\xC0\x88\xA0\xCB\x17\x06\x69\x0C\xE0\x00\xC0\x03\x40\xA8\x01\x00\x0D\x50"
"\x16\x41\x78\x34\xB6\x9B\x69\x30\x20\xED\xEA\x4E\x70\xFE\x41\x9C\x8A\xE8\xE7\x50\x00\x01"
"\x12\x6B\x9C\xE7\x90\xA8\x01\x00\x7A\x06\xD1\xC7\x3B\x80\x08\x44\x7F\xB0\xE7\x20\x0D\xDC"
"\x07\xA5\x00\x50\x23\x34\x00\xA4\x0B\x66\xB3\x12\x6A\x4C\xF4\xB6\x8B\x30\x48\x56\xD0\xE2"
"\x8E\x43\x04\x04\x2E\xF5\x29\x84\x02\xCA\x01\x08\x73\x84\x25\x11\x2A\x54\x46\x86\x00\x28"
"\x40\xEE\x24\x26\x95\x06\x56\xCC\x28\x08\x69\x80\x83\xC4\x53\x8A\xC0\xFD\x03\x84\x14\x51"
"\x63\x55\xAE\xE3\x0F\x73\x61\x64\x3B\x16\x1A\xC8\x74\x00\x51\xB2\x92\x09\x04\x3A\x10\x59"
"\x23\x40\x22\x20\xAB\x13\x56\xE4\x15\xE4\x6B\x96\x57\x0E\x58\x91\x6C\xB1\x10\x22\x28\x69"
"\x48\xF1\x26\x97\xB0\x89\xD4\xC8\x1F\x6D\xF9\xCC\x52\x86\xA0\x12\xD2\xA8\x4C\x20\x2D\xF0"
"\x0C\x68\x96\x82\xBA\x81\x68\xC6\x90\x94\xF4\x09\x0F\xBA\x92\x15\x40\x5C\x47\x93\x00\x00"
"\x81\x15\x9A\x90\x4B\x5D\xE6\x72\x5D\x67\x4B\x12\x55\xC0\x33\x90\x06\x54\xF0\x1F\xEE\xA8"
"\x62\x44\x28\xF0\x18\xAF\x78\xC3\x67\x1B\x99\xCB\x22\x0C\xA2\x80\x4C\x24\xE6\x33\xDF\xE8"
"\x5E\x40\xCC\x82\x96\x56\x06\xB3\x20\x04\xF0\x12\x42\xF6\xC0\xBC\xE6\x71\x53\x22\xDF\xD4"
"\x88\x02\xFC\x51\x97\x9A\x1C\x8C\x94\x10\xD9\x89\x2B\x09\x72\x48\x72\xAA\xA6\x05\x26\xB0"
"\xE7\x3D\xED\x19\xC9\x79\xEE\x13\x20\x96\xF4\xC9\x17\x3C\x37\x91\x0A\xCC\x82\x4D\x0F\x91"
"\x27\x3F\x11\x9A\x50\x85\xF2\x13\x98\x0B\x75\xE8\x43\x21\x1A\x51\x89\x4E\x94\xA2\x15\xB5"
"\xE8\x45\x31\x9A\x51\x8D\x6E\x94\xA3\x1D\xF5\xE8\x47\x41\x1A\x52\x91\x8E\x94\xA4\x25\x35"
"\xE9\x49\x51\x9A\x52\x95\xAE\x14\xA1\x8C\x00\xC3\xFD\x20\x42\x03\x46\xE8\x73\x20\x44\xB0"
"\xE9\x4D\x15\xB2\x81\x9B\xDA\xB4\x99\x03\xA1\x41\xDD\x20\x12\x50\x96\xA2\x94\x53\xFF\x80"
"\x66\x43\x2A\xA0\x4C\xF8\x15\x64\x79\xE9\xCA\x21\x00\xB8\xB6\x94\xA5\x16\x64\x3A\x47\x75"
"\x48\x04\x82\x42\xC4\xA1\x1E\x04\x62\x83\xAC\x68\x04\x16\x07\xBC\x85\x60\xE3\x1F\xC0\x30"
"\x41\x4E\x0A\x42\x03\xB5\xFE\x2F\x79\x50\x21\x82\x5A\x69\x70\xCD\x81\xF0\xC0\x32\x98\x70"
"\x08\x03\x1E\x03\x0C\xB4\x9E\xB4\xA1\x08\x69\x58\xB5\x8E\x39\x10\xF7\x30\x40\xA1\x6E\x82"
"\x27\x50\x54\xB8\x10\xE3\x3C\xF5\x65\x0C\x61\x40\x50\x16\xC3\x10\x06\x59\x35\xA5\x87\xC4"
"\x0D\x34\x4C\xA1\x4C\x98\x1A\x64\x8C\xEA\x44\x28\x86\xE0\xC9\xC3\xA9\x2E\x84\x70\xBE\x7C"
"\xAA\x40\xBA\xE8\x0F\xC2\x2A\x84\x7A\xD6\x63\xE9\x21\x4B\xA6\x86\x37\x1D\xE4\x88\x7B\x3C"
"\xC8\x25\x42\x3B\x90\x04\xB0\x03\xA8\x06\x39\x28\x0F\xB5\x9A\x90\xD2\xBA\x2C\x79\x03\xE9"
"\xAC\x42\x0A\xE0\x8F\x5A\x56\x36\xB7\x00\x00\x8A\xEE\xEC\xF6\x8F\xD1\x1A\x64\x00\xD3\xB1"
"\xEB\x43\x22\xF0\x98\xE0\xC6\x73\xBB\x06\xD9\x47\x6E\x87\xEB\xBD\xE2\xFE\x71\xB9\x9F\xD3"
"\x9E\x42\x86\x10\x8C\x6F\x2D\x24\xBD\xEB\x45\xE8\x6F\x01\x62\x16\xE8\x0E\x64\x00\xB3\x60"
"\x84\xF2\xD6\xF1\x0F\x69\x35\x04\x04\x96\x89\xAC\x5D\x98\x94\x10\x1E\x81\xB7\xAD\xE3\x15"
"\x88\x80\x7A\x4B\x90\x76\x05\xD6\x65\x4B\x71\xE5\xF7\xAA\xC4\x4F\xF8\x02\x60\x27\xDD\x9D"
"\x48\xA1\xC2\x78\x10\x53\x0E\x48\x79\xFC\xF0\x07\x83\x07\x22\x9F\x4F\x31\x24\xBC\x03\x29"
"\x71\x9F\x9C\x68\x10\x65\x18\x98\x6A\xAE\x6C\x71\x42\xE1\x8B\x2E\x7F\x14\x94\x6C\xB5\x7A"
"\x2A\x11\xC6\xD2\x10\x13\xFD\x23\x18\x8B\x1C\x08\x23\xBA\x82\xC4\x86\x9C\x38\x20\x44\x36"
"\x88\x0E\x52\x5C\x10\x65\x24\x36\x21\x2D\xA8\x43\x1D\x7C\x6C\x10\x27\x43\x39\xA1\xDC\xF8"
"\xAF\x42\xC4\x23\xD6\x8D\x50\x09\x64\x05\x79\x0D\x9D\x1C\x32\x80\xAC\x4C\xD7\x60\x58\xF2"
"\x23\x69\x0B\x7C\xDA\x81\xD0\x2A\xC1\x03\x51\x86\xFE\xB6\xEA\x10\x74\x44\x58\x25\xBD\xF0"
"\x54\xC8\x1E\xD3\x66\x84\x14\xCA\x1B\x34\xD8\xEB\x40\x36\x50\x87\x1C\x0F\x39\xCD\x0F\x19"
"\xA3\x9E\x03\xA2\x8C\xF2\xC6\x99\x28\xFC\x60\xF2\x46\x0A\x50\xC1\x05\x06\x85\x84\x0D\x41"
"\x2C\x43\x82\x40\x67\x85\x18\x19\x4E\x6A\x16\xC8\xF7\x10\x0D\x10\xF7\x78\x9A\xD1\x00\xD0"
"\x87\x85\x2D\xF2\xD8\xA2\x1D\x04\x04\x4B\xA1\xAC\x77\x3C\x9B\x90\xE4\x12\x98\xB1\x06\x4E"
"\xF4\x3F\xE4\x4A\x10\x3D\xA9\xB2\xD4\xF3\xCC\xEE\x3F\x5C\x8B\x10\x0D\xD4\xF5\x66\xA8\x1E"
"\x08\x7C\x39\xCD\x69\xFA\xF6\xE3\xD1\x04\x41\x32\x99\x2F\xE2\x05\x20\xDA\x27\x21\xD2\x7E"
"\x07\xB5\x53\x3A\xEC\x7F\x5C\x57\x21\xBF\x0E\xF6\xB0\xBC\x63\x6C\x13\x17\xBA\x21\x8D\x81"
"\xF6\xB2\x67\xBC\x10\x05\x80\x00\x04\x9B\x45\xB1\xA6\xCF\xE6\x60\x75\xB3\xDB\xDD\x19\x31"
"\x01\x23\x00\x31\x92\x56\x1B\xF5\xAE\x8F\x09\x30\x75\xFB\x11\x5A\x7E\x9C\xDB\xB4\xC2\xB5"
"\x75\x6A\x57\x9B\x10\xEA\xFD\xDB\x83\x4B\x19\xF1\xD6\xE4\xAD\x90\x17\x4B\xDC\xE1\x2A\x99"
"\xCE\x79\x2F\xC2\x80\xA5\xFC\x01\x22\x09\x08\x4A\x07\x11\x62\x58\x86\x00\x85\x76\x8A\x2D"
"\x70\x43\x32\xF6\x0F\x6C\x27\xA4\x78\x1C\x17\x6E\xC4\x13\xB2\x01\x2B\xF8\xC3\x95\x32\xA7"
"\x39\x69\x61\x9E\x91\x83\xDD\x59\x23\x7D\x68\x2E\x36\xD9\x51\x6F\x81\x34\xA0\x09\x8F\xA9"
"\xA3\x42\x0A\x35\x0B\x10\x44\xCC\x20\x34\x68\x41\x3D\x01\x58\x6B\x01\xB6\x20\xAE\x1A\x7E"
"\x8C\x1C\x1B\xE2\xBB\xA0\x31\x3D\xDE\x18\x07\xF7\xD7\xBB\x2E\xEE\x88\x34\x32\xC9\x13\x2D"
"\x2A\xD6\x19\xF2\x6B\xE9\x86\x4C\x50\x4F\x8D\xEA\xDA\x7D\xBB\x6D\x88\x24\xD5\xEB\x15\x01"
"\x1A\x3C\xEF\x9E\xD0\x03\x90\x3A\xA1\x8C\x50\x03\x88\x11\xC2\x83\x4C\x44\x39\x20\x3B\xB5"
"\x69\x4E\x0D\xDF\x53\x81\xF0\xA0\x8C\x10\xA9\x4E\x46\x98\xE3\x2E\xF4\x12\xAC\xD7\x95\xA7"
"\x68\x63\x2A\x4D\xF1\xCC\x5B\x9E\xF3\x0F\xF5\x2A\x42\x3E\xDF\x79\xD1\x8F\x9E\xF4\xA5\x37"
"\xFD\xE9\x51\x9F\x7A\xD5\xAF\x9E\xF5\xAD\x77\xFD\xEB\x61\x1F\x7B\xD9\xCF\x9E\xF6\xB5\x8F"
"\x08\x01\xB8\x9E\x10\x8E\x35\x04\xF7\x2F\xC9\xFD\x45\x03\x80\xFB\xD0\x97\xD4\x77\xDF\x5E"
"\xDD\x2F\x51\x8D\xE3\xA5\x3C\x83\xC6\x05\x29\x45\x56\xF4\x9A\x90\xB9\x2D\xC5\x1B\x42\xBF"
"\x75\xD5\x78\x5D\x10\xDC\x00\x7E\x2A\x9D\x42\x35\xAB\x4C\xD3\x57\x82\x5C\xDC\x2D\x75\x27"
"\xDE\x32\x73\x5D\x90\x06\x74\x43\x9B\x19\x15\x0F\x9C\x6F\xA5\xC6\x05\xF2\x2F\x32\xFF\x80"
"\x3F\x41\xFC\xE3\x0F\x68\x58\xA6\xD9\x01\xB9\x21\x34\x40\x83\x66\x7A\xE1\x33\x82\x08\x95"
"\x42\x8D\x05\x6A\xC5\x3B\x20\x23\x88\xCC\xAF\x85\x26\x66\x81\x7E\x08\x88\x12\xE3\xE1\x8E"
"\xED\x1B\x82\x61\x16\x02\xB0\x9D\x08\xE2\x3A\x2A\x83\xEF\x10\xAA\x46\xEE\xAF\xE0\x78\x68"
"\x81\xF4\x64\x31\x02\x80\x68\xD2\x0F\x00\xBA\xA8\xFD\xF4\x43\x6D\xA8\x2A\x37\x00\x62\x11"
"\x1A\x50\xFB\xD2\xED\x20\x0A\x25\xFB\x10\x28\xB7\xD0\x41\x85\xE4\x89\x01\x84\x83\xFB\x02"
"\x42\x3E\x62\xED\x27\x7E\xA1\x32\xBE\xC1\xD6\x12\x0A\x04\xD1\x4C\xFE\x68\x4B\x85\xF4\xA4"
"\xBB\x80\xE6\xBF\x92\x63\x7D\x6A\xC4\xB3\x92\x2B\x04\x0D\x22\x01\x80\x2D\xE4\x56\x0D\xEC"
"\x4E\x03\xCE\xE4\x49\x3F\xB4\xC8\x3B\xE6\x0B\x20\xA6\x43\x5A\x16\x4B\xA3\x94\x70\xD3\x1E"
"\xB0\x88\xD4\xA9\x8B\xE0\x0D\x20\x60\x24\x20\x40\xCB\x20\xC4\x83\x88\xCC\x83\xC4\x24\xCF"
"\x20\xE6\x4C\x4A\xBC\x30\x7E\x78\x6E\x04\x15\x62\x8C\x18\x0E\x21\x82\x03\x0B\x01\x42\x0D"
"\x94\xC5\xC8\x16\xA1\x5B\x3C\x04\x1A\x52\x50\x0D\x98\x4F\x20\xAA\xE0\x19\x34\x10\x00\x62"
"\x21\x18\xF4\xA9\x14\xA0\xC1\x05\x69\xC4\xFE\x96\x70\x30\x26\x8D\x3C\xC8\x6E\x7D\x40\x4D"
"\x20\xBE\xCB\x20\x7C\x90\x49\x78\xA4\x10\x09\x65\xD1\x70\x84\x35\x4C\x80\x06\xB8\x8F\x1F"
"\x36\x63\x80\x14\x6F\x20\x6A\x84\x3D\xD6\x28\x01\x94\xEB\x21\xFA\x20\x0E\xC5\x2B\x87\xCE"
"\xA1\x53\x8E\x4E\x20\xF8\x00\xCC\x02\x02\x1D\x6A\x70\x20\x80\x24\x61\x98\x43\x6B\x84\xCD"
"\x46\x42\x51\x10\x7D\xAB\x27\x78\x04\x10\xC4\x4F\x20\x80\xA4\x6E\x56\x63\x81\x8E\xE8\x80"
"\x60\xE1\x1F\x42\x89\x8B\x66\xAB\x20\xDE\x6E\xBF\xBC\xEB\x1B\x94\x89\xDF\x0E\x62\x2E\xEA"
"\x66\x8D\xF4\xA3\x1D\x88\xE0\xF7\x0E\x22\x38\xF4\xA8\x1A\x0D\xC2\x9B\x0E\xC0\x52\xCE\x82"
"\x74\x92\x63\xAA\x30\xA4\x0C\x01\xA0\x6C\xC8\x63\x3A\x3C\xF1\x13\x11\x71\x20\x98\xE0\x72"
"\x00\xC2\xCA\x0C\xA2\x8B\x7A\x42\x14\xFA\x41\x01\xF4\x21\xC3\x00\xE2\x30\x6C\x43\xE4\x0C"
"\x02\x01\xFF\x61\x16\xBA\x82\x20\x07\x02\x11\x82\x04\x21\xDA\xA5\x51\x04\x4D\x31\xF0\xAC"
"\x32\xAC\x80\x6F\xB4\x6C\x20\x92\xF1\x55\xD6\x08\x1F\x3C\xC3\xB6\x0C\x62\x2F\x28\xF0\xF8"
"\x3C\xAD\x31\xC6\x30\x78\xF8\x81\x76\x02\xF2\x20\x34\x2E\x2A\x1A\xC3\xF8\x42\x66\xC2\x12"
"\x42\x3C\xD0\xE0\x8C\x8E\x62\x1F\xCA\x90\x47\xFA\xE1\x7E\x08\x80\x68\xAE\x6C\x20\x78\xA4"
"\x7A\x46\x03\x16\xCD\xF0\xC3\x6A\xA6\x39\x0E\xA2\x0E\x80\x41\x2A\x96\xE4\x20\x46\x4D\x3D"
"\x58\x08\x63\x1A\x80\x1B\xE0\x6E\x1A\xB5\x72\xDC\xD4\x2C\x38\x86\x87\x2C\x4B\x03\x20\x92"
"\x51\x8A\x4C\x0C\x32\x70\x68\x8B\x32\xC2\x07\xC1\x60\x52\xFE\x84\x1F\xCE\x4C\x20\xEC\x0C"
"\x44\xB2\xC2\x0F\x09\x82\x41\x00\xE1\x00\x36\x60\x3A\x56\xAE\x20\xB2\x27\x27\xFF\xA8\x65"
"\xF2\xC1\xC0\xF6\xA1\xFF\x00\x00\x1F\x5A\xA6\x87\x90\x8B\x37\x14\x42\x0C\x09\x4D\xCD\xF6"
"\x22\xD4\x00\x60\x2E\x22\x4B\x1B\xF2\x11\x21\xA8\x44\x19\x17\x42\x1F\x1A\xB3\x22\xF6\x21"
"\x18\xFA\xA1\x3B\x80\x02\xD5\x32\x01\x65\x0E\x42\x3C\x58\xD1\x2B\x13\x62\x2F\x6A\x31\xD6"
"\x56\xCC\xD3\x7E\x93\xA9\x28\x0D\x0C\xC0\xA0\x0E\xFC\x21\x18\x84\xCA\x24\xBD\x06\x68\x4A"
"\x8E\x0D\x4F\x4B\x3C\x8C\x92\x20\x34\x6E\x32\xCC\x22\x2E\x0F\xA2\x31\x9A\x91\x9B\xA6\x83"
"\x2B\xAD\x31\x21\x98\x63\x08\x3F\x8D\x8E\xEC\xA5\x2D\x85\x27\xDC\x04\xA2\x2C\x17\x22\x38"
"\x37\xA5\x1D\xB3\x44\xCD\xEE\xC1\x6B\x18\xA4\xF1\x9C\x13\xE9\xE6\x52\x21\x98\x71\x00\x62"
"\x20\x10\x55\xD1\xCC\xF6\x29\x28\x62\x43\x22\x17\x62\xCE\x52\xF0\x3E\x2C\x28\xD1\xBC\xA6"
"\x3E\xBC\xC3\x8F\xD4\x53\x21\xD0\x93\x20\x4C\x00\x04\xEC\x09\x04\x5A\xA0\x80\x44\xD3\x01"
"\x9D\xA7\x89\x30\x32\xFE\x12\x42\x23\x19\x62\x3B\xC0\x40\x06\x71\x50\xB0\x8C\xE7\x6F\x16"
"\xE2\xDE\xF2\x4D\x23\xA2\x04\x20\x90\x4C\xDC\x6C\xE6\x20\x0E\xE3\xCA\xF2\xA1\x2D\xDD\xE3"
"\x12\x7D\xD2\x3A\x9D\x72\xE4\xF8\xC1\x3A\xED\x42\xEC\x06\xA3\x39\x7D\x12\x4F\x1C\xC2\xC8"
"\xF2\xA6\x2D\x7F\xD4\x8B\x0E\x82\x39\xB2\x23\x7B\x2C\x13\x15\x97\x82\x47\x19\x42\x4F\xEC"
"\x83\x41\x06\x54\x66\xF6\xB0\x20\x34\x2E\x65\x00\x02\x2B\xA2\x13\x56\x24\x63\x21\xF4\xE3"
"\x80\x98\x00\x14\x43\x46\x20\xFC\xE0\x1C\xFF\xD0\xB9\x04\x02\x2B\x02\x33\x20\x48\x12\x3C"
"\xE7\xF3\x20\x4C\x24\x7D\x16\x22\x18\xAF\x88\x28\xA6\x03\x84\xDA\x85\x85\x76\x0E\x32\x27"
"\x22\xCB\x66\xE1\x31\x16\x32\x20\x90\x4C\x47\x0B\x42\x40\xFE\xC1\x14\x54\x04\x48\xE3\xAD"
"\x27\x0B\x02\x5D\x78\xCC\x2F\xCA\x4E\x3D\xDE\xC2\x14\x62\xC9\xFA\xAE\xB1\x88\x26\x35\x96"
"\x0C\xF3\xD8\x10\x23\x88\xFC\xA1\x86\x74\xF2\x34\x2A\xC3\x53\xC5\x6D\x3A\xEC\x52\x20\xA8"
"\x47\x47\x38\xC9\x52\x03\x82\xEC\x2A\xF4\x21\x9A\xA0\x5A\x9A\xAF\x20\xC8\xE5\x18\x0D\xC2"
"\x25\x8B\x29\x17\xCF\x33\x3B\x11\xA2\x09\xB0\x24\x80\x10\xA2\x78\xB2\xC2\x1D\xA6\x74\xFC"
"\x2C\x4C\x58\xC9\x47\x57\xCD\xB0\x6A\x40\x55\x04\xBD\xAB\x53\x28\x49\x1F\xB4\xD2\x07\xFF"
"\xC1\x30\xF7\x62\x4D\x07\x62\xEF\x5E\xA2\x25\x1A\x82\x55\x09\x02\x63\xFE\x2C\x23\xCC\x29"
"\x21\x82\x6F\x5C\x75\x8E\x1F\x37\xAA\x4C\xDD\xD4\xF6\xD8\xF5\x21\x64\xE1\x31\xEA\xB3\x5D"
"\xE5\x15\x22\x1E\xE3\x19\x8A\x75\x5E\xF1\x95\x20\x0E\x60\xF8\xF2\xB5\x5F\xFD\xF5\x5F\x01"
"\x36\x60\x05\x76\x60\x09\xB6\x60\x0D\xF6\x60\x11\x36\x61\x15\x76\x61\x19\xB6\x61\x01\x62"
"\x26\x18\x82\x5F\x1D\x76\xA2\xB6\x91\xAA\x9C\x54\x50\x2B\xC3\x5B\x01\xA2\x50\xD6\x75\xA2"
"\x74\xAA\x61\x0F\x09\x29\xA9\xC6\x56\x7F\xE2\x31\x08\xB5\xA2\x9C\xC6\x03\xF1\x35\x64\x7F"
"\xAE\xBF\xDA\x61\x56\x09\x82\x14\x54\x6E\xA3\x76\x48\x61\x59\x16\xA1\x14\x41\x1D\x05\x82"
"\x06\xAC\x89\x20\x24\x91\xC6\x2A\x91\x46\x49\x24\x20\x86\x76\x20\xD2\x8B\x43\x3E\xD2\x43"
"\xDC\xCB\x20\xD4\xE0\x1B\xDE\xE1\x1B\x22\x87\x51\x01\xA2\x19\x42\x09\x10\x9C\xF6\x1D\xAA"
"\xB2\xA6\x9C\x56\x16\x0E\xE0\x17\xA4\x16\x00\x9A\x81\xF1\xDC\xE1\x1D\xB8\x36\x54\x9E\x01"
"\x1A\xBE\xE1\x44\x0F\xA2\x19\x6C\x0A\x6A\x4D\x01\x66\x97\x03\x39\xA1\x36\xAE\xBA\xE1\x1D"
"\xC2\xF2\x4C\xCD\x32\x20\x12\x20\x18\xA0\x01\xC4\x8E\x76\x16\x44\x04\x21\xB8\x65\x16\x96"
"\xD6\x20\x1A\x34\x20\x1A\x23\xC1\x82\xF1\xE8\x70\xC3\x26\x45\x51\x20\x28\x26\x9C\xAA\x86"
"\x4F\x01\xA0\x50\xB2\x84\x72\xF9\x01\x51\x1D\x66\x75\xA0\xB5\x88\xDA\xEE\x48\xB3\x64\x49"
"\x13\x08\x61\xBA\xAE\x6A\x32\x34\x6F\x41\xA5\xBA\xDC\xB1\xE1\xFA\x67\x25\x73\x4E\xC9\x7E"
"\xE5\x14\x07\x02\x68\xF0\xD0\x47\x51\xF7\x71\x09\xC2\x52\x0E\x40\x11\xFC\x61\x03\x1A\xE0"
"\x77\xED\x11\x20\xBA\xA8\xFA\x00\x22\x00\xB4\xF5\x59\xA9\x83\x36\x1A\xCD\x78\x00\xA0\x33"
"\x84\xB1\xFB\xC0\x82\x00\xCC\x04\x1C\xFF\xC1\x23\x08\x40\x2D\x2D\x6C\x3A\xD6\xE5\x00\xD4"
"\xB2\x1C\xEF\xB2\x27\x02\xA5\x35\x0A\xE0\x88\x72\xE8\x66\x03\x80\x41\xB0\x35\x20\x30\x46"
"\x52\xBC\xA6\x1F\x2F\x85\x85\x82\xF3\x00\x4C\xC1\x73\x64\x57\x20\x7C\x50\x47\xBA\x28\x7D"
"\x9F\xA4\x81\x1A\x2B\x21\x6A\x64\x0E\x1A\x62\x3A\xC4\x0E\x3A\xFD\xEF\x79\xC9\x17\x20\x34"
"\x0E\x11\x6B\xC4\x42\x0E\x91\xB6\x34\x44\x3C\xC4\xC5\x4F\xCC\xA8\x1F\x8E\x0A\x11\xBC\x26"
"\x64\x97\x88\x68\x5C\x91\xB8\xD4\x6C\x8D\x82\x13\xC9\x20\xE5\x7B\x42\x34\x46\x03\x62\x3B"
"\xBE\x76\x7F\x35\x48\xD9\x6A\xC4\x1D\x36\x40\xCD\xF6\x81\x48\x01\x62\x2E\x0A\x06\x40\xBD"
"\x4B\x58\xB2\xA1\xFD\xEE\x52\x4E\xD3\x81\x66\xBE\xA3\x36\x38\x58\x6A\x3A\x2D\x5C\xBC\x83"
"\x11\x8A\xF0\x74\x7F\x18\x6E\x8E\xEF\x4F\x42\xA1\x32\x08\xAB\x0F\xEA\x65\x2F\xA4\x84\x37"
"\x8B\x08\x42\xF8\x77\xBC\xDA\x45\x4B\x66\x01\xF0\xF2\x10\xE7\x54\x09\x82\x1D\x58\x20\x16"
"\x34\x3C\x79\x2D\x8C\x21\x97\x8A\x23\xB8\x0D\x83\x78\x8A\x15\x82\xFC\x68\x2D\x5F\x58\x48"
"\x84\x2F\x13\x94\x00\x60\x19\x70\x58\x20\x94\x60\x66\x4D\x4D\x2B\x51\x58\x43\x17\xC2\x0A"
"\x82\x01\x95\x70\x4D\x8D\x71\xAE\x6E\x7C\xD8\xB7\x1E\x8E\x8C\x65\x24\xC5\x10\x19\x77\x19"
"\xF9\xD3\xD0\xD8\xC8\x42\xD6\x33\x12\xEE\x4D\xF1\x16\x00\xC4\x83\x0A\xCE\xA8\x09\xD2\xA1"
"\x3B\xF2\xA1\x0C\x83\x63\x32\x68\x25\x7D\xBB\x73\x94\x87\xF1\x21\x04\x40\x06\x17\xF2\xA0"
"\xEA\x37\x83\x68\x4B\x58\x16\x19\x8E\x0D\x94\x74\xF6\xB8\x94\xAD\x11\x92\x29\xE9\x27\x01"
"\xE0\x8E\x8D\xD8\x2D\xDD\x38\x21\x82\x23\x0D\x68\xE0\x1F\x0E\x60\x12\xF8\x21\x63\x3A\xD6"
"\x34\x01\x20\x0E\x54\x13\x81\x88\xA8\x8A\x55\x16\x00\xD0\x01\x16\x0F\xEA\x6E\x02\x82\x95"
"\x6B\x18\x8C\xEB\xE5\x83\xEC\x85\x87\xCD\xF8\x88\x51\xC3\x96\xCD\xB3\x72\x5F\x32\x54\x91"
"\xF8\x20\xF4\x01\x18\x32\xC1\x47\x64\x00\x71\x54\xD2\x20\xE6\xC2\x0A\xB6\x41\x2B\x81\x82"
"\x49\x68\x38\xDE\x9A\x95\x21\x8E\xE6\x52\x17\x22\x39\x5C\x0E\x00\x90\x0C\x1C\x55\x08\x43"
"\x4E\x16\x00\x10\x70\xC4\x8A\x62\xA0\x47\x99\x62\x26\x49\x46\x2E\xF8\x96\xF1\x42\x3C\xEA"
"\x98\x9C\x2B\x19\x00\xF4\x64\x45\xCC\x62\x29\xEE\x99\x4B\x97\x42\x94\xA7\x02\x06\x01\x80"
"\x5C\x34\x68\x2E\xD0\xAE\x21\xC2\x14\xA1\x0F\x0A\x1F\x01\x43\x75\xA9\x97\x3C\xA8\x67\x5D"
"\x93\xCB\xA3\xC9\xA5\x63\x67\x99\x97\x6B\xF9\x69\x48\x0E\x89\x5B\xC1\x4C\xDD\x79\xBC\x0E"
"\x09\xC2\xD4\x66\xCE\x22\x7A\x20\x2A\x3A\xA3\x91\x71\x29\x66\xA1\x1D\x5E\x77\x20\x2E\xDA"
"\x1D\x4C\xE1\x1B\xB2\x96\x78\xA0\x61\x16\x9A\x7A\x29\x12\xB2\x8C\x1B\x62\x89\xFF\x61\xFF"
"\x92\xBA\x3C\x3A\x75\x29\x26\x79\x20\xE8\x34\x13\x54\x24\x5E\xE3\xA9\x9B\x69\xF9\x9B\xBD"
"\x66\xCE\xBE\x61\x16\xBC\xB7\xAC\xB1\x29\xCF\x14\x82\x5E\x3A\x98\x92\x52\x8B\x4D\x1A\x63"
"\x83\x01\x42\x3C\x76\x39\x06\xB5\x84\x07\x2A\x76\x20\x28\x28\x2B\xA8\x77\x58\x09\xAF\x3C"
"\x2E\x16\x13\x98\x02\x04\x52\xD1\xB7\xD4\x40\xB6\xC8\x28\x21\x1C\xFB\x44\xB4\x18\x0F\xB7"
"\x6B\x46\x1A\xCA\xC8\x1A\xE0\xE2\x28\x57\xFC\xE6\x62\xAF\x99\xD1\x85\x2F\x16\x26\x64\xE2"
"\x21\xBC\x49\x62\x83\x0F\x62\x54\xE2\x62\x1A\xF9\xD8\x00\x98\x00\x24\x96\x90\x82\x97\x9C"
"\xBC\xE4\x99\x11\xE2\x35\x02\x95\x60\x6D\x07\x29\x57\xAA\x1B\x82\xA1\x2F\x96\x42\x59\x0B"
"\x36\xB7\x7F\x6E\xA5\x46\xD7\x1F\x5E\x35\x60\x8B\x82\x4F\x93\x3B\xF5\x20\x46\x01\x26\xB6"
"\x9F\x94\xD5\x9F\x9E\x7B\xBA\xA9\xBB\xBA\xAD\xFB\xBA\xB1\x3B\xBB\xB5\x7B\xBB\xB9\xBB\xBB"
"\xBD\x1B\xA5\x84\xEF\xBB\x33\xEA\xAF\x33\x62\xFA\xB6\xFA\x22\xC8\x1B\x22\xD2\xDB\xBA\x75"
"\x9B\x21\xF6\xCD\x43\xDC\xA1\x35\x2F\xA2\xBD\xDD\xDA\xBB\xE9\x9B\xE2\xE4\xF4\x25\xEE\xDB"
"\xAA\xED\x7B\xB8\x49\x0C\x27\x90\x62\xBF\x6F\x97\xBB\xF9\x41\x0D\x88\xC0\x6D\xE1\x36\x20"
"\xB8\x82\x6C\xBB\xF6\x6B\xE1\xA4\x21\x78\x40\x72\xBE\x21\x13\xC2\x55\x6B\x43\xA4\x02\xF4"
"\x41\x83\x36\xC0\x14\x24\xB0\x67\x7D\xEB\x0B\x4C\xC0\x1D\xBE\xA1\x6C\x0F\x22\x02\xA0\x16"
"\x6A\xA1\xA1\xB0\xFF\x95\xFC\x98\x02\xE2\x14\xA8\x9B\x1A\x60\x77\x7B\xF7\x77\x2B\xE5\x20"
"\x6E\xC8\x33\x12\x1C\xC2\x36\xD7\x20\x80\x26\x4B\x48\x76\x59\x9D\xEA\x36\x3B\xE5\xB8\xDB"
"\x55\x7B\x01\x80\x7B\xC9\xF1\x28\xFF\xE1\x37\x36\xE0\x31\xC4\x45\x72\x3B\x85\x4F\x07\xC0"
"\xC3\xE6\x47\x00\x62\x41\x3F\x7F\x94\x08\x9A\xF7\xBC\x4D\xED\x1F\x02\x2A\xB6\x97\xF5\x17"
"\x82\x6F\x7A\x0D\x51\x2A\x02\x85\x72\xFB\xF5\x46\xF3\x5A\x18\x17\xB8\xC8\xE2\x70\x08\x4C"
"\x61\x9A\x0E\x35\x13\x32\xC1\x14\xDA\x3A\x3C\xD6\x12\x43\x10\x91\x80\x6D\x88\xCD\xBB\x70"
"\x8D\x93\x24\x81\x1D\xEB\x79\xFB\xB5\x87\x71\xA6\x89\xEA\xA6\x46\x34\xA8\x66\xDF\x11\xCC"
"\x02\x80\x26\xA2\x19\x73\x64\x38\x20\xEA\x79\x20\xE6\xA2\xAA\x5B\x79\x3C\x3D\x6D\xB1\x71"
"\xDB\xAC\xBD\x67\x0F\x7D\x30\x85\x8B\x4B\xC7\x83\xFC\xD3\xBB\x58\x18\x81\x24\x44\xBD\xAB"
"\x65\x16\x39\x11\x77\x86\xD0\xF3\x75\xA6\x9D\xD1\x89\x2A\x9D\x96\xDF\xED\xC4\xA1\xB6\x0C"
"\xEB\xB7\x90\x09\x82\x39\x88\x9C\x1F\x0E\x59\x00\xDD\x02\x6A\x61\x7D\x65\x3D\xDD\x68\x55"
"\xD3\x8B\x25\x9A\x73\x55\xFD\xD3\xEB\xC6\x9A\x4D\x3D\x80\x5D\xB9\x5E\x6A\xC4\x1B\x9C\xDB"
"\xB9\x04\xDC\xF5\x64\x1D\xB5\xC4\x54\x61\x08\x5D\xD9\xB4\x79\x21\xA8\x19\x20\xA0\x7D\xD6"
"\x7F\x9C\xAA\xA6\x1D\x73\xBE\xC7\x7B\x15\xDD\x60\xB7\x5D\x20\x18\x04\x13\x1A\xC0\xB1\x45"
"\xFD\xB4\x82\x72\x9F\xFF\xA1\x9F\xFF\xD9\x20\xEE\x7D\x21\x2A\x93\x0E\xFB\x61\xA0\xC3\x3D"
"\x97\x8B\x7D\x5E\xDF\x3D\x20\x36\xCC\xA8\x6F\x6E\xD9\x9F\xC3\x32\x5E\x15\xA5\x2F\x64\x3A"
"\xD6\xC7\x2C\x7A\x57\x3A\xB4\xA7\xA5\x8F\x6C\xD5\x0E\x40\xE2\xDD\xFD\xD8\x97\x05\x10\x32"
"\x81\x07\x1A\xE0\xDB\xC7\x2B\x19\x0F\xD5\x14\xFE\xD8\xC2\xB0\xFA\x70\xB8\xFC\x86\x2E\xD0"
"\x7C\xB2\x77\x29\xD0\xD6\xAB\xCD\xB9\x98\x66\x41\xB0\x0D\x56\xFC\xD6\x5B\x20\xF2\xB3\xDE"
"\x19\x42\x0D\x7E\x67\x06\x01\x00\xB1\x5D\x67\xBD\xC3\x2A\x2B\xB2\xB7\xB1\xB5\x44\x3E\x85"
"\x89\x98\xDA\x01\xC3\x43\x5B\x61\x07\xA0\x78\x88\x9C\x21\xFA\x11\x62\x75\xAF\xC2\xEF\xD1"
"\xB5\x19\xC2\x9B\xAC\x5E\xEB\xAB\x1B\x72\xA4\xDA\x32\xF0\x5A\xBC\x19\x8D\xD4\xB9\xCD\xEC"
"\x47\xAF\x5C\xC1\x5C\xED\xDD\xFE\xED\xE1\x3E\xEE\xE5\x7E\xEE\xE9\xBE\xEE\xED\xFE\xEE\xF1"
"\x3E\xEF\xF5\x7E\xEF\xF9\xBE\xEF\xFD\xFE\xEF\x01\x3F\xF0\x05\x7F\xF0\x09\xBF\xF0\x0D\xFF"
"\xF0\x11\x3F\xF1\x15\x7F\xF1\x19\xBF\xF1\x1D\xFF\xF1\x21\x3F\xF2\x25\x7F\xF2\x29\xBF\xF2"
"\x2D\xFF\xF2\x31\x3F\xF3\x35\x7F\xF3\x39\xBF\xF3\x3D\xFF\xF3\x41\x3F\xF4\x45\x7F\xF4\x37"
"\x4A\xF8\x68\x9B\xAB\x7A\x6F\x24\x20\xA6\xED\x1D\x8A\x7F\x4C\xD7\x6F\x4E\x53\x20\x1A\x23"
"\x21\x83\x51\xAB\x02\x80\x34\x6C\x8B\x22\xAF\x06\x2A\xAA\x48\xD1\x0A\xE2\xD0\x68\xDA\x91"
"\xAF\x85\xD4\xB3\x24\xA8\x01\x02\x76\xB2\xC4\x15\xC9\xEF\x2D\x78\xC0\x10\x65\xC1\x33\xB4"
"\x9C\xB6\xB2\x82\xF9\x9D\x1F\xFA\xE3\x2D\xBF\xD3\xD8\xCD\xAB\x5A\x1B\x8C\x7F\xE7\xF7\x67"
"\x01\x0B\x70\x29\x42\xB0\x31\x82\xEB\x88\x9A\x6F\x28\x69\xAC\x28\x15\x2C\x76\x93\x6C\x17"
"\x84\x0C\x55\x03\x59\xF8\x6D\x3D\x86\xC1\xDF\x2D\x80\xC8\xF8\x6F\xE8\x1B\x50\xFE\x08\x33"
"\x34\x28\x80\x28\x2B\x9C\x01\x08\x28\x30\x60\x03\x7F\xFF\xFC\x99\x82\xF6\xEF\x1F\xA6\x81"
"\x0E\xF9\xFD\x7B\xF7\x6E\xE1\x3F\x80\x0E\x09\x1A\x44\xA8\xF0\x1F\xA9\x8B\x00\xCE\xFC\xEB"
"\x77\xF1\x8C\xBF\x00\x0E\x41\xF2\x73\xA8\xE3\xA0\xC9\x8B\xFC\xE8\x78\x8C\xE9\x31\xDD\xBF"
"\x19\x17\x0B\xF8\x13\x39\x50\xC9\xBF\x4B\x1E\x13\xFD\x5B\x24\xB0\x40\x3F\x7F\x09\x2E\x2E"
"\x2B\x39\xF2\x1F\x08\x87\x5E\x6A\x5E\xD4\xA6\x73\x20\xC9\x96\x54\x95\xCA\x7C\x29\x33\x60"
"\x82\x83\x2D\xB6\x0E\xD4\x1A\x10\xC4\xBE\x9E\x1E\xB5\x31\x14\x08\xA2\xDF\x3F\x16\x31\xC5"
"\x02\x20\x6B\x36\xEA\xBF\x52\x6A\xD9\xBA\x3D\xB9\xF0\xCB\x49\xAC\x02\x41\xFE\x1B\x32\x10"
"\x1F\x4B\x8F\x70\xC1\x7A\xA4\x52\x31\xA6\xA8\xC0\x83\xFF\x31\xF0\x38\x80\x9F\xD1\x80\x94"
"\xFE\xFD\xF1\x28\xC7\xEF\x5F\x7F\x03\x1C\x7E\xC0\xEC\x30\x00\xBF\x6E\x23\x39\x07\xAC\xBA"
"\xF5\xB0\x47\x9E\x55\x10\x0B\x3C\x1C\x40\x9F\x3F\x03\x0E\x4B\x2C\x1E\x18\xDA\xB4\x61\x98"
"\x02\x67\xD7\x76\x08\xE2\x1F\x37\xD0\xFF\x78\x53\x5D\xD8\xCF\xEA\x47\xD4\x80\xA7\x0E\x59"
"\x88\x3A\x20\x6B\xD8\x01\x27\xFB\x8B\xEC\x91\xC1\xBF\x94\x01\x57\xC6\x92\xF9\x34\x3C\xF7"
"\xE5\x1E\x55\xF7\x65\x0E\x60\x40\x3F\xE4\x01\x35\x88\x4E\x7F\x5A\xFD\x43\xDF\x32\xE5\xFC"
"\xFB\x60\x1D\x00\xEB\x38\x4C\x1D\x22\xF2\x9F\x43\xBD\x54\xE6\x92\x7D\x01\xF9\xD7\xD4\x40"
"\x40\x29\x38\x10\x81\x47\x51\xD5\x0F\x18\xF1\xA5\xE6\x5C\x3F\x80\xFC\xF3\x1A\x00\xF9\xB8"
"\xC3\xC8\x74\xFC\x1D\xB8\x1F\x00\x8D\x85\xE8\x50\x25\xFF\x30\x11\x50\x3E\xD9\x6D\x95\xCF"
"\x3F\x11\x34\xA6\xE1\x69\x02\x45\x70\x40\x40\x5E\x4C\x87\x0E\x67\x5D\x40\x25\x9F\x8F\x6F"
"\x95\xE8\xD0\x0C\x73\xC1\xC6\xDA\x24\x02\x0A\xB4\xCC\x54\x03\xF1\x58\x42\x6F\x0E\x1D\xD9"
"\x60\x40\x4A\x7A\xD4\xE4\x49\xFD\x08\x90\x4D\x81\xCD\xA9\x77\x46\x3F\x07\xE4\x23\x12\x4F"
"\x43\x50\xF1\x61\x75\xB0\xC1\xB7\xA4\x47\x38\xF9\x03\x80\x19\x44\xC6\xB4\xD2\x42\xDE\x9D"
"\xF7\x4F\x05\x00\x84\xC6\x4E\x40\xAE\x4C\x07\x94\x06\x03\xED\xB2\x65\x67\xF4\xA1\x07\x24"
"\x58\xEC\xFD\x03\x06\x7D\x4F\x0E\x74\xE2\x9F\x03\x29\x33\x1D\x48\x52\xC6\x16\xA2\xA3\x0E"
"\x45\x4A\x28\x92\x15\xE2\xC9\xD1\xA0\x7D\x01\xC0\x13\x20\xEC\x88\x64\x86\x99\x41\x22\x46"
"\x93\x4D\x60\xE1\xF7\x8D\x3F\x9E\x21\x86\x56\x8F\x9A\xFD\x87\x46\x61\x49\xD1\x37\x64\x1A"
"\x03\xE9\x43\xE7\x55\x84\x7E\x58\x29\x62\x3B\x50\xF4\x4D\x26\x3C\xAC\x76\xE0\x70\x6A\x02"
"\x90\xE9\x52\x94\x52\xA7\x6C\x48\x17\x39\xAB\x17\xA5\xAA\x29\xF3\x0F\x05\x15\x76\xA9\x94"
"\x3E\x0B\xBD\x56\x68\x58\xA8\x6E\xA5\x98\x45\x88\xB9\x88\x22\x6C\xAD\x2C\xA4\x9D\x47\x2C"
"\xFC\xF3\x67\xB6\xF9\x35\xAB\xE7\x4D\xFD\x9C\x0B\x9F\x4F\xF3\xF1\x9B\x15\xB9\x03\x6D\x10"
"\x0C\x45\x21\x7D\x66\xD8\x1F\x01\x10\xD0\x80\x1A\x0B\xA5\xE8\xD0\x2B\xFF\xD8\x66\xAD\xC1"
"\x08\x2B\xCC\xF0\x45\x0F\x47\x9C\xDC\xB5\x4A\x51\x90\x9B\xB8\x5C\x02\xB0\xC4\xB4\x20\x1B"
"\x28\xE2\x7A\x45\xB9\x0B\x56\xC7\xBF\xC0\x06\x01\x45\xE1\xC5\x04\xDF\x6B\xFC\xD4\xA1\xCF"
"\x1C\x1B\x16\x77\x16\x56\xB6\xE6\xF5\xE3\xA7\xFE\x8A\x48\x80\x09\xDD\xFC\xD3\x4E\x4C\x65"
"\x0D\xFC\x4F\x90\x4A\x6A\x0A\x2D\x00\x48\x0F\xBC\xB4\x79\x12\xFF\x1A\x50\x63\x4E\x7E\x8C"
"\x1E\x08\x0D\x70\xCB\xE8\x7E\x24\x8A\xB8\xCF\xAE\x88\x65\x6B\xC5\x36\xF4\x7A\x44\x1A\x1A"
"\x11\xBC\xD8\x4A\x71\x67\x02\xC0\x73\x40\xDA\x7C\x48\x92\x47\x38\x2E\x2A\xAC\xC9\x00\xD0"
"\xF4\xE8\x43\xEE\xCC\x12\xCC\x2C\x07\xC5\x54\xAD\xC6\x86\x01\x2E\x78\x1D\x11\x14\x2E\xE9"
"\xA6\x24\x1F\xE0\x8F\xD1\xA6\x76\x0B\xEC\xA2\x70\xC7\x14\x1A\xB3\x60\x61\x2E\x10\x6E\x46"
"\xC7\x70\x5C\x4C\xA4\xA5\x51\x85\x48\x53\xF4\xD3\xC0\x3E\xA8\xB2\xED\x53\xE4\x2C\xD7\xC9"
"\xB8\x43\xA2\x04\x1B\xED\xDE\x00\xAC\xD4\xF0\x43\x63\x03\x70\xA2\x8C\x90\x62\x65\x15\x48"
"\xFA\xB9\xC4\xFB\x56\x86\xFF\xF5\x78\xA1\x01\xCE\x50\x66\xE5\xFD\xD6\x27\xA2\xAA\x26\x77"
"\x1E\x10\x4D\x79\x65\xF3\xCF\x0E\x31\x61\xF3\x0C\x30\x00\x75\x5C\xC7\x3F\x4E\xC6\x94\xCE"
"\xE9\x8E\x79\x64\x2B\xF9\x03\x61\x53\x3B\x88\xB7\x77\xEC\x87\xD7\x2E\xFB\x2A\x90\xAD\x82"
"\x05\xD0\x8F\x6F\xEA\x9C\x0A\xDB\xFD\x17\xE1\xC3\x39\x7E\x21\x4D\x3B\x00\x21\x40\xCB\x79"
"\x0D\x31\x8A\x81\x9D\x88\xAA\x17\x9D\x9C\x75\x6A\x73\x00\xE8\xC5\x5E\x02\xF2\xAD\x78\xC9"
"\xC4\x56\x2D\x60\x46\xB0\xA2\xD3\x91\x81\x44\x4E\x82\x7A\x33\x19\x50\x7A\x36\x2E\x48\xB5"
"\xE5\x22\x1D\x33\xDA\xFB\xE0\x75\xAE\xE8\x21\x66\x85\x0E\x71\x21\xF4\x3E\x22\x9D\xE7\xF9"
"\x6C\x84\x60\x21\x8A\xA0\xAC\x53\xBD\x6F\xF9\x0D\x00\xBB\xF8\x07\x5F\x96\x62\xA7\x80\x0C"
"\xB1\x76\x09\x30\x88\xA7\x64\x52\x16\x30\x08\x44\x01\xDC\x20\x22\xE7\xFE\x15\x10\xF5\x34"
"\xE1\x20\x19\x3B\xA1\x40\x56\x90\x1B\x87\x64\xAF\x14\x04\x10\x5B\x04\xF0\x62\x28\xD8\x64"
"\xAF\x21\x01\xD9\x80\x19\x73\xF8\xAD\x03\xD6\x50\x87\x5B\x01\xCC\x37\x24\x62\xC7\x77\x4C"
"\xED\x8C\x31\xC1\x0F\x03\x03\xE2\x32\x58\x09\x69\x64\x00\x50\x0C\x0B\x65\x42\x41\x0C\xCA"
"\x84\x58\x07\x31\x85\xC0\x8A\x86\x98\xEA\xC1\xE7\x1D\xD0\x98\x85\x29\xDC\xB1\x10\xC1\x24"
"\x10\x00\x84\x91\xDD\x40\x0A\x92\xB4\xB4\xE8\x11\x2C\x11\xC8\x48\x42\x16\x62\x97\x38\xF2"
"\x04\x8E\x39\x0C\xC8\x3E\xFC\x71\x47\x89\xE4\x31\x79\x9F\x54\x4E\xDE\x58\x69\xBC\x8B\xD0"
"\x26\x65\x01\x39\x51\x11\x07\xC2\x36\x06\xB2\x0D\x66\x32\x09\xCD\x0B\x63\x52\x01\x60\x50"
"\xC4\x1F\x50\x44\x8C\xD8\x54\xC6\x96\x81\x79\x63\x03\x4E\xBC\xA5\xC8\x6E\x19\x90\x03\x0C"
"\x6E\x21\xEF\x68\xC2\x56\x9A\x69\x1D\x6C\x26\x93\x9B\xE7\x99\x8E\xF9\x70\x58\xB5\x8B\x40"
"\x6D\x60\xB1\xBC\x1D\x3B\xDB\xE9\x4E\x99\x08\xE0\x00\x04\x78\x67\x4C\x04\x40\x80\x7B\xD2"
"\xD3\x23\x14\xB4\x26\x3D\xE3\x69\xA3\x7C\x02\x34\xA0\x02\x1D\x28\x41\x0B\xFA\xCE\x8E\xFD"
"\xE3\x1B\xA6\x78\x86\x41\x1B\xEA\xD0\x87\x42\x34\xA2\x12\xBD\x88\x09\xDA\x71\xC3\x89\x62"
"\x34\xA3\x1A\xDD\x28\x47\x05\x42\x80\x03\x08\xA0\xA3\x22\x1D\x29\x49\x4B\x6A\xD2\x93\xA2"
"\x34\xA5\x2A\x5D\x29\x4B\x5B\xEA\xD2\x97\xC2\x34\xA6\x32\x9D\x29\x4D\x6B\x6A\xD3\x9B\xE2"
"\x34\xA7\x3A\xDD\x29\x4F\x7B\xEA\xD3\x9F\x02\x35\xA8\x42\x1D\xEA\x46\xED\x49\x80\x90\xCE"
"\xF4\x9E\x47\x25\x6A\x41\x3F\x46\xC1\x55\xA1\x73\x96\xEB\x64\xE5\x27\xF9\xF9\x31\x92\x5D"
"\x84\x07\xDF\x48\x1A\x3F\x9F\x26\xD5\x45\xA5\x93\x22\xEB\x04\x8C\x74\x82\x21\xCE\xAD\x58"
"\xE1\x99\x2F\x33\xA2\x74\xA0\x71\xD6\xAD\x44\xA7\x90\x40\x15\x97\x25\x9A\xE8\x11\x7D\xBC"
"\x72\x22\x1F\xC2\xEB\x44\x22\xF2\x0F\xAB\x4A\xEA\x43\x67\xFB\x87\x3B\x4C\x31\x0B\x68\xF8"
"\xA3\x97\x0F\x89\xC8\x2B\xA7\xCA\x1F\xC6\xDE\x71\xAC\x90\x65\x62\x3F\x20\x74\x91\x00\xAC"
"\x63\x21\x0A\x3D\xAC\x3F\x20\x98\x3C\x3B\xAE\x15\x2C\x17\x54\xAC\x4F\x0B\x65\x2B\xF7\xC0"
"\xE6\xAA\x5C\x8C\xC9\x55\xAF\xDA\x18\x77\x48\xB3\x48\x56\x5C\xED\x1C\xFD\x12\x81\x66\x08"
"\xD2\x21\xAE\xF8\xC7\x33\xB8\x06\x96\x42\x55\xA0\x2C\xBA\xF3\x88\xC8\x66\xC1\x0F\x11\xE6"
"\x14\x3D\x2B\x41\x2E\x6B\xDD\xD7\xB9\xD6\xA2\x86\x6D\xCC\x85\xA1\x6C\x53\x8B\x1A\x45\xC0"
"\x29\x20\x1D\x9B\x6E\xD7\x04\xC2\x80\xCE\x6E\x25\x1D\x6D\xF2\xCF\xF6\xE6\xAA\x94\x0A\x1C"
"\xC4\xB2\xFB\x51\xAD\x1C\x57\xF9\xB1\xFF\xED\xA7\x7A\xB4\x95\xC9\x55\xF5\xC1\x2C\xF8\x22"
"\xE6\x63\xFB\xF0\xAC\x43\x32\xE0\xA9\xC8\x15\x93\xA7\x76\x2B\x00\x44\x9C\x96\x5F\xE7\xFE"
"\x0B\xBA\xEA\x41\xDE\x23\x67\xDB\xDE\x71\xD2\xE7\x52\xC0\xAB\xA5\xCF\x00\x2C\x93\x00\x11"
"\x2F\x52\x5B\x14\xF0\x97\xEE\x81\xBE\xBD\xB1\xD7\x76\xF4\x6D\xD3\x45\xBA\x80\x1A\x06\x73"
"\xAE\xAB\x86\x51\xF1\x39\x07\xF2\x14\x4A\xA1\xB8\xB9\x03\x09\x00\x6E\x49\x3B\x90\x30\x09"
"\x44\x64\xBF\x13\xF0\xC0\x0C\x7C\x60\x0A\x3F\xF7\x1F\x80\xA8\x03\x91\x89\xAC\x86\x60\x9C"
"\xD8\x2F\x3C\x30\x45\x26\x32\x61\x8A\xB7\x3C\x43\x0D\x45\xAE\x03\x0D\xB2\xF2\x0D\x46\x34"
"\xD9\xC9\x98\x74\xEF\xE3\x62\x5C\x27\x26\x67\x62\x16\x06\x09\xB0\x40\xE0\x23\x4C\xEE\x90"
"\x39\xB9\xEA\x64\x67\x88\xDF\x47\xDF\x59\x5E\x74\xC2\x02\xD9\x43\x32\xC1\xFA\x49\x45\x38"
"\xF1\xCE\x10\xBE\x08\x28\xBA\xEC\xBE\xE4\x7C\xD2\x1F\x06\xC6\xCF\x96\x35\x09\xC8\x9E\x82"
"\xC4\x34\xEC\x12\xA6\x88\xDA\xFC\x5C\x7F\xB4\x60\x03\x92\x96\x74\x05\x2E\x91\x64\xAB\x24"
"\xEC\x00\x8A\x30\x13\x26\x2A\x30\xE9\xAD\x65\x65\x11\x07\x68\x00\xA9\x1B\x30\xCF\x38\x02"
"\xE0\xC5\x98\xFA\x73\x67\x36\x50\xEA\x0A\x4C\xE8\x1F\xBE\x75\x48\x52\x0A\x16\x90\x00\xF9"
"\xD8\xA6\x24\xB1\x4D\x00\xCA\x52\x68\xEB\x38\x3A\xC1\x24\x76\x08\xE5\x68\x1D\xD8\xCB\xB1"
"\x78\x77\xD6\x6D\x9A\xB1\x29\x7C\x95\x8B\x10\x8B\xD1\x02\x29\x4B\x1D\xC0\x60\x6D\x2B\x64"
"\x36\xD9\x34\x45\x0F\x6E\x82\x23\xA2\x3E\x20\xB8\xB6\x08\x1C\x08\xED\x36\x8C\xD5\xF9\x26"
"\x6B\xD9\xD4\xF2\xC7\xAC\xAD\xE6\xED\x1F\xBB\x84\xBF\x00\x60\x1B\x9C\xA5\xAD\xD3\x42\x01"
"\x25\xCD\x32\xD1\x12\x90\x85\x3D\x6E\x81\xF0\xA8\x44\xAA\x95\xEF\x83\xE3\xC8\x9E\xFA\x0D"
"\x52\x69\xC0\x46\xCD\x00\xBE\xE8\xB9\xBA\x6C\xC0\x04\x12\x07\x01\x0D\xDA\xF3\x53\x71\xB9"
"\xC8\xC6\x01\xE1\xA4\x40\x5C\x26\xD7\x4C\xBA\x17\x35\x21\x44\xB5\x9B\xAB\x0B\xEF\x81\x2C"
"\xE3\x1F\xF2\x73\x48\x08\x9D\xDD\xDD\x8E\x83\x57\x2F\x50\x15\x08\xBF\x4B\xCB\x19\xF8\xBC"
"\xE8\x22\x5D\xF1\x06\x27\x23\x50\x16\x8D\xA3\xBB\xC5\x3F\x1B\x08\xBB\xBC\xD1\x6E\x34\xF4"
"\xCF\x87\x0E\x2E\x54\x04\x32\x2B\xC1\x50\xFC\x83\xE7\x27\x27\xC8\xB7\x86\xBB\x4B\x44\x02"
"\x8A\x45\x88\x46\x0D\x7E\x10\x7E\x80\x0B\xBE\x63\x16\x5B\x75\xB8\x43\xF8\x7A\x90\x77\xF8"
"\x03\xB0\xFF\x16\xC8\x00\x2E\x08\x8D\x30\x6F\x35\xE9\xB0\x69\x65\x5E\x25\x2B\x91\x3A\x4A"
"\x47\xBD\x33\x4E\xD7\x66\x83\x81\xC7\xA5\xDC\x91\x22\x64\xC6\xD5\xB3\x6C\x4E\x1F\xB4\xEC"
"\x38\x20\x4D\x18\x3B\x61\xAD\xD0\xCD\x4F\x06\x49\xC1\x31\x01\x83\x5A\x23\x22\x8B\xA3\x69"
"\x7B\xDA\x5F\xD5\x4B\x32\xDD\x8A\x98\x26\x58\x52\x9D\x5D\x4A\x9A\x3F\xBE\xB1\x4C\xA4\x4C"
"\x15\x24\x26\x60\xAA\x75\x02\x20\x00\xA4\x8E\xF4\xA3\x04\x70\x39\x4A\x65\x0F\x7B\xD6\xE3"
"\x3E\xF7\xBA\xDF\x3D\xEF\x7B\xEF\xFB\xDF\x03\x3F\xF8\xC2\x1F\x3E\xF1\x8B\x6F\xFC\xE3\x23"
"\x3F\xF9\xCA\x5F\x3E\xF3\x9B\xEF\xFC\xE7\x43\x3F\xFA\xD2\x9F\x3E\xF5\xAB\x6F\xFD\xEB\x63"
"\x3F\xFB\xDA\xDF\x3E\xF7\xBB\xEF\xFD\xEF\x83\x3F\xFC\xE2\x1F\x3F\xF9\xCB\x6F\xFE\xF3\xA3"
"\x3F\xFD\xEA\x5F\x3F\xFB\xDB\xEF\xFE\xF7\xC3\xFF\xF8";
#undef DD_ALIGNED_BUFFER

static const FontCharSet s_fontMonoid18CharSet = {
  /* bitmap               = */ s_fontMonoid18Bitmap,
  /* bitmapWidth          = */ 256,
  /* bitmapHeight         = */ 256,
  /* bitmapColorChannels  = */ 1,
  /* bitmapDecompressSize = */ 65536,
  /* charBaseHeight       = */ 20,
  /* charWidth            = */ 17,
  /* charHeight           = */ 30,
  /* charCount            = */ 96,
  {
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0, 150 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,  60 }, {  17,  60 }, {  68,   0 },
   { 153,   0 }, { 119,   0 }, {  34,   0 }, { 204,  30 },
   { 119,  30 }, { 102,  30 }, {   0,   0 }, { 102,   0 },
   { 170,  30 }, { 136,   0 }, { 187,  30 }, { 221,   0 },
   {  34,  60 }, { 187,  60 }, { 170,  60 }, { 153,  60 },
   { 136,  60 }, { 119,  60 }, { 102,  60 }, {  85,  60 },
   {  68,  60 }, {  51,  60 }, { 136,  30 }, { 153,  30 },
   {  17,  30 }, {  85,   0 }, {   0,  30 }, { 221,  30 },
   { 204,   0 }, { 170, 210 }, { 153, 210 }, { 136, 210 },
   { 119, 210 }, { 102, 210 }, {  85, 210 }, {  68, 210 },
   {  51, 210 }, {  34, 210 }, {  17, 210 }, {   0, 210 },
   { 238, 180 }, { 221, 180 }, { 204, 180 }, { 187, 180 },
   { 170, 180 }, { 153, 180 }, { 136, 180 }, { 119, 180 },
   { 102, 180 }, {  85, 180 }, {  68, 180 }, {  51, 180 },
   {  34, 180 }, {  17, 180 }, {   0, 180 }, {  85,  30 },
   { 187,   0 }, {  68,  30 }, { 170,   0 }, {  51,   0 },
   { 238,  30 }, { 119, 120 }, { 102, 120 }, {  85, 120 },
   {  68, 120 }, {  51, 120 }, {  34, 120 }, {  17, 120 },
   {   0, 120 }, { 238,  90 }, { 221,  90 }, { 204,  90 },
   { 187,  90 }, { 170,  90 }, { 153,  90 }, { 136,  90 },
   { 119,  90 }, { 102,  90 }, {  85,  90 }, {  68,  90 },
   {  51,  90 }, {  34,  90 }, {  17,  90 }, {   0,  90 },
   { 238,  60 }, { 221,  60 }, { 204,  60 }, {  51,  30 },
   { 238,   0 }, {  34,  30 }, {  17,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
   {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }
  }
};

#if DEBUG_DRAW_CXX11_SUPPORTED
#define DD_ALIGNED_BUFFER(name) alignas(16) static const std::uint8_t name[]
#else // !C++11
#if defined(__GNUC__) // Clang & GCC
#define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] __attribute__((aligned(16)))
#elif defined(_MSC_VER) // Visual Studio
#define DD_ALIGNED_BUFFER(name) __declspec(align(16)) static const std::uint8_t name[]
#else // Unknown compiler
#define DD_ALIGNED_BUFFER(name) static const std::uint8_t name[] /* hope for the best! */
#endif // Compiler id
#endif // DEBUG_DRAW_CXX11_SUPPORTED

DD_ALIGNED_BUFFER(fontRussoOneMonoBitmap) = 
"\x6F\x79\x00\x00\x76\xCB\x03\x00\x00\x00\x06\x14\x38\x90\x60\x41\x83\x07\x11\x26\x54\xB8"
"\x90\x61\x43\x87\x0F\x21\x46\x94\x38\x91\x62\x45\x8B\x17\x31\x66\xD4\xB8\x91\x63\x47\x8F"
"\x1F\x41\x86\x14\x39\x92\x64\x49\x93\x27\x51\x2E\x9C\xE0\xC8\x56\xCB\x96\x82\x26\xA4\x94"
"\x39\x93\x66\x4D\x9B\x37\x71\xE6\xD4\xB9\x93\x67\x4F\x9F\x0E\x27\x6C\x72\xE9\x12\xD0\x4F"
"\x93\x43\x86\xBA\x1C\x62\x94\x69\xD3\x85\x43\xE6\xFD\x93\x3A\xF5\xDF\xBC\xA5\x4E\xB1\x66"
"\xD5\xBA\x95\x6B\x57\xAF\x5F\xC1\xEA\x84\x4A\xB5\xEA\xD5\xB0\x16\x67\x91\xFD\xE7\x2C\xE6"
"\xD9\x84\x43\xB4\x49\xAD\x55\x23\xE0\x84\x2B\x33\x91\x26\x4D\x15\x33\xEF\xD0\xBD\x1C\x27"
"\x38\x53\x3B\x95\xAD\x5B\xC3\x87\x11\x27\x56\xBC\x98\x71\x63\x86\x69\xC9\x32\x72\xDC\x50"
"\x84\x39\xB2\x56\x27\x03\xF0\x72\x59\x0E\x40\x46\xFF\xB4\xD1\x45\xB9\x99\xAC\x39\x11\x9A"
"\xD5\x9A\xE6\x58\x59\xAA\x33\x1D\xAF\x05\xFF\x53\x9D\x99\x76\x6D\xDB\xB7\x71\xE7\xD6\x3D"
"\x90\x35\xD5\xC2\xBB\x05\x92\xA6\x2A\x79\x72\xEF\xC1\x84\xDB\x9A\x14\x3E\x55\xF5\x72\xA9"
"\xB3\x35\x8E\xFD\x47\x1C\x00\x64\xE8\xC0\xB1\x67\xD7\xBE\x9D\x7B\xF7\x8E\xCE\x31\x6F\x87"
"\x8C\x3C\xF3\xF8\xE3\x52\xA9\x2B\x4F\x7D\xDA\xB9\xEC\xD3\x1B\x7B\x17\x0E\xFC\xFC\xBD\x77"
"\xFB\xF7\xF1\xE7\xD7\x8F\xDB\xFC\x74\xEE\xC6\xCB\xCA\x0C\xC0\xE3\xAE\x2B\xA9\xBD\xE6\xD6"
"\x03\x2C\xB6\xC1\x7E\xDB\xCF\xC1\x07\x21\x8C\x50\x42\x9D\x00\x2C\x10\x38\xE7\xD2\x73\x0C"
"\x2E\xFF\x56\x8A\x6A\xAA\x79\xBC\x90\xE9\x40\xF6\x12\xE4\x48\xBA\xCB\xCC\x9A\x50\xC5\x15"
"\x59\x6C\xD1\x45\x87\xFA\x6A\x29\xC5\xEC\x58\x72\x69\x93\xE4\x32\x9B\xC0\x8C\xE4\x6A\xA8"
"\x45\xAA\xD0\x66\x32\xC1\x8C\x21\x89\xBC\x22\x26\x21\x89\x1C\xD2\x48\x8F\x56\x4A\x0A\xA6"
"\x17\xA1\x6C\x51\x48\x41\x92\xAA\xB2\x4A\x47\xCC\x30\x01\xA4\x29\xAD\xEC\xB2\x25\x2C\xB5"
"\xE4\xE8\x8A\x1A\x5B\x4A\x65\xC7\x28\x45\x9A\x20\x15\x2B\x1D\xB9\x0B\xCD\x37\xE1\xDC\xA9"
"\x86\x35\xCB\xC4\x51\xA7\xF9\xD4\xCA\x30\xA0\x13\xE9\x33\xE8\x33\xB5\x1A\xD4\xE8\xCF\xF3"
"\x08\x3D\x6F\x96\x38\x23\xEA\xB0\xD0\x45\xE7\x71\xC4\xCE\x8A\x14\x5D\x94\xD0\x46\x1F\x95"
"\x48\x0E\x0F\x07\x3B\xA5\xD2\xEA\xC8\x0A\x74\xB1\xF6\x02\x64\x88\xCF\xA9\x42\x8C\x68\x40"
"\xAA\xC2\x2B\x08\xBC\x19\x3B\xC2\x53\xAD\x52\x4F\x3A\xD5\xBD\x8E\x46\x9D\x35\xA1\x41\xA9"
"\x3A\x54\xC1\xD2\xEA\x73\xB5\xCF\x8F\x64\xB5\x50\xA4\x60\xEB\x2B\x89\xD8\x8F\x90\x58\xF0"
"\xD7\x82\x70\x5D\x6B\x53\x8F\x9A\x95\x4A\x57\x82\x40\x85\x55\x20\x5F\xA7\xD2\xF3\x22\x59"
"\x25\x25\x74\x5A\x44\x19\xAA\x21\xAE\x6E\x17\x05\xF2\x22\x71\xC9\x2D\x57\x34\x8A\x40\x25"
"\xEB\xDB\x80\x56\xCD\xAC\xDD\x77\x0F\xC2\x96\x54\x89\xB8\x95\x2A\xD5\x6B\x95\xFD\x87\x5E"
"\x5A\x31\x75\x37\xA5\x76\xFF\xB1\x56\xA3\xFE\xA4\x32\x98\xA0\x53\xF7\xCD\x68\xD4\x06\x07"
"\xF4\x74\x23\x82\x15\x16\x89\xE2\xD1\xCE\xAB\xD8\x22\x7B\x6D\x25\x68\x54\x8D\x3F\x02\x55"
"\x58\x84\xFD\x2D\x48\x56\x90\xD9\x4D\x97\xDC\x7F\xC1\x35\x28\x5F\x95\x99\x2B\x16\x5F\xCB"
"\x60\x26\x54\xD8\x86\x38\x46\x71\x20\x6C\x59\x4E\xEC\x62\x85\x7E\x86\xE8\x65\xFF\x08\x6A"
"\xF6\xE6\x8D\xA2\x8D\xF9\xA4\x9C\x9D\x05\x18\xD0\x67\x01\x48\xBA\xE7\x8A\xDA\x4B\xAF\xBD"
"\xA9\x37\xEE\xD7\x37\xA8\x77\x3D\x4E\x62\x90\x98\xFE\xDA\xA2\xA4\x6F\xEE\x4F\x6C\x60\x69"
"\x46\x95\x55\x8E\x25\xAE\xF5\x68\x8A\x48\xAE\x59\xE0\x96\x17\x8A\x5B\xEE\xA9\xB0\xAE\xFB"
"\x6E\x6F\x29\x02\xB0\x96\x21\x1D\x09\xD8\xE0\x78\xE5\x3D\xEF\x6C\x80\x98\x46\x39\x21\x13"
"\x5E\x6B\x5C\x07\x65\xE9\x1D\x50\xDB\xD5\xD2\x1E\x4C\x71\x13\x03\xD6\xB9\x23\x92\x41\x66"
"\x98\x55\x8C\xA2\xB5\x36\x74\x90\x6A\xFD\xF0\xF3\x8F\x4A\xD7\xF7\x74\x8F\x52\x0F\x75\x23"
"\xB7\x65\x06\x88\x70\x93\x38\xD6\xB3\xF4\x86\xA3\x1E\x2C\x6F\x53\x2B\xDF\x7B\x6E\xBA\x11"
"\xAA\xF5\x1C\x2F\xBB\x3C\x47\x2D\xDC\x61\xCC\xFC\x9F\xE1\x89\xAF\xD2\x78\xCD\x23\x3A\x11"
"\x3A\xF3\xD2\x93\xBC\x36\x82\x0B\x4E\x08\xFB\xCB\x1D\xC2\x55\x4F\xA3\x63\xFF\xAE\xD0\xC3"
"\x39\x4A\x7A\x38\xD6\x95\x17\x1B\xD4\xDD\x25\xEA\x6F\x5F\xF7\x57\xBF\xC8\xFC\x6C\x4D\x9A"
"\x1F\xBD\xFA\x0B\x9D\x1C\x52\x41\x6A\x90\x3E\x76\x9E\x65\x22\xB5\xA2\x65\x8C\x20\x24\xD3"
"\x1F\x45\xEC\xB7\x37\xF6\x81\x2B\x5A\x9D\x81\x88\x1C\xF2\x84\x40\xB5\x38\xF0\x21\x10\x8C"
"\xCC\x44\xFC\x17\x10\xEA\x09\x04\x7C\xD7\x23\xD4\xD9\x5E\xC6\x3D\x84\x38\xAE\x0C\x69\x6B"
"\xD8\xC7\x48\x62\x37\xD5\x19\xAB\x77\x4F\xF3\x08\xE7\x0A\x62\x2F\xE4\x6D\xAB\x77\xD0\xC1"
"\xD6\xDB\x2A\x32\x34\xF2\x65\x44\x87\x5C\xE3\x61\x0B\x3B\xE5\x43\x0C\x62\xCA\x42\xB3\x3B"
"\x49\xAD\x3C\x65\xB7\x77\x79\xAE\x6B\x5B\xF3\x8C\xE5\xF4\xC3\xB8\xC6\x85\x49\x20\x52\x74"
"\xDC\x6B\x84\xF8\x98\xDF\x3D\x04\x80\x13\xE9\xCF\x02\x77\xD6\x2F\x30\x0E\x24\x83\x00\xD9"
"\x20\x40\x46\x75\xC0\x2D\xBD\x26\x21\x8D\xCB\xA2\xF6\xF2\x77\x90\x04\x8A\xD0\x20\xA5\xD3"
"\x06\xAB\xCC\xF6\xC6\xBE\x01\xF1\x82\x24\xC1\xDE\xBD\x9C\x16\x44\x6A\xE9\x2E\x23\x6A\x1A"
"\x8A\x30\x8E\x77\xC8\x44\x7E\x49\x8F\x0B\xF9\x63\xC2\xFC\x28\x29\x3A\x52\x4D\x92\xA8\x23"
"\xA2\xCC\xAC\x27\x13\x26\x06\x24\x5F\xD7\x81\x1D\xE6\x22\xF8\xC4\x57\x81\xED\x14\xDB\x30"
"\xE5\x29\xB7\xA1\x30\x11\x38\x03\x95\xDB\x70\x46\xEC\xE4\xD0\x4A\x53\x9E\xA2\x22\x57\xE0"
"\x84\x2D\x4C\x49\xA8\xB9\xF4\xA8\x50\x94\x82\x54\xBF\xD2\xB3\x92\xE7\x79\xAD\x2D\xCD\xDA"
"\xA1\x41\xB0\x45\x9C\x47\x9E\x83\x82\xB9\x73\x62\xF4\x2E\xA9\xC1\xF3\x99\x51\x90\x1B\x01"
"\x84\x2C\xA5\x00\x10\x13\x38\x62\x98\x3F\x5A\x17\x00\x90\x50\x8B\xCC\x31\x93\x92\x36\x0B"
"\xDF\xD0\x26\xE9\x31\xE5\x49\x85\x96\xC1\x19\xE5\x48\x12\xD8\x9A\x46\x7A\x51\x52\x63\x74"
"\x08\x0C\xF9\x75\xBC\xF8\x3D\x64\x68\xE9\x3A\xE6\x3D\xEB\x99\xC2\x80\x8E\x44\x85\x78\xB3"
"\xA4\xD2\x38\xC8\x2B\x9A\xE0\x53\x76\x93\x4A\xD1\xFA\x3A\x12\xAD\x54\x25\x2D\x9D\x10\x11"
"\xE0\x40\xAA\x55\xC0\xC1\xA8\x31\x21\x4C\xDB\x9B\x36\xC2\x47\x99\xDE\x51\x47\x04\xE3\xFA"
"\x60\x31\xAB\x29\xB4\x91\x36\x54\x52\xBF\x31\xE6\x3C\xD1\x18\x4D\x6A\xD2\x0F\x35\x64\xA9"
"\xE8\x42\xA2\xC5\x88\x1A\x68\x8D\x2A\x72\x98\xC0\xA5\x08\xD5\x4E\x89\x3C\x52\x5B\xF1\xBC"
"\xE9\x9E\xD6\x79\x3F\xC4\x89\x91\x24\x1E\xA5\xCA\x51\xF9\xC9\x47\x85\x06\xF2\x99\x2C\xED"
"\x23\x46\xFA\x49\xAE\x7F\x32\x24\xAB\x38\xA4\xA1\xA4\xBC\x6A\x91\xAE\x86\xD4\x22\x65\x8C"
"\xE9\x55\x45\x44\xC8\x80\x24\x30\x3D\x0C\xFD\xA1\x0B\x45\x69\xD3\x90\x7C\x52\x20\x06\xE4"
"\x4D\x0B\x67\xC8\x10\xA7\xDE\x6D\xAB\x0B\x5B\xE9\x4C\xC7\x87\xD2\xAA\x46\xB5\x8F\x8F\xA4"
"\xE9\x4B\x25\x62\xD6\x0D\x76\xB1\x7C\xBE\x8B\xE3\x50\x17\x55\xA0\xD6\x01\x72\x22\x57\xC4"
"\x95\x4B\xA1\x37\x57\xE5\x09\xA3\x85\xF6\x8C\x48\xD2\x6C\x01\xC5\x17\x8A\x16\x00\xF6\x0A"
"\xAB\x48\x1D\x4B\x9E\x8C\x80\x96\xB4\x1F\x61\xED\x3B\x41\xF2\x5A\xB9\x52\xF5\x3A\x79\xAC"
"\x09\x12\xDB\xE2\xD4\x69\xC9\x70\x9F\x11\x01\x55\x7A\x28\x1A\x12\xDE\xE6\x13\xAE\x56\x1D"
"\x2C\x44\xF6\x7A\x37\xA8\x66\x32\xAB\x98\x3D\x2E\x6A\xA7\xD9\x1E\x53\x76\x53\x9E\xCE\x54"
"\x2D\x44\x14\x7B\x3E\x23\x0A\x2A\xB5\xE7\x39\xED\x20\x17\xF5\xAE\x82\x42\xD2\x61\xD1\x1C"
"\x90\x67\x25\x22\xD1\x21\x20\xEC\xBB\x12\x31\x2D\x11\x5A\xD8\x57\x87\x9C\xEA\x37\xBF\x85"
"\x8F\x54\x61\x26\x5F\x84\xBC\x37\xBE\x30\xC5\x99\xD6\xCC\x01\xDF\xE2\xB6\x0A\xC0\x02\x4E"
"\x69\x74\x64\x5A\xD3\xA7\xDA\xC4\xB4\xEF\x19\xD0\x36\xA6\x8A\x5B\x8E\x20\x6C\x5F\x49\x93"
"\xC3\x15\xAF\x08\xBA\x8D\x0A\xE4\x76\x29\x4A\x1A\x47\x3B\xCA\xD3\xEE\xA2\x17\x00\x99\x1C"
"\x95\x23\x30\xAC\x03\x2A\x22\x96\x77\x85\xAD\x26\x9F\x54\xC3\x62\x95\x52\x45\x1B\x74\x30"
"\x83\x8F\x9E\x7A\x5E\xD7\x76\x97\x80\xBE\x95\x54\xAA\x26\x4B\xD9\x87\x78\x61\x1B\xC2\xB0"
"\x85\x8D\xAF\xA0\x83\x53\x50\x25\xC6\x53\x1D\x56\x7F\xED\x4B\x3A\xE5\x1D\x8A\xC2\xBD\x9D"
"\x48\x70\x1B\x7C\x5F\x1E\xEB\xF7\x20\xB5\xA2\xB2\x3E\xA5\xAC\x96\x2F\x67\x16\x94\x02\xAB"
"\x32\x6D\xDF\x83\x2D\x2E\x4F\x58\xB4\xE0\x11\x44\xE6\x4A\x15\x65\x8D\xD0\x17\x47\xF1\x24"
"\x73\x62\xD3\x97\x9C\xF9\xC1\x6A\xB8\x14\x99\x8F\x29\x9D\xF1\x12\x22\xD1\xC1\xA4\x4C\x46"
"\x02\x09\xF3\x3C\x33\x17\x3F\x77\x20\x32\x26\x6C\x74\xAB\x59\xA1\xD3\x38\xFA\x21\xE3\x35"
"\x4D\x07\xA1\xC5\xE3\xE3\x80\x58\x55\xDD\x9A\xD6\x78\xC9\x0B\x91\x47\xB2\x25\x8D\x06\xDA"
"\x30\x9D\x41\x02\x43\x39\x53\xEE\x69\xAB\x8E\x68\x28\xE3\x4A\xD3\xCD\x41\xD1\xD5\x1B\x51"
"\xF5\x86\x3F\x72\x6B\x58\x23\x18\xA1\xCD\xCA\xEB\x49\xA2\x6C\x36\x13\x00\x33\xD6\x42\xD6"
"\xF0\xAE\xAD\xDB\xAD\x5F\xFF\xB7\x44\x9C\x3A\xCE\xB4\x24\xAC\x59\x64\x3B\x9B\xD1\x0B\xC9"
"\xA4\x73\xC8\x47\x69\xE8\xD2\x14\xDB\x6D\x91\x74\xB2\x9B\x86\xE7\xFC\x95\x7A\xC7\x6A\xD1"
"\x86\x23\x90\x10\x93\x09\x90\xEC\x1C\x9C\xB8\x42\x98\x3E\x0C\x59\xB5\x40\x58\x67\xA0\xA2"
"\xF7\x6C\x45\xBD\xA8\x10\xF5\xA7\xBD\x15\x39\x33\xB5\x4D\x87\xB6\x04\x9D\xAA\xDF\xDD\x3B"
"\x9E\x15\x00\x4C\x56\x8C\xC0\xAF\xAE\x77\xC6\x6A\x0B\x55\x43\x70\x85\xEF\x71\xE0\x10\x9F"
"\xF8\x44\x24\x5E\x62\x8B\x97\x79\x56\x3A\xC6\x09\x9D\x01\x98\xC7\x2C\x6B\xA4\xCF\x6B\x55"
"\xD9\xB2\x1B\x82\xCF\x4E\xBE\xA7\xD6\x1D\x39\x95\x9E\x10\xB6\xE6\x6B\x1F\x98\x59\x34\xDF"
"\xB6\x52\xB1\x7D\x68\x25\x0B\x52\xDB\x30\x2A\x34\xAA\x8A\xC2\xEF\xD3\xD8\x25\x49\x43\x42"
"\xC2\xD8\x9A\x6D\x5C\x63\xD7\x8A\xD3\xE0\x25\xCB\x26\xB4\xE6\x8C\x61\x03\x6A\x13\xAD\x75"
"\x88\x17\xA8\x8B\xAA\xCE\xB4\xA7\x54\x35\x48\xD2\x92\x5E\x97\x68\x05\x4F\x53\x7C\x62\x96"
"\x26\x6C\x59\x4D\x96\xAC\x13\xED\x23\x37\xEC\x55\xBF\x0A\xCE\x10\x88\x02\x76\xC1\x65\xFF"
"\x9D\x5B\x35\x32\x77\x80\x1B\xFB\x22\x19\xF4\xF5\x55\xAE\x90\xA4\xA3\xA3\xA4\xC1\x28\x74"
"\x8E\x69\x4E\x45\xE2\x2E\x8B\xDD\xE4\xE9\x42\xB9\xDC\xD5\xFA\xC7\x52\xFD\xFB\x22\x44\x2F"
"\xFA\x90\xE8\xA0\xBC\x4D\x60\x38\xE6\xFE\x9D\x79\xB5\x1B\x7F\xDD\x47\x73\x9B\x5C\xC4\xE9"
"\xF9\x43\x4C\x10\xF8\x24\xE9\x40\xE9\x05\x9B\xC0\x92\x8F\xF3\x78\x39\x26\x7D\xEC\x4B\x57"
"\x5E\xD3\x31\xBA\x51\x50\x85\x16\x45\xC1\xAD\xC8\x6B\x54\x6F\x06\xD6\x97\xB6\x5F\x85\x01"
"\x10\x54\x11\x12\x6F\x80\x64\x7C\xD6\xD0\xD3\xFB\xAB\x23\x7B\xF1\x8A\x3C\x2C\x39\x11\xF3"
"\xAF\x42\x28\xFF\xFC\x83\x81\xB9\xF5\x25\x6B\xBE\xDA\xE0\xA5\x56\x92\x7F\x7D\x02\xE4\x5E"
"\x8E\xEC\x1B\x8B\xA2\xC3\x9F\x66\x40\x5E\x68\x79\x45\x7C\x9F\x50\xC7\x5B\xD9\xDA\xFD\x05"
"\xF7\xBD\xEF\xC7\xFC\x8A\xA0\x4B\xD3\xA2\x9F\xEF\x5F\xBB\xED\x56\x6C\x8E\xAB\x00\xB0\x5B"
"\x9C\xCB\xFF\x48\xAE\xF8\xD6\xAD\x97\xE8\xAF\xE6\x9C\xAC\xFB\x0C\x86\xE9\xE4\xED\x82\x40"
"\xED\x50\xE2\x8F\x23\xB8\x2E\xD6\xD6\x6C\xBF\xB4\xE6\x7D\xAC\x0E\x23\xA2\x4D\xE3\x68\x6F"
"\xCE\xF0\x4B\xA9\x40\xA2\x6A\xDC\x69\x8B\x78\x2D\xA5\xF4\xAF\xBC\x8A\xAB\x05\x41\x90\xF1"
"\x60\xF0\xFB\xFA\xC4\x57\x70\x2F\xEC\xF2\xC4\xB6\x78\x46\xBD\xB4\xEC\x01\x8B\x4D\x5F\x64"
"\xE9\x94\x9C\xA1\x01\xB1\x4F\x9F\x7C\x65\x1E\xE6\x20\x60\x48\x6D\xCA\x2E\xC2\x0B\x92\x2A"
"\xB5\x64\xAE\x00\x41\xAF\xD8\xA2\x70\xD1\x0A\xA5\x16\xF4\x6C\x00\x8F\xED\xA9\x82\xCC\xFB"
"\x3E\x8B\xF6\x32\x8A\xC3\x6E\x6F\x02\xCF\x27\xC8\x30\xE3\x02\x49\x70\x6E\xF8\x04\xF9\x16"
"\x6F\xC0\xB4\x6F\x0B\xC9\x8E\xEE\x64\x0D\xFA\xBC\x4B\xFA\xE0\x0F\xED\x46\x87\x0E\xE3\x70"
"\xEF\x4C\x70\xB5\x70\xED\xEC\xD0\x0A\x0E\xE7\x90\x0F\xD9\xCE\x23\x50\x70\xEC\xE2\xEE\xE1"
"\x00\xE5\xAF\xC0\x4D\x1B\x12\x6E\x62\xC4\x4F\xFE\xF0\x2D\x24\x7E\x8B\x4F\xA4\x4E\x59\xAC"
"\x02\x0D\x5B\xAC\xFF\xA6\x10\x21\x3E\x0F\xA1\x00\x80\x71\xAE\x80\x0E\x9E\x04\xDC\xAA\x10"
"\xD2\x50\xC5\x16\x7E\xEE\x5B\x4E\x4F\xAC\x7A\xE7\x50\xCE\x0F\x4B\xCC\x40\x59\x12\x31\x5A"
"\x0A\x24\x0C\x91\x6A\xDA\x20\x2F\x94\x0A\xCA\xF4\x3E\x50\x10\xC3\xC3\x3C\x14\x0F\x21\xEC"
"\x4A\x20\x66\xF0\x97\xB8\x2F\xFC\x06\xAC\x07\x37\x8D\xC0\x78\x2C\x11\x09\xA2\xE4\xBA\x6F"
"\x03\x63\xA8\x03\x67\x04\x54\xA8\x31\x1A\xAD\x31\xF7\x96\x31\x01\x05\x09\x40\x6E\x90\xCD"
"\x18\x50\x19\x0B\x65\x18\x0B\x02\xD4\x08\x85\x0D\x6F\xAE\x35\x2C\x88\x7E\x9A\x45\x0E\x1E"
"\xF1\x0E\x39\xB1\x13\x0F\xC2\xC4\x9E\xF0\x99\x5A\x31\x21\x3E\x51\x9E\x00\x64\xA2\xB4\x10"
"\xE9\xC0\x0F\x57\xA6\xC5\x38\xD0\xAF\xD1\xC0\xD0\xEA\x24\xD0\xC7\x42\x69\xE5\x7E\x30\x7B"
"\x38\x4E\x5A\xCE\x6A\x85\xD2\x4E\x6E\xC2\xF1\x2D\xEE\x71\x1C\xCB\x8D\x41\xAE\x8F\x03\x9F"
"\xD1\x0E\x15\xA2\x0B\xCF\xA3\x20\x3F\xF2\x22\x1D\x6A\x05\x6B\x46\x24\x0D\x6E\xB6\x2E\x6B"
"\x23\xE5\x27\xFA\x38\xA9\x04\x1D\xD2\x05\xF7\x46\x1D\x53\xEE\x78\xBA\x09\x33\x2C\xB1\xB3"
"\xB2\x66\x1E\xE9\xD1\x65\xFE\x2A\xB9\x0E\xB0\xBA\x36\x91\xF4\x9C\x88\xC5\xF2\x71\x88\xE6"
"\x46\x20\x5F\x32\xE0\xBE\xD0\x07\x71\x31\x22\xF7\xB0\x21\xE4\x6C\x7E\xA8\x43\x13\x2F\x42"
"\xE8\x88\x2F\x57\x2C\xCF\x0C\xDC\xC4\x22\x0C\xEB\xA4\xB6\x6F\x6F\x2A\x72\x1D\xF9\x0E\x23"
"\x92\xAB\x5B\xA0\x71\x20\xD0\xF1\x3C\xC6\xD2\x20\xD6\xB2\x19\x33\xE2\x2D\xFF\x90\x19\xAB"
"\xEB\xF8\x90\x64\x48\xBE\x89\x24\x82\x4C\xBC\x30\xD2\x0F\x7D\x87\x26\x19\x22\x9E\xE4\x43"
"\xC4\xEA\xCE\xCF\x00\x2C\x2F\x4F\x65\xF3\x52\xEC\x8A\xA8\x68\xC6\xC8\xCE\xB0\x82\x32\xDC"
"\x1C\x93\x28\xC9\xA3\xFD\xA8\x90\x25\xDD\x72\xAA\x94\x72\xF9\x4C\x88\x08\x25\x11\x14\x21"
"\x90\x8C\xC6\x50\x21\xAF\x4A\x56\x1A\xC4\x2A\xCB\x09\x15\xE9\xC3\x38\xB2\x51\x0E\x61\x06"
"\x25\xEB\x11\x26\x0B\x25\x2D\x15\x22\x69\x5A\x13\x99\x08\x13\x66\x68\x93\x33\x7D\x67\x37"
"\x79\x73\x6F\x7C\x53\x04\x81\xD3\x23\x53\x92\x29\x85\x71\xEC\xDA\x72\x22\x9C\xCA\x60\x12"
"\xE8\x36\xEB\x22\x37\xBB\x05\x30\x9F\xE2\x22\xAB\x72\x36\x89\xD3\x27\xCD\xEE\xAE\x74\xD1"
"\x1B\xE3\x10\xA8\xCE\x63\x1B\x34\xE5\x32\xDD\x8B\xD8\x6A\xAF\xBE\x78\xEE\x1F\x27\xE2\x10"
"\x93\x6D\x20\x3B\x33\xBD\x0E\x12\xED\x00\x20\x21\xF3\x6D\xD7\x9E\x12\x35\x95\x13\xEE\x86"
"\x4E\x59\x24\x83\x35\x31\x13\x24\x1F\xAB\x09\x53\x4B\x3A\x0B\xC2\xCB\xDA\x0E\x3A\xD3\xC5"
"\x37\xBF\xB2\x50\x00\x33\x41\xD3\x11\x23\x18\xB4\xC7\x4C\x12\x22\xE3\x13\x53\x30\x63\x39"
"\x92\x93\x9E\x42\x72\x46\x26\xEB\x42\xD5\xC9\xB1\x04\x34\xC4\x4A\x12\x2A\x35\xD2\x15\x97"
"\xB1\x0C\x46\x33\xD5\x68\x2E\xF5\xB8\xD2\x8D\xB4\x51\x05\x2B\x0D\x3D\xEB\x85\xA9\x36\xC2"
"\xED\x42\xCF\x0B\x09\xD2\x33\x6B\x74\x59\x42\x53\x0C\xB7\x13\x68\xE6\x52\xCD\xEA\xEC\x17"
"\x53\x66\xB6\xCE\xCF\xC8\x84\x81\x42\x6D\x01\x47\x0D\xD2\xB1\x7C\xF3\x2C\xCB\x31\xCC\x5C"
"\xB4\x90\xC8\x24\x73\xE6\xC1\xC8\x5C\x82\x4A\xAD\xB4\x4E\x76\xD2\xB1\xCC\x31\x2B\xB9\xB4"
"\xF2\x0C\x74\xA0\xC2\x12\xA1\xCC\x83\x79\x94\x45\x1B\xFE\x42\x3D\x0C\xC7\x4E\x3C\xEA\x43"
"\x49\x46\x1B\xBC\xE4\xE7\xD2\xA5\x4B\xC1\x8D\x05\xF1\x8B\x43\xBD\xB4\x53\x5A\xC2\x19\x9E"
"\x50\x1B\x74\xAE\x71\x30\x6F\x4D\x84\xE1\x95\x24\x28\x10\x03\xB3\x47\x71\x0A\x51\x67\xCF"
"\x50\x01\xB2\x30\xD7\x73\x29\x25\xD2\xA2\xDE\x73\x12\x27\x54\x51\x0F\xE2\xFD\x16\x95\x52"
"\x73\xA8\x77\xCC\xB3\x92\xEE\x93\x41\x88\x67\x9D\x68\xB2\x56\xAA\xD4\x4B\x10\x29\x19\x1F"
"\x52\x42\x43\xC2\xFA\x20\x15\x01\xCB\x4A\x79\x4A\xB5\x4B\x4E\xD5\xE1\x1E\x82\x54\xB3\xB4"
"\x4A\x66\x15\xFC\xA6\x0F\x56\x6F\x35\x29\x72\x95\x29\x1D\x14\xD6\x40\x2D\x38\xC9\x72\x10"
"\x5D\x13\x34\x49\x14\x3E\x3F\x53\x65\xE8\xB4\x75\xF8\x32\xF6\x94\xB4\x45\x79\xB2\x63\xA0"
"\xE9\x78\x82\xF0\x5A\x4D\x09\x56\xA3\x55\x44\x81\x10\x5B\x83\x50\x5B\xE9\x52\x32\x1F\x15"
"\x2A\x61\xB3\x4E\x6F\x11\x21\x4F\x74\xC8\xE6\x32\x51\x95\xB5\x50\x0B\xF3\x2B\x91\x4F\x64"
"\x14\xEE\xA2\xE4\xF1\x1F\x6B\xE7\xA0\xA2\x34\x55\xBF\x65\x54\xE8\x74\x49\xED\x95\xA7\x38"
"\xD4\x36\x9F\xE5\x5E\xEB\x15\xF4\x08\x16\x4C\x9D\x6C\x58\xAF\x73\x4B\x7F\x91\x60\x9C\xB3"
"\xFB\x8E\xC6\xCE\x9E\xCD\x2C\x09\x73\x70\xD6\x54\x10\xFB\x8F\x36\xE5\xD2\xD3\xD0\x62\x1E"
"\xFB\x35\x47\x63\x52\xE9\xFE\x86\xD0\x98\x6C\x61\x7F\xF0\x5C\xE1\x53\x3E\xD5\xD5\x52\xFD"
"\xD5\x51\x77\x75\x8B\xE0\x15\x6E\x22\x71\x40\xC1\xD5\x30\xD7\x75\x80\xBA\x31\x06\xB3\x33"
"\x24\x72\x6A\x59\x0B\x91\x62\x6F\xB6\x65\x5D\x95\xD9\x14\x55\x60\x6D\xB6\x68\x47\xB4\x25"
"\x27\x51\x61\x51\xC2\x7C\x84\x85\x5B\xF0\xB4\xE1\x76\xD6\x01\x6B\xA6\x5F\x9D\x16\x93\xF8"
"\x28\x6A\x85\x73\x1E\x69\xB3\xA4\xFA\xAF\x35\xBD\x56\xD3\x1E\x96\x5B\xE9\xA5\x0B\x49\xCC"
"\x16\x65\xE6\x29\x2B\x95\x51\x1D\x29\x68\x93\x4F\x48\x23\x82\xE1\x04\x22\xC5\x90\x20\x6D"
"\x9C\x61\xF0\x14\xAD\x5D\x89\x8B\x6D\xA5\x72\x30\x70\x88\x54\xB7\xD5\x22\xA7\x36\xD7\x32"
"\x0B\x61\x3E\xB4\xF6\x74\x94\x66\x51\x75\x3E\x7D\xB0\x43\x69\x75\x17\x1B\x57\x34\x17\x37"
"\x6F\x45\x6F\x02\x52\xAC\x1D\xFF\x61\x13\x1A\xD3\xD4\x66\xF6\x39\x07\xA3\x5C\xEB\xA8\x66"
"\xFD\xE4\x6E\xFA\xB5\x74\xFE\x85\x64\x40\x57\x55\xEE\x91\x52\x36\x76\x37\xC3\x16\x0A\x31"
"\x73\xF9\xE4\x94\xAF\x62\x57\x2D\x1D\x2E\x81\x40\x17\x6D\xB9\x91\x52\x55\xF6\xEA\xDC\x36"
"\x53\x5D\x36\x3D\x07\x17\x3B\x85\x92\x0C\x91\x95\x6A\x7B\xF2\x20\x48\x66\x77\x96\x17\x7D"
"\x86\xB7\x89\x96\x85\x46\x6D\xAD\x73\xCF\x91\x7A\x6B\xF2\x79\x35\x0A\x7B\xB5\x48\x7B\xA5"
"\x36\x5F\x1F\x22\x0F\xE1\xC8\x58\x49\x42\x56\xF4\x87\x6C\x4C\x16\x78\x87\xB6\x21\x39\x56"
"\x11\xDB\x15\x1B\x6B\x77\x4F\x66\x97\x99\x72\x2B\x70\xBA\xC5\x95\xD2\xD4\x22\xE4\x60\xED"
"\xD2\x85\x9C\x36\x22\x7F\x7D\x87\x7F\x21\xD1\x7B\xE7\xE7\x8E\xDC\x15\x59\xD5\xB6\x77\xFB"
"\x96\x65\x7D\x36\x64\x3F\xB5\x64\xEB\x2F\x7D\x15\x82\x63\x76\x07\x70\x31\x0E\x88\xB8\x47"
"\x5E\xA9\xCA\xA0\xA4\xAD\xAA\x58\x35\x0D\xF5\x76\x77\x1D\x78\x28\x83\xB7\xD3\x46\x90\x00"
"\xE1\x36\x05\x23\x37\x79\xBC\x17\x84\xB5\x16\x78\xDC\xE2\x2E\xCD\x00\x6F\x09\x02\x09\x2E"
"\x2F\xC9\xD8\x08\x6C\x68\xF8\xF2\x74\xB8\xE8\xD2\x0D\x87\x77\xF8\x87\x8D\xEE\x7D\x2F\x22"
"\xF8\x88\x64\x73\x5D\x98\xE4\x82\xAF\x2B\x8F\x78\x89\x99\x58\x22\x60\x38\x2F\x9B\x38\x8A"
"\xA5\x78\x8A\xA9\xB8\x8A\xAD\xF8\x8A\xB1\x38\x8B\xB5\x78\x8B\xB9\xB8\x8B\xBD\xF8\x8B\xC1"
"\x38\x8C\xC5\x78\x8C\xC9\xB8\x8C\xCD\xF8\x8C\xD1\x38\x8D\xD5\x78\x8D\xD9\xB8\x8D\xDD\xF8"
"\x8D\xE1\x38\x8E\xE5\x78\x8E\xE9\xB8\x8E\xED\xF8\x8E\xF1\x38\x8F\xF5\x78\x8F\xF9\xB8\x8F"
"\xFD\xF8\x8F\x01\x39\x90\x05\x79\x90\x09\xB9\x90\x0D\xF9\x90\x11\x39\x91\x15\x79\x91\x19"
"\xB9\x91\x1D\xF9\x91\x21\x39\x92\x25\x79\x92\x29\xB9\x92\x2D\xF9\x92\x31\x39\x93\x35\x79"
"\x93\x39\xB9\x93\x3D\xF9\x93\x41\x39\x94\x45\x79\x94\x49\xB9\x94\x4D\xF9\x94\x51\x39\x95"
"\x55\x79\x95\x59\xB9\x95\x5D\xF9\x95\x61\x39\x96\x65\x79\x96\x69\xB9\x96\x6D\xF9\x96\x71"
"\x39\x97\x75\x79\x97\x79\xB9\x97\x7D\xF9\x97\x81\x39\x98\x85\x79\x98\x89\xB9\x98\x8D\xF9"
"\x98\x91\x39\x99\x95\x79\x99\x99\xB9\x99\x9D\xF9\x99\xA1\x39\x9A\xA5\x79\x9A\xA9\xB9\x9A"
"\xAD\xF9\x9A\xB1\x39\x9B\xB5\x79\x9B\xB9\xB9\x9B\xBD\xF9\x9B\xC1\x39\x9C\xC5\x79\x9C\xC9"
"\xB9\x9C\xCD\xF9\x9C\xE1\x38\x28\xAA\xA4\x28\xD0\xB9\x9D\xDD\x39\x25\xE6\x44\x2F\xCE\x17"
"\x22\x00\x21\x29\x9A\x49\x2C\xA8\x34\x70\x27\x42\x0E\xAA\xE4\x7E\x19\x23\x9E\xFD\x82\x2E"
"\x00\xDA\x25\xFC\x99\x97\xCB\xA0\x9F\xA1\xF8\x9D\x29\xD9\x70\x47\x42\x6D\x71\x02\x61\x5A"
"\x98\x2C\x23\xBA\x27\x46\x05\x27\x33\x87\x58\x49\xD9\x5E\x3E\x56\xA1\xFD\xD8\xE3\x40\xE2"
"\x58\x28\x84\x53\x85\x38\x81\x93\x17\x2C\x2A\x7A\x29\x46\x05\xA3\x47\x39\xA5\xE7\x99\xA3"
"\x0B\x79\xBB\xC4\xD1\x7A\x67\x02\xA6\x05\x4A\x57\x27\xE3\xA4\xD7\xF6\x78\x73\x19\x7C\x5D"
"\x1A\x93\xFB\x63\xA2\x97\x95\xF7\xCA\x72\x26\x7E\x5A\x93\x18\xF1\xA6\xF3\x39\xA7\x13\x37"
"\x97\x19\xAB\xA7\x31\x19\x40\xC6\x96\x47\xDD\xD1\xA6\x6B\xE2\xDB\x06\x06\x46\x0F\x03\xA7"
"\x59\xDA\x97\x61\xAC\xA5\x9D\xFA\xA5\xA9\xBA\x90\x20\x07\x10\xC5\x15\x2F\x92\x42\x9F\x65"
"\x16\x58\x73\x44\x87\xD5\xAD\x86\x47\x3A\x94\x9B\xE5\x70\xBF\xDA\x8F\x4B\xE9\x94\x80\xFA"
"\xA0\x6D\x24\x39\xD4\xD9\x25\xCA\xC0\x3B\x0C\x89\x28\xE6\x9A\x27\x9A\xC4\x25\x1C\xA1\x98"
"\x63\x44\x29\x4E\x02\xAF\x03\x1A\x2C\x14\xDB\x16\xFA\x3A\x93\x69\x98\x4E\x88\x47\x10\xC0"
"\x2E\x47\x46\x51\xB2\xBB\xC4\x4C\x06\x6F\x08\x1E\x3B\x23\x90\x80\x0E\x30\xBB\x4B\xE8\xA0"
"\xB2\x03\x3B\x37\xEC\x02\xB4\x9B\x87\xB0\x49\x1B\x38\x10\x66\xA3\x23\x58\x6B\x80\x7A\x24"
"\x22\x45\x7C\x7F\x73\xA8\x27\x73\x84\x9D\x2E\x84\xC3\x75\xA9\x9F\xCC\x6F\xBD\x3A\x21\x78"
"\x09\x66\x00\xB8\x60\x23\x55\x71\xF9\x36\x22\xF8\x4F\x65\xF8\xF4\x67\x25\x62\xA7\x6A\x46"
"\x1B\x3A\x9B\xB8\x79\xBB\xB6\xA3\x92\x71\x4F\x6E\x2E\x36\xA2\x0C\x96\x7B\x7D\xB9\x2B\xBF"
"\x4A\x11\x19\xEF\x26\x75\x41\xD6\x0B\x89\xF1\x77\x1B\xA2\x47\xF4\xF7\x62\x35\xA2\x0C\x66"
"\xB7\x5B\xC2\xF3\xCA\x64\xBA\x7B\xAB\xFB\xA3\x7B\x47\xBC\xB1\x2B\x73\xA2\x3A\x92\x7E\xD7"
"\xB6\x16\x2E\xBE\x97\xCA\xBC\x87\xF4\x84\x0D\x11\x42\x53\x55\x65\x84\xAA\x80\x8B\xDB\x71"
"\xE7\xBB\x29\x7D\xE7\x42\x9D\x50\x2C\x11\x56\x7B\x49\xA6\x35\x1F\x54\x2D\xB0\x70\x5B\xDA"
"\x9B\x6F\x90\x26\xBC\xD9\xF9\x68\xE5\xC6\xBE\xB7\x56\xAD\x8D\x5B\xB7\x13\x05\xF6\xF2\xEB"
"\x7D\x5F\xCF\xB1\x36\x70\x93\xDA\x30\x85\x43\x46\x81\xBB\x5B\xC4\xB3\x82\x7C\x43\x57\x53"
"\x29\x82\xAE\x5A\x3C\xAC\x81\x96\x98\x68\x87\x30\xF3\x3B\xC4\x29\xB2\x51\x65\x5C\xAA\x17"
"\xBC\x56\x49\xB2\x9E\xAE\xCF\x3F\x1B\xD4\x2B\x3F\xF7\x73\x40\x05\xC4\x2B\x3C\x67\x81\x22"
"\x4C\xB9\xD7\x3D\xF7\xE6\xC0\x13\x85\xCA\xA1\x15\x63\xC9\xBB\x7A\x3F\x78\x7B\x6B\xE6\x61"
"\x37\x76\x62\xE1\xBB\xCA\xF1\x8E\xA0\xB0\x3A\x5C\x5D\xDB\x24\x8A\x31\x8C\x56\x38\xCB\x01"
"\xDC\x68\x0B\x7C\xC8\xF1\xB5\xC9\xF5\xF0\x6E\x68\x93\x07\x73\x9C\xB6\x21\x62\xCC\xA5\x1C"
"\xCC\xF7\xE6\x36\x27\xDC\x4E\x68\x1C\x40\x3D\x54\xBA\xB9\xDB\x2F\x21\xBC\x81\x3F\x1C\xAD"
"\xA9\x3B\xC1\x89\x1C\x82\x7D\x94\x76\x83\xB5\xBB\x40\x97\xC5\x15\x5C\xD2\x1F\x12\xC4\x57"
"\x56\xA7\xB3\xA2\x06\xCA\x60\x01\xC5\x97\xA6\x11\xFD\x6C\x0E\x76\xC3\x09\x25\xB6\x47\x37"
"\xD5\xA1\x77\x26\xA5\xFB\xD7\x10\x58\x84\xF1\x7C\x9E\xB3\x8A\x51\x1C\xBD\xD0\xC7\x3B\x38"
"\xA3\xFC\xCF\x5F\x5B\x6E\x5C\x5B\x62\xCD\x89\xD1\x4F\xD2\xD1\x1B\xB2\x67\xCE\xFC\x45\x29"
"\x9D\x61\x03\x34\xC0\x73\x45\x79\x05\xFC\xCE\x55\xBD\xBC\x71\x9B\x2B\xCE\xC8\x18\x5F\x31"
"\x83\x21\x3D\x17\x5D\x9C\xE2\xC0\x72\x24\x7A\x68\xB7\x97\x87\x13\x74\x98\x0E\x7E\x95\xCF"
"\x0F\xF5\x71\x95\xBA\x0F\x85\x97\x41\x04\x41\x87\x1D\xA1\xBD\xA1\xCA\x8E\x64\xB1\xE8\x04"
"\x41\xC4\x16\xD4\xCE\xB9\x35\xD4\x98\x9C\x49\xE7\x59\xC9\xDF\x9C\xC1\x17\x1D\xCE\xC3\x9B"
"\xD8\xF3\x74\xC8\x43\x50\xD6\x95\x3B\x76\x6B\xE5\x14\x8C\x98\x20\x6A\xA0\x85\x92\x53\x1A"
"\xB5\xBD\xA4\x33\x82\x4C\x6C\xE1\x46\x08\x4F\x28\x08\xFB\x30\xAA\x3D\x47\x55\x9A\xAC\xF9"
"\x9C\x5E\x03\x58\x41\xF5\x9B\xE4\x23\xB4\x78\x49\xF8\xDF\x05\x10\xDD\x63\x5D\x52\xB9\xD7"
"\x7C\xA0\xEA\x0D\x85\x56\xDD\xD3\x7A\x6E\x24\x38\xEF\xE0\x96\x82\xC5\xED\x32\xA2\xBB\x24"
"\xF4\x9C\x20\x4C\xD4\xBF\x39\x72\xDB\x4F\x90\x7A\x8F\x5D\x85\x79\x1E\xD8\xAA\x1C\x85\xCD"
"\xBD\x6D\x9F\xF7\xE8\x15\xC3\x8A\xB0\xA8\x31\x3A\x1E\xC8\x55\xDD\x7D\xAB\xF1\xD9\xDB\x47"
"\x4C\x43\xA2\x02\x71\xF0\xB8\x81\xBC\xCB\x5D\x5E\xC7\x23\x9D\xE6\x01\xDE\xB6\xA9\x72\xDD"
"\x6D\xBC\xEC\x99\xBB\x82\x69\xCD\xB7\x71\xFE\xCB\xED\x73\xD2\xC1\x3E\x23\xE9\x3C\xDD\xA9"
"\x75\xCA\x4B\x58\xB6\xE3\x71\xE2\x35\x5D\x70\x55\x1E\xD5\xA7\x3D\xB7\xCD\x5E\xEF\x7D\xF0"
"\xE0\x7D\x2B\x08\xF5\xA7\xAE\x5B\x89\xD8\xED\xE2\x96\x58\x29\xBD\xAB\xE2\x9E\x33\xA2\x06"
"\xE6\xE0\x20\xA4\x20\x9B\x08\x77\x10\xB1\xD2\x23\x30\xDD\xEF\xA7\x7B\x53\xC1\xEA\xB7\x15"
"\x62\xAC\xE2\x1E\xEC\x13\xEF\xD5\xE3\xA7\xE5\xBF\x57\x48\x31\x17\xC6\x09\x5F\xDF\x47\xBC"
"\xE9\x3B\x9D\xC9\x0C\x6C\xED\xD5\x7E\xF0\xE7\x3E\x7C\xEB\x3E\xD3\x1E\x77\xE4\x90\xAB\xEF"
"\x31\x06\xD9\xA0\x9E\xA4\x8B\xDC\xF7\x5D\x76\x9B\x84\xE1\x5B\x61\xDF\x20\x5C\xAD\xF8\x4D"
"\x38\x72\x51\xED\xAB\xE6\x74\xA4\xC7\x42\x5B\x20\x88\xD3\xBD\xBC\x0F\x51\x28\xB6\x82\x56"
"\xF9\xD2\x8F\x2C\x84\x7A\xF0\xB9\x7C\xFC\x6D\x9B\x34\x8F\x3F\xF5\x11\xDC\x75\x66\xBF\xF0"
"\x5B\xBF\x7D\xFF\xD3\xBA\xCF\x1F\xEF\x5B\xD8\x49\x5D\xDB\xA1\x17\x38\xDE\xD3\x75\xE6\xAD"
"\x76\x72\xE5\x3B\xDB\x01\x00\x0C\x28\x30\xE0\x04\x67\xFF\x0E\x22\x34\x27\x62\x20\xC3\x86"
"\x0E\x1F\x42\x2C\x88\x30\xE1\x42\x80\x22\xCC\x4D\x3C\xE8\x6C\x02\xC4\x8E\x01\xBD\x64\x3C"
"\xC8\xC8\x23\xC9\x92\x01\x19\x85\xF4\x42\xF0\x54\xC8\x96\x13\x47\x9A\x74\x28\x31\xA3\xC2"
"\x80\x17\x43\x6E\x8C\xF9\x10\x65\xCA\x86\x20\x43\xC2\xD4\xE9\xF0\xA6\xCB\xA2\x41\x85\xFA"
"\x9C\x87\x50\xA5\x40\x9E\xFF\x6A\x22\xF5\x38\xEB\x25\x41\x83\x13\x73\x46\x2D\x39\x44\x69"
"\x46\xAC\x55\x43\xCE\x1B\x92\x35\xA2\xD5\x89\xE6\x88\x60\xEC\xCA\x71\x6C\xC7\x99\x66\xD1"
"\xE2\x5C\xCB\x16\xE0\xCF\x8C\x47\x1B\x12\x9D\x38\x8B\xAD\x53\x84\x61\x21\x6E\x05\x3A\x17"
"\x40\xDF\xA5\x0C\x03\x17\xFD\x77\x37\x66\xDD\x89\x4C\x1F\x22\xA6\x3A\x38\x60\xE4\xC4\x50"
"\x27\xD3\x6D\xF9\xB8\x61\xE1\x83\x9B\x75\xE6\x45\xB8\x38\xE0\xD4\x8C\x7B\x27\x77\xFE\xFB"
"\xB0\xF4\x44\xD5\x42\xDD\x52\xC4\x8C\xB4\xB1\xE8\x93\x9A\x07\xD3\x16\x29\xBB\x64\x67\xA6"
"\x13\x58\x27\xB6\x8B\xBB\x65\xD0\xCE\xFF\x3E\x67\xAD\x7C\xF0\xF4\x40\xE0\x07\x5D\xCF\x0D"
"\x1D\x3C\xF6\x60\x39\x19\x55\x4F\x60\x39\x51\x5B\xC5\xDD\xC0\x83\xE6\x46\xBE\x1B\x00\xEC"
"\xE7\x62\x05\x2A\xFF\xE7\x55\x76\xFA\xBD\xCE\xFF\x41\x1F\xDF\x1E\xC0\xFB\xF8\x63\x73\x2B"
"\xEE\x28\xFD\x1F\xF3\xA8\xA9\xCF\x3B\x94\xDE\x68\x42\x19\xF7\x59\x65\xDB\x10\x97\x15\x7E"
"\xE2\xA1\xC7\x95\x64\xB2\x19\x27\xD8\x78\x0B\x42\x54\xE0\x58\x9D\xAD\xF7\x95\x69\x98\xFD"
"\x07\x51\x7D\x00\xEA\x54\xDE\x53\x48\xE8\x50\xA2\x89\x27\xEA\x20\xD7\x78\xE4\x95\x15\xDB"
"\x7E\x19\x46\x85\xDF\x80\x2B\xDA\x96\x11\x53\xF8\x4D\x37\x63\x4C\x22\xD6\xF4\xA2\x8A\x6C"
"\xBD\x77\x99\x45\x69\x5D\xF5\xE3\x58\xFB\x4D\x77\x1C\x6A\x21\xD5\x24\x22\x8C\x73\x7D\x37"
"\xE4\x86\x34\x0E\x64\xDC\x5D\x16\xAE\xF8\x9E\x92\x32\x52\x49\xDF\x6D\x5C\x4E\x06\xE6\x43"
"\xFB\xF5\x87\x54\x87\x90\x39\x58\xDB\x5C\x58\x02\x54\x03\x91\x8A\x89\x29\x14\x85\x80\xA5"
"\xA9\xDB\x6E\x22\xAA\xB5\xE2\x9C\x0E\x9D\x19\x95\x08\xDA\x80\x25\x8C\x2D\x83\x12\x2A\x4C"
"\x9D\xFF\x9C\x33\x68\x2A\x35\x44\x95\x9E\x4B\x9F\x7D\x18\x15\x9E\xD3\x95\x39\x61\x82\x6C"
"\xB2\x15\x67\x97\x4D\xF5\x34\x69\x70\x3A\x32\x76\xE9\x6D\x98\xED\x99\x59\x4F\x98\xDD\xB4"
"\xCD\x36\xCE\x0C\x2A\x88\x19\xAF\x9A\xD1\xA2\x9A\x83\xBD\x97\x13\x99\xE3\x45\x49\xD8\x75"
"\x20\x76\xE9\xA3\x4D\x6F\x1E\x24\x24\xAA\xC0\x3E\xB5\xD0\x7E\xC2\x0E\xCB\xA4\xB1\xC4\x22"
"\x1B\x63\x82\x10\xDD\x7A\x21\x58\xBC\x0E\x24\xE0\x60\x6C\x86\x76\x0A\x00\x9A\x86\x7A\x2A"
"\x9A\x12\xEE\xE6\xA8\x79\x34\x96\x3A\x10\x8F\xDD\x49\x2A\x6B\x92\xD3\x36\x7A\xE8\xA3\xCD"
"\xB1\x8B\x94\xA7\x89\x55\x7A\xA7\xBA\xE6\x5C\x41\x6C\xBD\xCE\x82\xBB\x29\xA7\x36\x02\x80"
"\xA4\xA0\x84\xAA\x0B\x2A\x49\x13\x5C\x41\x07\xA0\x34\xE5\x1B\x92\x36\x74\x5C\x61\x64\xBA"
"\x71\x09\x14\x24\xBA\xFE\x06\x4C\xAC\xC1\x26\x39\xC9\x91\xB5\xB2\x45\x29\x1D\x23\x13\xC0"
"\x5A\xF2\xAB\x8C\x82\x1C\xEF\xB6\x2D\xED\x3B\x17\x7E\xCC\x69\xC9\xA0\xCB\x2C\x93\x36\xEA"
"\xCC\xFD\xE2\xA5\x2F\x5F\x2A\x37\xF4\xF1\xCE\xA7\xC2\x76\x1A\xB7\x26\x95\x7B\xD8\xA1\x1B"
"\x9B\x69\xD4\x78\x13\xA4\x62\x8B\xBA\xFF\x6C\x62\x32\xAC\x8E\x2C\x3C\xE5\x5C\x80\xB8\xBB"
"\x2E\x7C\xD4\x6A\x95\xB5\xB7\x00\x45\x2A\xEF\xD3\x94\xFA\x8B\x1F\x82\xBB\x92\xFA\x2C\xC6"
"\x35\x3A\x06\x40\x7A\x9F\xE5\x86\x34\xB4\xC4\x22\x74\x76\x4B\xCD\xFA\xA7\xB2\x88\x2D\x53"
"\xB9\x9F\xDC\x24\x45\xFB\xB6\x6C\x48\x94\xCC\xA8\x73\x0A\x89\xFB\x0F\x77\x69\x87\x04\xB3"
"\xCD\xDE\xA9\xFC\x32\x8D\x61\xAF\xDC\x78\x98\x6A\x0F\xA5\xB3\xB4\x68\x7F\x2B\xDC\x9A\xB7"
"\xC1\x86\xD5\xD0\x25\x15\x5D\xED\xD1\x93\x2B\xBD\x1B\x92\x5A\x03\xCC\xD6\x10\x55\xB3\xCE"
"\xB9\x50\x89\xB7\x5E\xB3\xEC\x21\x8E\x1D\x1C\xDF\x93\xCD\x8B\xD0\xEE\x3A\x8D\xDE\x65\x6F"
"\x6E\xD7\x19\x5F\xDC\xD1\xD1\x3D\x1D\xDE\x48\xF9\x4D\xD9\xA1\x32\xB3\x65\x82\xD4\xB0\xD2"
"\x71\x3A\x7B\xD6\xE7\x36\x0F\xF4\xAE\xD7\x39\x12\xED\x4F\x32\xCF\xEC\xB2\x14\xCB\x77\xA8"
"\x57\xC7\x5E\x3C\x58\x7A\xE7\x8B\x3F\x1C\xCE\x0C\x45\x9B\x55\x9F\x3D\x5B\xFF\x33\xC0\xC0"
"\x79\x15\xBC\x47\xA5\x37\xF8\xBE\xFB\x2E\xD9\x87\x7B\xB1\x2B\xCA\xEF\x3C\x42\x3B\xAD\x05"
"\x90\x24\x07\x34\x4C\xC5\x78\xB6\xA3\xDC\xD1\x0B\x63\x07\x4C\x20\xBF\x3C\xB7\x36\x80\x0C"
"\xAF\x3D\x26\xBA\x42\x2D\xEA\x97\x95\xD5\x05\x67\x79\x48\xA9\xD5\x5A\x3A\x23\xC2\xA8\xC8"
"\xC1\x6B\xA9\x93\xCD\x9C\xE6\x87\x99\xF2\xE4\xE4\x80\xDB\x8B\x89\x85\xF4\xB7\x39\x0B\x82"
"\x0D\x73\x4B\xC2\x99\x96\xFE\xF6\x10\x1B\xC6\x2F\x6F\xB7\x33\x9A\xFF\x08\xA4\x19\xE0\x2C"
"\xEE\x23\x3A\xEC\x56\xED\x02\xE4\xC1\xC9\x80\x50\x23\x12\x4B\x8E\x0A\xB5\x76\x8A\x29\x9A"
"\x24\x8A\xAC\xA3\x60\x47\x86\xE0\x8C\x6D\xB8\xEB\x1C\xAA\x52\x15\xA4\x1C\xC8\xB1\xA7\x89"
"\x71\x8C\x6A\x1C\xA3\xB6\x30\xA6\x25\xBD\xEC\xC6\x86\x2B\x1A\x9E\x16\x5D\xE2\xC3\x9C\x0D"
"\xB0\x58\xD7\xEB\x54\xC1\xC6\xA3\x9D\x01\xDE\x91\x24\xD6\xE1\x9C\xC5\x2C\xD5\x3A\x92\x99"
"\xCC\x11\x69\x0A\xA4\x13\x2D\x47\x39\xD9\x88\xC8\x78\x2D\x01\xDF\xC4\x86\x88\x1F\x4A\x12"
"\x6D\x89\x03\x09\x62\xD2\x86\x68\xBA\x22\xEA\xC4\x38\x76\xD3\xA3\x40\xE4\xF8\xC3\xC7\xD1"
"\x0F\x94\xF2\x4B\x12\x23\x1D\x82\x23\xAD\x6D\xC3\x11\x26\xB8\x56\x4B\x1E\x36\xBD\xEA\xE1"
"\x04\x56\x58\xE4\x8D\x19\x1B\xE8\xC9\x92\x9C\xEB\x82\x5D\xF4\x1A\x17\x67\xA3\xC9\x4D\x0D"
"\xAF\x77\x76\x1C\x8C\x09\x4C\x64\x05\x62\x5A\xC1\x44\xB3\x84\xA4\xBA\xF6\xA2\x9C\x62\xCA"
"\x29\x8F\x76\xF2\x23\x93\x18\xF5\x27\xF2\x41\x11\x58\x98\xCC\xD5\x60\x78\x04\x97\x3C\x95"
"\x4F\x9B\x5B\xDB\xA3\x36\xB1\xB9\xBF\x63\xFE\xCA\x72\x37\xF4\x0B\xD7\x9C\xA7\x4A\x93\x44"
"\x88\x9E\x0C\x31\xA5\x2B\x51\x49\x44\x1C\xAA\xAF\x8A\xE3\x8A\xA3\x3F\xA9\xD4\xB1\xCC\xC9"
"\x93\x96\xBF\xB4\x5D\x6B\xEA\xE9\x91\x60\x0A\xD3\x43\x04\x34\x24\x40\x31\x36\xBC\xCA\xC5"
"\xAE\x95\x02\x69\xA6\x89\x82\x41\xC0\x13\x4D\x93\x85\xCA\xC2\xD0\x2E\x5F\x03\xC1\x4F\xAD"
"\xE8\x63\x2E\xFC\x5C\x43\x23\xE2\x51\x06\x5E\x2E\x24\xB6\x28\x28\xAD\xD4\xB9\xCD\x9A\xDA"
"\x54\xA3\xA6\xAA\xE8\x26\x35\xB7\xCA\x85\x02\xC4\x67\xF3\xEC\x25\x3F\x7D\x42\x53\x7B\xF2"
"\x34\x2B\xCA\x44\x08\x26\x75\xD2\xCC\x41\x66\x44\x0E\x28\x42\x51\x49\x41\xE3\x53\xF8\x5D"
"\xD5\x7E\xFA\x5C\x4D\x2F\x0F\x76\xAF\xF4\x45\xB4\x7F\x5D\xBD\x0F\x3C\xA9\x74\x51\x2F\x15"
"\x65\x1E\x9C\x80\x5D\x7E\xD8\x52\xC7\xBB\x81\xF5\x48\xC4\x92\xC3\x7B\x74\xFA\xCF\x3C\xDA"
"\xF5\xAE\x6A\xE2\xDF\x07\x81\xC5\xB7\x1A\xC0\xEE\x84\x56\x4D\x92\x60\xC3\x67\x53\x52\x22"
"\xEF\xB0\x85\x85\x08\x10\xB3\x6A\x44\xA0\x12\xEF\x9E\xBC\x04\x20\x83\x8A\xBA\xCF\xA3\x06"
"\xF5\x89\x5A\x65\xAA\x09\x9E\x96\xD7\x8C\x69\xF3\xB3\x99\x4D\x28\x56\x49\xBB\xD9\x75\xCA"
"\xE4\xAB\x95\x34\x4B\x5C\xC3\x9A\x43\xD3\xC6\x34\xA9\xC2\xF3\x56\x76\x5C\x72\x8A\x59\x3A"
"\xC7\xAE\x6F\x55\xD6\x78\x3A\x73\x8E\xE2\x39\xB4\x5D\x8D\xFB\x51\xF3\x64\x13\x38\xCD\x42"
"\x09\xA8\x58\x93\x6D\x56\xDE\x68\x35\x82\x1E\x56\x49\xFF\xB3\xE9\x0C\x87\x79\x4F\x4E\x3E"
"\xB6\xA5\xA7\x94\x2C\x49\xF2\x29\x33\xCB\x0E\xC4\x86\x42\x15\x20\xDA\xF0\xE3\x4E\x03\x0A"
"\x74\x99\x98\x99\x0F\x42\x9F\x7B\x5A\x0A\xA6\x67\xB1\x0C\x81\xA8\x6B\x8D\xFA\xB5\xF5\x22"
"\x17\x99\xF7\x35\x81\x23\x08\x95\x0A\x24\x08\x64\x02\x54\x4D\xEC\x00\xE5\x6B\x92\x05\x36"
"\x75\x76\xCF\x2B\x2D\x73\x4D\x4A\xB1\xF1\x06\x34\xA9\x35\xE8\x23\x45\xD3\x1A\x5C\xA5\x9E"
"\x74\x5D\x05\x7C\x68\x86\x93\xB4\xE1\xCE\xB1\xB6\x42\x34\x1B\xEA\x72\x24\xCA\x5D\x8F\x44"
"\x48\x47\x31\x53\xD0\x24\x77\xD9\x43\xDE\x3D\xCD\x71\xE0\xA4\x62\x68\xD9\x59\xA4\xF6\xC2"
"\x71\x87\xDA\x35\x57\x0A\x47\x2C\x36\xDE\xD6\xD7\xBE\x4D\xC4\xEF\x8C\x1F\xA2\x83\x90\x66"
"\xAA\xC8\x11\xDD\x2D\x4D\x5A\x3B\x16\xE7\xC2\x94\xC8\x43\x06\xC0\x33\x4F\x5C\x92\x42\x62"
"\x77\x2E\xE5\x69\x56\x8F\xB7\x83\xB2\xA5\x9D\x34\xC1\x48\x49\xCF\x3C\x06\x46\xA8\x33\x0B"
"\xA3\x25\xE7\xA5\x53\xA0\xCE\xEC\xE6\x34\x8F\x15\x70\x74\x2B\xB3\x9B\x09\xC5\xD6\x59\x55"
"\x30\x23\x89\xAA\xB3\x2D\xCE\xF1\xAE\x9B\x85\x64\xCF\x7C\x76\xD7\x9A\xF5\xEA\x17\x3E\x0F"
"\xCA\xCF\x98\xA5\x21\x5C\xE3\x69\xE5\xED\xE2\xD5\xB8\x73\xAE\xB3\x30\xB6\xA1\x68\xF7\x92"
"\x38\xD2\xAB\xCD\x63\xA1\xF3\x1C\x65\x29\xEB\xD9\xCD\x5F\x54\x55\x9A\xC4\x8C\x5E\x9C\x90"
"\x08\x45\x84\x83\x55\xD3\x6C\x51\xE9\x36\xF2\xEE\x0A\x26\xDB\x44\x4B\xA2\x56\xB2\x88\xE9"
"\x29\x84\x4E\x16\xEE\x75\x06\xE6\x8C\x4B\x3F\xBA\x23\x1D\x3A\x28\x74\x1F\xB4\x92\x90\x5C"
"\x71\xB6\x89\x11\x6D\x95\x5A\xFC\x10\x3C\xD9\xD5\x38\x94\x84\xF6\x58\x96\x9A\xA4\xEA\xB2"
"\xF9\xB0\x9D\x6E\x64\x74\x0D\xDC\xD3\xE8\xA2\x96\xBC\x43\x36\xEF\x85\x49\x52\x22\xA8\x4E"
"\x44\xAA\x53\x35\x51\x55\x1F\x18\xDD\x0F\xA3\xB8\xDB\xBB\x26\x8B\x4D\xB7\x9D\xCD\xFB\xC2"
"\xD8\xA6\xA6\x6E\x4B\x87\x75\xB7\x29\xBE\xDA\x2B\x82\xE9\xAC\xB1\x42\xB5\x5B\x48\xD5\x89"
"\xD3\x48\xEF\xA9\x85\xC9\xBE\x0C\xEA\x38\x63\xB8\xAC\xBA\x52\xB2\xBB\xEF\x29\xED\x76\xEF"
"\x04\xDC\xFB\x4E\xED\xBB\xA1\x78\xE7\x3C\xC2\x9B\x33\x1A\xC7\x38\xBD\x61\x8B\x56\x74\x26"
"\x19\xDF\xCA\xB6\x69\xC8\x45\x7C\x58\x6C\x73\x5C\x9D\xF6\x06\xDE\xA2\x7F\xAA\xCD\x8D\x33"
"\xB6\xE3\x5D\x02\x78\xB1\x6B\xFE\x63\x82\xB3\xB4\x6D\x2C\x82\xAC\xCD\x3F\xFD\xDA\x65\x83"
"\x79\xA2\xB9\x06\x32\x88\xB7\xEA\xE9\x60\xED\x9A\xCC\xE5\x2E\x39\x75\x23\x2C\xF3\xA9\x73"
"\x18\xDC\x33\x77\x74\xD5\x83\x1E\x62\x43\xDF\x94\xC5\x2A\xEF\x5B\xF2\xB4\xD6\xF2\x8C\xE7"
"\x94\x2D\xD6\x06\x20\xD6\xC9\x3A\x76\x02\xE7\x11\xE7\x2E\x57\xE7\xD9\x99\x28\x74\x8C\xAD"
"\xCE\xDB\x99\x04\xBA\xD7\x8F\xF2\x1B\xA7\x4B\x1A\xE5\xBE\x44\x7A\x85\xA7\x3C\x19\x2D\x15"
"\x10\xF1\x4F\xF6\xB1\x89\x31\xAD\x13\x37\xA5\x7D\x32\xE8\x8E\x9D\xF6\x38\x14\xDD\xCA\xCF"
"\x65\x81\x84\x17\xF7\xDD\x19\x62\x9C\xAD\x2B\xF1\xED\x34\xD2\xBC\xD2\x0B\x3E\xC0\x79\xC8"
"\x41\xCB\xFD\x66\x7B\xD9\x7C\xCE\xEB\x01\xCA\x7D\xEE\x20\xFF\xB7\xEB\x75\xDC\x60\xB6\xFC"
"\x11\x80\x72\x98\x7C\x5B\x25\xAF\x94\x7A\x69\x07\xE6\x3A\x71\x4E\x02\xA1\x1C\xF6\x70\x36"
"\x7A\x3C\x48\xAA\x2E\x7E\xF4\x2E\x25\xD1\x87\xBE\xC9\x6A\x3F\x45\x7A\x33\xA2\x8D\x32\xEC"
"\x66\xC2\x03\xAC\x85\xC3\xAB\xA3\x38\x38\xC7\x8E\xFB\x98\x31\x41\xEE\xB5\xE6\x8C\xEE\x6F"
"\x9A\xA9\x58\xC4\x53\xEC\x4B\x59\xFB\x17\x96\x7F\x3A\xF3\x50\x95\x2D\x00\x61\xF9\xD8\x9D"
"\xA3\x16\xD8\x2F\xE7\xEA\xD5\xDC\x76\xB1\x1B\x1E\x66\xD4\x40\x2D\x70\xDA\xFF\x91\x84\xF6"
"\xB1\x8E\xAA\x08\x83\xFD\xED\xDC\xFB\x01\xDA\x8E\xD1\xC8\x72\x39\x4C\x19\x78\x4C\xF7\x84"
"\xCB\x26\x4C\x11\x23\x30\x5B\x56\xAC\xDA\xF4\xC0\x0A\xFA\x05\x59\x08\x8A\x60\x44\x99\x80"
"\xAC\x79\xA0\xC9\x00\x58\x97\xE8\xC0\x09\x9A\x8C\x0E\x50\x09\x11\x54\xC4\x0A\xB2\x60\xC9"
"\xB8\x20\x8D\x48\xCF\x0C\xC2\x4A\x0D\x8E\xE0\x0E\x62\xCC\x0D\x4A\x4D\xAA\xA5\x08\x0F\x0A"
"\xE1\x10\x62\x8C\x0C\xA2\x60\x89\x84\x14\x4F\xCC\x03\x05\xAE\x88\x11\xB6\x20\x12\x12\xE1"
"\xDA\x5C\x12\xC9\x8D\x45\x07\x9A\x81\x0E\x46\x61\x16\x6A\xE1\x16\x72\x61\x17\x7A\xE1\x17"
"\x82\x61\x18\x8A\xE1\x18\x92\xA1\x08\x16\x06\xEA\x95\xA1\x17\x0A\x98\x89\x28\x92\xC4\xA5"
"\xE1\x1B\xC2\x61\x1C\xCA\xE1\x1C\xD2\x61\x1D\xDA\xE1\x1D\xE2\xA1\x17\x62\x4A\x1E\xBA\x56"
"\x3E\x51\x07\x1F\x02\x62\x20\x0A\xE2\x20\x12\x62\x21\x1A\xE2\x21\x22\x22\x66\x94\x81\x9D"
"\xA9\x5F\x22\xEA\x17\x4A\x39\x62\x24\x4A\xE2\x24\x52\x62\x25\x5A\xE2\x25\x62\x62\x72\x21"
"\x56\x26\x66\xDA\x8D\x71\xE2\x27\x82\x62\x28\x8A\xE2\x28\x92\x62\x29\x62\xCC\x1A\x96\x08"
"\x12\xA4\x45\xFB\x89\xA2\x1F\x3A\x9F\x29\xC2\x62\x2C\xCA\xE2\x2C\xD2\x62\x2D\xCA\x61\x84"
"\xD4\xDD\x28\xE6\x53\x2D\x50\xA1\x2D\xFA\xE2\x2F\x02\x63\x30\x0A\xE3\x30\xDE\x9F\xF5\xCD"
"\x1B\x2D\xD6\x80\x19\x34\x4D\xA5\x6D\x83\x30\xC8\x12\x31\x42\x63\x34\x4A\xE3\x34\x52\x63"
"\x34\x2E\xE2\x99\xA5\xC2\x15\x54\xE3\x36\x72\x63\x37\x7A\xE3\x37\x82\x63\x38\x8A\xE3\x38"
"\x92\x63\x39\x9A\xE3\x39\xA2\x63\x3A\xAA\xE3\x3A\xB2\x63\x3B\xBA\xE3\x3B\xC2\x63\x3C\xCA"
"\xE3\x3C\xD2\x63\x3D\xDA\xE3\x3D\xE2\x63\x3E\xEA\xE3\x3E\xF2\x63\x3F\xFA\xE3\x3F\x02\x64"
"\x40\x0A\xE4\x40\x12\x64\x41\x1A\xE4\x41\x22\x64\x42\x2A\xE4\x42\x32\x64\x43\x3A\xE4\x43"
"\x42\x64\x44\x4A\xE4\x44\x52\x64\x45\x5A\xE4\x45\x62\x64\x46\x6A\xE4\x46\x72\x64\x47\x7A"
"\xE4\x47\x82\x64\x48\x8A\xE4\x48\x92\x64\x49\x9A\xE4\x49\xA2\x64\x4A\xAA\xE4\x4A\xB2\x64"
"\x4B\xBA\xE4\x4B\xC2\x64\x4C\xCA\xE4\x4C\xD2\x64\x4D\xDA\xE4\x4D\xE2\x64\x4E\xEA\xE4\x4E"
"\xF2\x64\x4F\xFA\xE4\x4F\x02\x65\x50\x0A\xE5\x50\x12\x65\x51\x1A\xE5\x51\x22\x65\x52\x2A"
"\xE5\x52\x32\x65\x53\x3A\xE5\x53\x42\x65\x54\x4A\xE5\x54\x52\x65\x55\x5A\x25\x4C\x02\x42"
"\x9D\xA5\x1E\x95\xF4\xD7\x99\x6D\xE5\x55\x82\x65\x58\x12\x44\x57\x9E\x19\xF6\x31\x4D\x9D"
"\x19\xA0\x40\x2A\x07\x2B\x0A\x1B\xC4\x4D\xE3\x04\x90\x25\xA1\x98\x65\x5C\x0E\xCA\xFE\x89"
"\xA5\x4E\x48\x81\x9B\x61\xE0\x08\x0E\x41\x9D\xED\xE5\x78\x74\x59\xB2\x01\x04\xC2\xF8\xA4"
"\x88\x8C\xC4\x7E\x08\x1F\x41\x9E\x61\x5A\x2A\x90\xBB\xB0\x65\x2D\x1A\xE6\xD0\xDD\xDE\x5D"
"\x7E\x9B\xE3\x45\x54\x79\x80\x1E\x9F\x5C\x47\xEA\xFD\x9D\xF8\xED\x64\x64\x22\x26\x45\x96"
"\x47\x2E\x3E\x5B\xEE\x6C\x60\x29\x46\x66\x64\x52\xA6\x49\xBC\x51\x62\xA6\x94\x05\xDA\x58"
"\xE9\xE5\x24\x68\x12\x8B\x6B\x0E\x64\x65\xBC\x22\xDA\x3D\x07\xF8\x79\x46\x38\xA6\x26\x85"
"\xAD\xE6\x3B\xB9\x44\x6E\x16\xA3\x14\xA5\xCC\x74\xD8\x66\x4A\xD2\x26\xF4\x2D\x64\x61\x24"
"\x67\x3F\xB5\x0D\x70\x10\xE7\x2C\xFE\x66\xB0\x85\x65\x65\x38\xC3\x9B\x90\x66\xBE\x75\x9E"
"\x5B\x95\x5D\x23\x7E\x66\x1F\x85\x66\x45\x06\x4D\xB2\xA8\x49\x79\x7E\x63\x75\x4E\x26\x65"
"\x86\xCE\x04\x54\xC6\x69\x2A\x58\x8E\x4D\x46\x19\x00\x0A\x67\x96\x5F\x66\x9E\xA4\x09\x16"
"\x0E\x79\xE8\x27\xAC\x20\xD9\x44\x0E\x81\x1A\x39\xC3\x31\x92\xC4\x35\x0E\x8A\x23\x08\x84"
"\x08\xB4\xDA\xA0\x30\xA6\x2D\xF6\xE7\xC9\x00\xC4\x83\x9A\x01\x08\x06\xE7\xBF\x40\xDD\x4E"
"\x85\x5B\x90\xF5\xC5\x74\x9A\x8B\x19\x08\x04\x60\x69\x04\x85\x12\x64\x0D\x2C\xA8\xA2\x30"
"\x0A\x89\xBA\x59\x2A\xF4\x22\x1D\x4E\xC0\x26\xD4\x19\x03\x56\x28\x2C\x66\xA5\x9B\x31\xE0"
"\x8C\x96\xE5\x4D\xA2\x28\xA1\x38\x9C\x1C\x9C\x99\x23\xAC\xE8\x9D\x30\x23\x19\x8D\xA3\x81"
"\xFA\x97\x88\x86\xE1\x35\x89\x85\x72\x70\x68\x19\x22\x29\x8B\x26\x4C\x89\xF2\x59\x2A\x40"
"\xCC\x8F\xB6\x45\xC2\x20\x1A\x36\x9A\x41\x0A\xDE\x89\x95\x5E\xA9\xA2\x64\x69\x44\xBE\xC7"
"\x69\xD4\x15\x40\xF6\x65\x9D\xD9\x65\x39\x22\x0C\x1D\x74\xA9\x97\x6A\xA9\x23\xEE\xCD\x1C"
"\x36\xA9\x92\x12\x28\x43\x1C\x1C\x74\x06\xE0\xA6\x8C\x69\xFA\x99\x1F\x13\x4E\x06\x88\x0E"
"\x90\x36\x18\x69\x4C\xD0\x67\x1E\x79\xE6\x5C\x0C\xEA\xF6\x05\xAA\x47\x64\xD9\xE0\xFD\xE1"
"\x0B\xC5\x58\xC0\xA9\xD3\x92\x72\xD5\x94\xE4\x69\x56\x0C\x60\xF5\xA9\x97\x83\x51\x9E\x33"
"\x9C\x29\xEF\x94\x41\xFF\x65\xA8\x31\x59\x67\xB5\xA9\x16\xA4\x75\xE7\x19\x51\x1C\xDB\x00"
"\x1E\x52\x1C\x6A\xF8\x25\x2A\xBF\xC5\x1D\x9F\x86\x95\x9C\xC2\x29\x70\x45\xD6\xD7\x09\x45"
"\x9D\x0A\xD9\xA9\xFA\x8B\x74\xB0\xE2\xDA\xA9\xD9\x73\x5A\xA8\x36\x7D\x65\xD1\x9D\x9E\xB0"
"\x62\x50\xBD\x09\xEB\xA2\x32\x54\xA3\xDA\xDE\xAA\xAA\x9E\x4D\x49\xAA\x43\x84\xE9\xD1\xE1"
"\x99\x50\x48\x60\xE4\x69\x6A\x1E\x69\x43\x83\x36\x44\x97\x51\x9E\xB7\x62\xE8\xB5\x6E\x0A"
"\x7D\xED\xAA\xD1\x01\x93\xBA\x60\xD2\x4A\x31\x9A\xCC\x09\x2B\xB0\x12\x1D\x8D\x9C\x55\x1C"
"\xC6\x69\x9D\xBC\xA2\xAE\x5E\x16\x73\x16\x1E\xE8\xC1\xAB\x03\x82\x5D\xB8\xBA\x9D\xB4\xCE"
"\xE9\xB9\xE6\x51\x6E\x32\xAB\xB5\x5E\x68\xE0\x8D\x2A\xAC\x46\xEA\xC0\xE6\xAA\x3C\x55\xEA"
"\xBD\x45\x17\x23\xF5\xEB\x9D\xDA\x1D\xC0\x06\xAC\xB1\xF9\x8B\xB9\xE6\xAB\xC5\x52\x1D\x78"
"\x6A\x66\xBC\x9A\xAA\x36\xE5\x66\xC5\x42\x6B\xB9\xCA\xCA\x76\x0E\x61\xBD\x4A\xDF\x08\x31"
"\x1D\xC1\x4A\x97\x30\xE5\x96\xDA\x81\xAA\xB3\x35\x17\xB8\xE5\xA2\xC9\xAE\x67\x43\xE8\xAC"
"\xC6\xC6\xC4\xC1\x9E\x9C\xB3\x6A\x62\xCB\x52\x93\xC0\x76\x49\xB5\x06\xED\xF1\xA5\x2B\xB8"
"\xF5\x1E\xEE\x68\x9B\xB8\x4A\x66\x01\xA6\x5C\x1E\xE5\xDF\xAB\x32\x2C\xAE\xC2\x6C\x72\x12"
"\x5B\xC8\x42\x60\xC5\x1D\x56\x2B\xF5\x2C\x7F\x44\x14\x6E\x3A\x2C\x17\x22\x92\xC9\x70\xC4"
"\xD9\xC2\x0A\xAE\xB9\x2C\xD1\x66\xED\x92\xBD\xC9\x74\x86\x6D\x6F\xFA\xC9\x77\x6A\xCD\x2B"
"\x92\x9E\xAE\xBD\x9E\xD1\x1A\x96\x65\x36\x6B\xC2\x4E\x86\xA3\xC0\x67\xCF\x4E\x6B\x43\x58"
"\xE1\xAB\xA4\xE0\xE1\x4E\xE8\xDE\x6A\xAB\xD3\x1E\x16\x5B\xBE\x52\x92\x64\x66\xE4\xAE\x8B"
"\x60\xEA\xA9\x08\xF1\x5C\x69\xA6\x6A\xB2\x8A\x6C\x2A\xC9\x9B\x9E\x62\xEC\xDA\x38\x67\x2D"
"\xE2\x6B\x78\xF9\xAB\xEB\xB8\x19\xD4\x46\x6D\xE3\xD2\xDC\x24\xB9\x8A\xD4\x38\xC2\xD8\x24"
"\x67\x84\x38\xC3\xEB\x26\xD2\xC7\xCD\x1C\xED\xDA\x6E\xC9\x50\x8D\xFF\xD5\xAD\xC9\x31\x2A"
"\xE0\xE2\x94\xE0\x39\x2A\xDF\xC2\xA1\x1F\x66\x14\xE8\x86\x6E\x27\xB5\x13\xD4\x52\xAE\x86"
"\x91\xEA\xCB\x76\x2C\xAF\x7A\xD5\xE6\x4E\x5C\xD7\xE2\x93\x4B\xD4\xEE\xF4\xF4\xAE\x5B\xC6"
"\x5C\xD7\x9D\x62\x5C\x22\xE8\x1D\xA2\x62\x89\x50\x69\x47\x94\xAE\xFB\xE9\xAB\x49\x70\xD4"
"\xBA\x99\xC8\x8A\x6C\xAD\xB9\x28\x9E\x10\xF9\x2D\xC2\xD2\x6D\x76\xF9\x6C\x80\x3D\xCD\xEC"
"\x96\x15\x9E\x24\x27\xD0\xA6\xEF\xD3\xDD\x2F\xA4\x7A\x62\x21\x22\xAF\x61\x88\x4C\xB4\x12"
"\xEF\x60\x66\x6B\xFE\xB2\x66\x4B\x58\x2E\xED\x81\xDB\x73\x72\xAC\xE9\xAE\xEF\x7C\xA9\xEB"
"\x2E\xB1\x6B\x77\xF5\xEF\xFE\xEA\xE9\x93\xF8\xE9\xCE\x9A\x9B\xFB\x96\x88\x1D\x5E\x41\x7F"
"\x7D\x11\xB0\x81\x85\x8F\x1E\x27\xD6\x4E\x2F\xBA\x0A\xC5\x00\x6A\xCD\xF5\x15\xED\x02\x73"
"\x1D\xC8\x86\xD2\xA2\x81\xD7\xDF\x86\xAA\xE7\x9D\x6E\xD2\xF6\x70\xB3\x5D\x70\x65\xCA\x27"
"\xB5\x4A\x6F\xC4\x01\x2F\xFF\x59\xEF\x6E\x00\xC2\x1A\xA9\x0A\x8C\x9A\x4B\x90\x8E\xD1\x80"
"\x76\x62\x4F\x24\x30\xCD\x6E\xAE\x71\xE4\x6C\xA9\x62\xCC\xF3\x42\xEF\xE5\x3A\x59\xE6\x7E"
"\x2F\x0E\xFB\x70\xE7\xD2\x29\xC4\xED\x21\xAA\xDA\x30\x46\x39\xB0\x4E\xC8\x81\x0A\xBB\xC4"
"\x39\x14\xAB\x6B\x4D\x80\x20\x58\xED\x18\x27\x49\x12\x0D\xAF\xD0\xAA\xAF\xC7\x36\x26\x20"
"\x15\xEF\x1A\x83\x96\x20\xB7\x25\xF4\xED\xB0\xFD\x16\x93\x18\x37\xC4\x23\xBD\x6D\xDF\x16"
"\xF1\x22\x1F\x31\xFD\x62\x6F\x20\x17\x70\xAF\x12\xCB\x93\xB0\x97\xB1\x16\x85\x4A\x5C\x71"
"\xF4\x0A\xB2\xAF\xFC\x5C\x25\x4B\xF0\xE7\x86\x32\x1F\x47\x1F\xF5\x66\x1D\x21\x6F\xB0\x54"
"\x40\x9C\x22\x63\x70\xAA\x42\x58\x88\xC4\x5F\x70\x3C\x66\x54\xC8\x30\xBF\xD6\x6C\x2D\xDB"
"\x2F\xE6\xFE\xF0\x0D\xB3\x0E\xB2\x6A\x88\x28\x27\xE8\x25\x53\x69\x1A\x5B\xB0\x08\x07\x6F"
"\x10\xF7\x31\x2A\xA3\x6F\x2B\xFF\x30\x00\x47\xB2\x50\x20\x09\x7C\x06\x33\x19\xE3\x69\x2F"
"\x19\x73\xBB\x22\xE7\x20\x93\xEB\xB6\x5A\xB3\x2F\xAB\x07\x95\xC6\xEF\x28\xB7\x31\x00\x94"
"\xC1\xA1\xCC\x5C\x05\x2F\x33\x0C\xA7\xB2\x30\x0F\xEB\x40\x3D\x2C\xD1\xB9\xB2\xB9\x64\x30"
"\xB7\x31\x33\x07\x0F\x90\xCA\xEA\x04\x12\x94\x05\x2E\xE7\x11\x30\xEF\x72\x18\xF7\xB2\xFD"
"\xDE\x6D\xD9\xF2\x6C\x3D\xE3\xD8\x37\xE3\xB3\xC7\x1E\x32\x10\x27\xF2\x0F\x33\xF2\x0B\x0F"
"\xF0\xCF\x3A\x16\xBC\xB8\xED\xCD\x46\x33\x77\xBA\x33\x95\x40\x98\x3A\x6B\x73\x70\x70\x32"
"\xB0\xD8\xD5\x38\x0F\xF3\x12\x6B\x2E\x21\xF7\x5C\x37\x27\x73\x3A\x73\x71\x23\x7B\xB3\x71"
"\xEA\xE6\xC9\x92\x44\x44\x1F\xF3\x3D\x9F\xF4\x46\xE7\x06\x71\x32\xD9\x24\xAF\xC8\x1B\x9B"
"\xF1\x41\x6B\xDA\xD0\x9A\xF2\xB8\x4E\xB4\xE3\x6A\x13\x40\x93\x34\x38\xB7\x5F\x36\x9F\xB2"
"\x4A\xB3\xB2\x3C\x43\xB4\x33\x0F\x71\x49\xD7\x2F\x10\x73\xA8\xE0\x0E\xA6\x84\x6A\x23\x16"
"\x77\x05\x10\xBA\xEF\xF9\x02\xF5\x45\x67\xB2\x26\xBF\x4B\x27\x23\xF1\x46\x73\xB3\x42\xB7"
"\xB3\x5A\x17\x9E\xD2\xBE\xB3\x32\xAF\xB5\xF0\x4A\x74\xCC\x1A\x35\x5B\xAF\x72\x33\x43\xF5"
"\x54\x57\x33\x4C\x0F\xC4\x39\x27\x31\xE9\xA8\x13\x35\x8F\x25\xA1\x89\xAB\x44\xA8\x0A\xAB"
"\xD8\x82\x23\x94\x0C\x01\xFE\x75\x4C\x04\x30\x51\xD3\x75\x7C\x86\x84\x99\x11\x8A\xBB\xE4"
"\x55\x52\x3F\x1F\x5A\x17\x32\x43\xBB\xA1\x11\xE7\xB5\x1F\x7B\x36\x4F\x37\x75\x51\x97\x04"
"\x34\x5F\x74\xDB\xA2\x13\x28\x9F\x35\xEB\x6C\x60\xB9\xCC\x33\xD7\x82\x74\x5A\x37\xED\x07"
"\x63\x91\x6A\xD7\x35\x5F\x93\x07\x09\x4B\x13\x00\x96\xF3\xF5\xCA\x74\x5C\x6F\xE2\x5C\x6B"
"\x2D\x42\xC3\x36\x3C\x0F\x9F\x54\x83\x76\x58\xDF\x1C\x58\xFB\x36\x42\x00\x02\x8A\xF0\x9E"
"\xD8\xDA\xE0\x2C\xFF\xB6\x46\xB3\xF5\x03\x9F\xF6\x3A\x93\xF6\x81\x21\x57\x2C\xBF\x74\x38"
"\x8F\x09\x31\x4B\x32\x3B\x43\x36\x23\xD1\xB4\x76\x47\x36\x76\x8B\x36\x64\xFF\x6F\x45\x27"
"\xF3\x74\xE2\xC8\x63\xD8\x76\x29\x6B\xCD\x06\x72\x12\x09\x3D\x60\x62\x84\x34\x32\x2B\xB7"
"\x5A\xCF\xB7\x1A\x57\xF2\x01\xB7\x9F\x0D\xDD\xF5\xC7\xCA\x75\x4D\x93\xB7\x81\x83\x77\x4C"
"\x1B\xB7\x63\x23\xB7\x4D\xE3\x31\xEB\xF0\xA2\x50\xE3\xF6\xEA\x96\xD8\x78\xF0\xB3\xF2\xDC"
"\x31\x6D\xEF\xF1\x81\xA3\xB7\xB0\x0A\x0E\x83\xF5\xF6\xD2\x0A\x72\x74\xE7\x22\x53\x97\x77"
"\x54\x9C\xF7\x68\xA7\xF7\x95\x3D\x78\x82\x87\x77\x63\x3F\x76\xF5\x92\xD6\x7F\xDF\xF6\xBA"
"\x9C\xA6\x09\x75\x47\x71\x71\xDE\x26\xCB\xF6\x48\x13\xB7\x88\x5F\xF7\x4D\xE3\xB0\x80\x53"
"\x29\x81\x7B\x6F\x7F\x7B\x38\x8B\x0F\xB7\xF5\x16\xF8\xA4\xAE\x37\x1B\xC3\x78\x84\x6B\x4D"
"\xA1\x62\xB4\x28\xBF\xA9\x6C\xB4\x6A\x51\x38\x43\x9B\x46\xCF\x09\x2A\x8C\x49\xCF\x74\x46"
"\x4B\xF9\x76\x77\x8D\xCA\xF1\xB8\x27\xB7\xC6\x95\x7E\x9C\x74\x33\xEF\x3D\x37\xF4\x8A\xB3"
"\xB7\x8A\xBF\xB8\x99\xEB\x87\x7B\xF3\x30\x71\x7E\x1E\x88\xD8\xB8\xD7\xB2\xF6\xC0\xDD\x5D"
"\xF6\xA8\xAE\x85\x97\xB5\x48\x2B\x30\x5A\xF7\x39\x70\xAF\x87\x91\x0B\x30\xA8\x3C\x79\x84"
"\xF3\xB2\x5E\x0F\x66\x90\x97\x71\x94\x43\x79\x75\x97\x79\x8B\xD3\x78\x3B\xCD\x71\x3C\x63"
"\x79\x35\xF1\x4E\x1B\x26\xC6\x3C\xDC\x96\x22\xB6\x79\x62\xE8\xF2\x8C\xBF\xF6\x27\x19\x5E"
"\x9A\xAF\xB6\x3A\x3D\x27\x8A\x67\xBA\x79\xD7\xB9\xA6\x3F\x75\x94\xAF\x7A\x66\xFB\x0E\x5E"
"\xBB\x30\x45\xEB\x50\xA2\x93\x78\xF2\xE2\x0A\xF9\xE0\xB7\xD5\xE9\xF7\x8F\x1F\xBA\x7F\x8B"
"\x37\x7D\x2F\x38\xE7\xA2\xFA\x91\x4B\xDC\xA3\x2B\x79\x70\x23\xB8\x9D\x2B\xF8\xBA\x26\xF9"
"\x19\x7F\x36\x84\x4F\xFB\x00\x09\xAB\x96\x38\xF1\x28\xED\xBA\xB1\xD7\x52\xA7\xCE\x45\x74"
"\x27\x49\xAA\x93\x79\xAE\x23\x15\xAF\xBA\xBA\xF2\xB2\x4E\x6E\xCA\x7A\x9C\xD7\x7A\x72\xCA"
"\x79\xA6\xB7\xB7\x8C\x93\x39\xAF\xBB\x30\xB0\x6F\xFA\x44\x84\xFB\x1A\x41\x31\xE3\xB4\xD4"
"\xBB\x8F\xC5\xEB\xC4\xB6\x59\x73\x78\x42\x57\x38\x80\x17\xF9\x74\x0C\x78\xB4\x67\x3B\x3D"
"\xAF\xFB\x0F\x63\xB6\xB3\x63\xFA\xA5\x37\xB8\x70\xC3\xBB\xF9\x9D\xAF\xF1\x09\x5C\xE6\x11"
"\x5A\xA9\x87\x0B\xA6\xA2\xB4\x8B\x67\x37\x93\x1F\xFC\x82\x09\xB9\x5B\xDF\x38\x20\x93\xF5"
"\xF6\xD0\xFB\xB6\x4F\x39\x24\xD3\xBC\xB5\xC7\x78\x55\xCF\xB8\x82\xC7\x9D\x38\x53\xFA\xDA"
"\x44\xA6\xA0\x8F\x47\x19\xD4\x02\xA9\x59\xB1\xA1\x73\x35\xA2\x2F\xFB\x77\x53\x92\xBF\x8F"
"\xAC\xCB\x63\xFC\xC6\x07\xFB\x50\xE3\xFB\xC2\x17\x37\x5C\xF3\xBB\xD4\x7F\xB8\xD5\xCB\x6F"
"\x2F\x83\xBC\x6C\xAE\xFC\x75\x0C\x7C\x0B\xC3\x1E\x73\x07\x74\xCE\x49\x7A\xBB\xA3\xAB\xC1"
"\x7F\x77\xEC\xC0\xDA\x78\x5B\xFB\xCC\xE3\x7A\x54\xDF\xBC\xAD\xDF\xB9\xBE\xA7\x3C\x70\xF7"
"\x3C\xD7\x0B\x13\x49\x75\x86\x3E\xA3\x7D\xDB\x28\x3C\xB3\x37\xFD\xD2\xDF\x78\xE1\x8B\x39"
"\xCC\x82\xCA\xBD\x13\xF9\x92\xCF\x39\xE1\x6B\xF0\xC4\xAF\xF4\x85\xB1\xFB\xC5\xB3\xFD\x98"
"\x6B\x13\xE0\x3B\x0A\x0D\x13\x70\xD9\x77\x38\xB5\x6F\x3D\x8D\xB5\xBA\xC6\x28\xB1\x36\x71"
"\x7E\xA6\xC9\x7C\x67\xDB\xFC\xDC\xA7\xFD\xBD\xB3\xBB\x69\xF7\xFA\xD4\xAB\x53\xFB\x5D\xFC"
"\xA6\x48\xC7\x3C\x58\x81\xBA\x00\x74\xE0\x23\x30\xD2\xAB\xB9\xB2\x27\xFE\x2B\x7F\xB2\xE1"
"\x5F\x2C\xD4\x47\x37\x4B\x57\x7C\xDA\xD7\xBE\xB4\x6B\x3B\xEB\x27\xB7\xF0\x2B\x7D\x63\x37"
"\x5E\x3E\x07\x2E\x31\x91\xFC\x60\xCC\x77\xED\xAB\x37\xD5\xB3\xFB\x68\x8D\xFE\xC2\x52\xBC"
"\xF5\xD1\xC1\x0C\x62\xE1\x69\xD9\xFD\xAC\xD3\x79\xDD\xDB\x7B\xBD\xFF\xAE\xCE\xEF\x7B\xE3"
"\x2F\x37\xDF\xCB\x6C\xA0\xD9\xAB\x41\x17\xFF\x7E\x8F\xB8\xA2\x63\xD1\xFA\xF8\xFC\xE6\x3A"
"\xBD\x9D\xFE\x03\x18\x50\xE0\x40\x82\x00\xCD\x89\x00\x90\x50\xE1\x42\x86\x0C\x27\x38\x23"
"\x78\xB0\xE1\x42\x2F\x05\xBD\x4C\xC4\xE8\x10\xE2\x40\x67\x13\x32\x02\x60\x44\x70\xDE\x90"
"\x8F\x1F\x67\x89\x24\xF9\xB1\x22\xC1\x8B\x25\x31\x3E\x24\xD8\x31\xA3\x08\x73\x31\x3D\xBA"
"\x9C\x78\x72\xE0\x3C\x5B\x3D\x7D\xFE\xFC\x09\x08\x27\x4E\x11\xC2\x0A\x72\x44\x32\xB4\x24"
"\x4D\x82\x8C\x1A\xC2\xE4\x78\x53\x29\x46\x9D\x02\x47\xAA\xB4\x38\xB5\xE1\x90\x79\x2C\x27"
"\x32\x1D\xE8\x54\xEB\x44\xA8\x02\x65\x8E\x45\x0B\x32\x2B\xD6\xA6\x69\xAB\x06\xBC\xFA\x31"
"\xA4\x57\xB4\x6F\x01\xC6\xCD\x38\x77\x60\xCB\xB1\x60\x05\xCE\xFA\x58\x36\xA0\x44\xB4\x82"
"\x8F\x1E\x36\x2B\x55\xAB\xE1\x7F\x67\xD3\x3E\x4E\xC8\x15\x31\x40\xC0\x90\x71\xAE\x14\x78"
"\xD1\x2F\x40\xB1\x90\x19\x3B\x6E\xA8\xF7\xEF\xE3\xCF\x8A\x19\x6E\x06\x08\x7A\x2A\xE6\xC9"
"\xAD\x2B\xBB\x8D\x88\x30\xEF\xDA\xB1\xA5\xE5\xA2\x84\xBD\x33\xE5\x6C\xBA\xB5\x37\x26\xCE"
"\x28\x39\x6A\x6E\xE0\x96\xC7\x9A\x38\xD5\x7A\x9E\x23\xD3\x5A\x51\xFF\x7B\xAD\x10\x89\x36"
"\x9B\xC6\x01\xD8\xE5\x9C\x91\xF1\x3F\xBE\x68\x85\x0B\xEC\xBC\xF0\x7B\xC0\xF0\xA4\x7F\x07"
"\x54\x6D\x9D\xF7\xC0\xE8\x39\x69\x6B\x15\x4D\x3E\xF0\xF9\x80\xDD\xA7\xC6\xCF\xAE\x9D\x3E"
"\x40\xFB\x4A\x9F\xE3\xDD\xAA\xAB\x81\x08\xF3\xAD\x35\x03\xD3\x1B\xCA\x36\xF5\x0A\x9C\xAC"
"\xBF\x05\x15\x62\x8D\x3F\x00\x50\x2B\xAF\xB0\xFD\x10\x9C\x60\x93\xA3\x2A\x54\x8A\x31\x00"
"\x4F\xAB\x69\x38\xB4\x22\x34\xB0\xA0\x0F\xB5\xC2\xEE\x1F\x39\xF4\x7B\x6F\xAA\xED\x1C\x4C"
"\xE8\xBF\xDD\xE0\x2B\x88\x43\x85\x5E\x4C\x4B\xC1\xA7\xF6\x83\xEE\x31\xEC\x10\x7C\x50\x3B"
"\x47\x04\x44\x4C\x18\xD9\xFA\x0A\x71\x20\x61\x7A\x12\xE6\x9C\xC3\x80\xA4\xB1\x20\x6D\x80"
"\xF2\x89\x48\xAB\x66\x1C\x6B\xBC\xBB\x1C\x31\xA3\xCB\x2E\xE9\xA0\xAE\x2D\xE3\x74\x0C\x72"
"\x22\x12\x01\x3A\x87\xCA\x2A\x4D\xC4\x52\xA9\x33\xFF\x49\x53\x4D\x5B\xAC\x84\xAB\xCD\xA1"
"\xDE\x8C\x53\x4D\x3A\xEF\xB2\x13\xA7\xED\xFE\x59\x92\x4A\xA3\x0A\x82\x72\xC1\xE7\x0A\xF5"
"\x93\xC7\x12\xFF\x21\x70\xC1\x37\xD1\x6B\xAE\x4C\x12\x35\x4B\x32\x3F\xCF\x14\x5D\xF4\x9F"
"\x13\xA7\x4A\x11\x50\x2A\x9D\xD9\xC6\xC9\xEA\x46\xCC\xF4\xB0\x53\x2C\xC3\x0F\xA0\x29\xF5"
"\x64\xD3\xC7\xA3\x9C\x51\x53\x98\x3D\x19\x3D\x52\x2B\x3C\xE5\x9C\xB3\x55\x0B\x4B\xDD\xD0"
"\x55\x82\xE4\xD0\x21\xD8\x60\xAF\xE8\x52\x90\x9E\x9C\xA9\x25\x52\xF5\xCA\x08\xF3\xA8\x4D"
"\x13\xE5\x15\x52\xEB\xB4\x8C\xB6\x51\x24\xA3\xAD\xCF\x3A\x32\xCB\x04\x11\xDB\x01\x6B\x9D"
"\x8A\xDA\x68\x11\x0D\x6E\x56\x5E\xC9\xCD\xA8\xD3\x52\xDB\xE3\x76\xC2\x4A\x53\x53\xB6\x43"
"\x4C\x0D\xB4\xD6\xBA\xE7\xC0\x6B\x97\xA1\x49\xDD\x0D\x6B\xCC\x79\x4B\x64\x37\x4A\x6F\xE1"
"\x4D\xEB\xD1\x12\xE7\x11\xCA\x32\x83\x17\x45\x17\xA3\x54\xCF\x8D\xB7\x24\x71\x21\xCE\xF1"
"\xDF\x12\x61\xC4\xE9\xE1\xD6\x1A\x7E\x0C\x09\x45\x9F\xC5\x49\xDD\x8D\x23\x96\x77\x60\xCA"
"\x8C\x13\x79\xB2\x7A\x77\x15\x31\x5F\x86\x52\x06\xD8\x3C\x93\x2D\x65\xD0\x64\x1B\xEF\x9C"
"\x19\xE4\x07\x0F\x25\xD9\xA5\x3F\x4B\x5C\xD9\x38\x8D\x75\x76\xD4\x2B\x0A\xFD\x35\x99\x68"
"\x97\x26\xCE\x94\x63\x7D\xB1\x9D\xC7\x19\xE6\xEC\x7D\x37\xDA\x9B\x89\xAA\x9A\xD7\xAB\x4B"
"\xFA\x39\xD3\xAD\xE7\x9B\xD9\x69\x86\x98\x46\x4C\xEC\xB4\x90\xC3\x2D\x2D\xB2\xCB\xEE\x19"
"\xE7\x81\x83\x0E\xD7\xDC\xD6\xBE\x4E\xF0\xC2\xB6\x17\x5C\x5B\xB9\x3E\xDD\x7E\x1B\x5C\x5B"
"\x67\x86\x7B\x28\x98\x27\x0B\x98\x5B\x9E\x2D\xEB\xBA\xB5\xC0\x1F\x9B\xD8\x6C\x52\xF7\xE2"
"\x17\x5F\xC4\x2D\x46\x6C\x1E\x8C\x39\x0D\xFB\xEE\x86\xCE\xA4\x3B\x48\x8D\x81\xF6\x5B\x60"
"\x6C\x1D\x87\x10\xF0\xD0\xEB\x9E\xF9\x72\x9F\x29\x1F\xD5\xE5\x1B\x87\xAC\x13\xB2\xCF\x35"
"\x3D\xA5\x0C\x3A\x49\x9F\x68\xF6\xCA\xF7\x16\x9D\x61\xCD\xB9\xB6\xDB\xF5\xCD\xE5\x56\x4E"
"\xF5\x8C\x07\x56\xDA\x25\xDD\x77\x47\x7A\xF4\xDF\x21\x3B\xFC\xD2\xBE\xDB\xED\xB4\x73\xE3"
"\xF6\x3D\x7A\x72\x6F\xB5\xA9\x41\xBD\xC4\x47\x2E\xB8\x46\xE1\x27\x4A\x0E\x6A\xDE\x13\x2C"
"\x3F\x5A\xEE\x85\x46\xFE\x7C\xE0\x91\x5F\xD1\xB2\x7B\x27\xC3\xFD\x31\x66\x35\x75\xBF\xA4"
"\xFB\x09\x3A\x67\x6A\xD4\xEA\x6F\xC8\x74\x78\x55\x8B\xEE\x2D\x68\x7F\x06\x5A\xCE\xF3\xC0"
"\xD6\xB2\xF1\x25\xA4\x06\xB5\x88\x16\x01\xD5\x53\x03\xD6\x0D\xE4\x14\x0A\xC4\x08\x05\xA3"
"\x75\x41\xEF\xC1\x2E\x53\xF3\x90\x03\x06\xD3\x12\x3D\x99\x79\x6B\x71\x8F\x49\x55\xF2\xAC"
"\x83\xBD\x77\x59\x8F\x45\xA5\xDA\x46\x2A\x0A\xB8\xA0\x09\xC8\x81\x78\xFC\xDB\xC6\x92\x1C"
"\x71\x85\xC7\x70\xAE\x81\x0D\x39\xE0\xA2\x4E\x61\x82\x05\xC9\x41\x54\x8B\x9A\x07\x07\xAD"
"\xA3\x41\x5E\x29\xB1\x84\xA5\x8A\x5A\x19\x44\xF8\x14\x08\x22\x70\x1B\x52\x9B\xA2\x65\x90"
"\x20\x8C\xFC\xB9\xC4\x04\x5E\x32\x03\x12\xB2\x08\x19\x24\x80\xD1\x8C\x66\x24\x62\xBB\xBE"
"\x78\xC6\x33\x26\xE5\x87\x6F\x64\x88\x0E\xBC\x74\x21\x30\xEA\xA0\x5D\x72\x64\xE3\x19\xAF"
"\x90\xC6\x32\xE1\x31\x8F\x60\xDC\x63\xBB\x26\x40\xAC\x3F\x7A\xE9\x0A\x63\x84\x63\x22\x17"
"\x94\xAA\xC2\x71\x8B\x85\xFD\x52\xA4\xEB\x4C\x40\x48\x33\x22\x41\x58\x65\x5A\xA3\x19\x67"
"\x18\xC9\x32\x16\xB2\x4B\x81\xE4\xD6\x04\x3A\xE9\x49\x50\xF6\xD1\x93\x86\xE4\x63\x24\x05"
"\x49\x49\x2F\x59\x52\x07\xA9\x54\x65\x2C\x65\x39\x4B\x5A\x46\xF2\x47\x88\xAC\x65\x2E\x75"
"\xB9\xCB\x59\x4E\x40\x58\x48\xF0\x20\xE4\x1A\xF8\x48\xC9\xF1\xD2\x98\xC7\x44\x66\x32\x95"
"\xB9\x4C\x66\x36\xD3\x99\xCF\x54\x4A\xAA\xF2\x54\x06\x68\x56\xD3\x9A\xD7\xA4\x0A\xF8\x86"
"\x69\xB4\x16\x62\xD3\x9B\xDF\x04\x67\x38\xC5\x39\x4E\x72\x96\xB3\x5C\x88\x71\xA1\x39\xD5"
"\xB9\x4E\x5F\x21\xC6\x78\x0F\x22\xA6\x7C\xD8\x39\x4F\x7A\xD6\xD3\x9E\xF7\xC4\xA7\x39\x45"
"\x96\xCE\x7C\xF6\x73\x9D\x29\x6B\x64\xBB\xE2\x49\x33\x7F\x16\xD4\xA0\x07\x45\x68\x42\x15"
"\xBA\xBA\xC3\xF0\x73\xA1\x0F\x65\xA6\xC8\x00\x38\x96\x81\xFE\xC3\xA1\x10\xC5\x68\x46\x35"
"\xBA\x51\x8E\xBE\x71\x02\xA7\x98\xD5\x45\x3B\x3A\x52\x45\xAA\xCB\x89\x3F\xAC\xA8\x48\x49"
"\xBA\x52\x96\xB6\xD4\xA5\x1D\xD5\xC1\x15\xAE\x10\x2C\x5C\xBE\xD4\xA6\xEA\x41\x02\x1D\x52"
"\x61\x0B\x50\x6D\xC3\x16\x82\xA8\xE9\x71\xCE\x48\xC4\x41\x6A\xF2\xA6\x47\x45\x6A\x52\x95"
"\xBA\x54\xA6\x36\xD5\xA9\x4F\x85\x6A\x54\xA5\x3A\x55\xAA\x56\xD5\xAA\x57\xC5\x6A\x56\xB5"
"\xBA\x55\xAE\x76\xD5\xAB\x5F\x05\x6B\x58\xC5\x3A\x56\xB2\x96\xD5\xAC\x67\x45\x6B\x5A\xD5"
"\xBA\x56\xB6\xB6\xD5\xAD\x6F\x85\x6B\x5C\xE5\x3A\x57\xBA\xD6\xD5\xAE\x77\xC5\x6B\x5E\xF5"
"\xBA\x57\xBE\xF6\xD5\xAF\x7F\x05\x6C\x60\x05\x3B\x58\xC2\x16\xD6\xB0\x87\x45\x6C\x62\x15"
"\xBB\x58\xC6\x36\xD6\xB1\x8F\x85\x6C\x64\x25\x3B\x59\xCA\x56\xD6\xB2\x97\xC5\x6C\x66\x35"
"\xBB\x59\xCE\x76\xD6\xB3\x9F\x05\x6D\x68\x45\x3B\x5A\xD2\x96\xD6\xB4\xA7\x45\x6D\x6A\x55"
"\xBB\x5A\xD6\xB6\xD6\xB5\xAF\x85\x6D\x6C\x65\x3B\x5B\xDA\xD6\xD6\xB6\xB7\xC5\x6D\x6E\x75"
"\xBB\x5B\xDE\xF6\xD6\xB7\xBF\x05\x6E\x70\x85\x3B\x5C\xE2\x16\xD7\xB8\xC7\x45\x6E\x72\x95"
"\xBB\x5C\xE6\x36\xD7\xB9\xCF\x85\x6E\x74\xA5\x3B\xDD\xB9\x3E\x50\x55\xD4\x54\xC8\x21\xA9"
"\x1B\xCE\x09\xEC\x14\x28\x9B\xDC\x6E\x78\xDD\x8A\x1A\x0E\x72\x05\x84\xE2\xF5\x26\x7E\x54"
"\x8A\x5E\xF6\x56\xF5\x7B\x2A\x6C\xAF\x2E\x0D\x73\xC2\xF8\xD6\x17\xAB\x0B\x23\x98\x7D\x9D"
"\xA9\xA5\x77\xEA\xD7\xBF\x51\x1D\x5C\x7F\xFF\x4B\xCB\xF8\x04\x74\xC0\x07\x76\xAA\x75\x65"
"\x12\x44\x8B\x22\x98\x99\x82\xA1\xAF\x83\x25\x7C\xD3\x2B\xCC\xF0\xA3\x5D\x39\xEF\x84\x95"
"\x39\x1E\x01\x6B\x18\xAC\x35\xF0\xAE\x4F\x64\x08\x80\x21\x50\x29\x15\x41\xF5\x53\x88\x7D"
"\x82\x5D\xDC\x4E\xC0\x11\x54\x92\x82\x87\x19\xC2\x88\x6D\xD4\x78\x1B\xA7\x1A\xAC\x8B\x61"
"\x9C\xD5\x32\x50\x29\x61\xBD\xBC\x82\x4E\x71\xD5\x93\x54\xD0\x41\xBB\x2E\xD3\xD2\x55\x48"
"\x14\x61\xF5\x2C\xF9\x74\x90\x01\x31\x50\x46\x1C\xE5\x9F\x9C\x58\xB1\x24\x32\x30\x64\x7A"
"\x0C\x94\xA9\x01\xC2\xC7\xE2\x2C\xA3\x8A\x81\xC2\x89\x30\xFA\xF7\x8B\x2F\x96\x13\x99\xDD"
"\xF8\x46\x2C\x67\x15\x35\x4C\x6E\x57\x0D\x9A\x95\xA9\xF5\xB5\x2B\xC9\x24\x71\xF2\x1B\xB1"
"\xD3\x61\xA5\xDC\x99\xC4\x74\x82\xF3\x2E\x19\x13\x34\x1C\x3D\x4E\x37\x2F\x09\xDE\xF8\xEC"
"\x12\xE8\x68\x56\x07\x3B\x59\xC6\xC8\xFC\x36\xC6\x62\xE3\x58\x37\x53\x27\xAD\x0B\xA1\x94"
"\x45\x2D\x48\xBB\xE7\xD0\x18\xE1\x74\xF8\x06\xD6\x69\x87\xCD\x8C\x3B\xDE\x74\xF1\x0D\xAD"
"\x32\xB5\x1F\x2E\xFA\xC9\x5A\x29\x83\x33\x54\x2D\x10\x46\x5F\x73\x5F\xAA\x5C\x1E\x62\xE2"
"\x57\x26\x3F\xE7\xB9\x81\xA8\x21\xB5\x56\xFC\xAC\xA5\x5A\xD7\x72\xD0\xA7\x3B\x13\xE9\xDE"
"\x84\xA1\x44\x0B\x0F\x35\x7C\x6E\xF4\x70\x1E\x3D\xC2\xAC\x2D\xAA\xCE\x90\xC9\x9B\xAE\x88"
"\x03\xC9\x00\x11\x24\xD8\x0B\xC1\x0E\xC8\x42\x6D\x68\x6C\x7D\x7B\xC6\xA6\x86\x76\x2E\xBF"
"\xA7\xE9\x1F\x3E\xBB\xD2\x73\x5E\x54\xB1\xAD\x69\x17\x73\xE3\x6D\xD6\xCC\xE3\x35\x9D\x94"
"\x1C\x9B\x1F\xC6\x07\xBE\xC2\xD6\x37\x49\x88\xFD\x6A\x65\x1E\xFB\x2B\x55\xFB\xF7\xD3\x8E"
"\xE2\xA0\x6D\xB9\x2C\x42\x13\xCD\x9D\xA3\xBD\x4D\x6D\x93\xC9\x3B\x72\xE3\x9A\x62\xA7\x56"
"\x36\xEE\xB1\x84\x7B\x6F\x1C\xFF\xDB\xA8\x65\x87\x6E\x6C\x0E\xEE\x28\xF5\xEE\x21\x03\xB3"
"\x74\x6F\x7E\xDF\x73\x33\x16\x87\x8C\xC9\x09\xC7\xAD\x5E\xB7\x5C\x78\x86\x59\xEF\x47\x86"
"\x0D\x68\x82\x27\xD3\xE0\xA1\x29\x08\xCA\x13\xF2\xA8\xF4\x34\xDC\x65\x6F\x49\xF8\x50\xF0"
"\x23\x93\x69\xA3\x45\xD2\x8B\x12\xBA\x5A\x06\x26\x52\x75\x05\x0C\xE4\x98\xFB\xF4\x44\xAE"
"\xEE\x26\x93\x45\x3D\xD7\x0D\xBA\x66\xB6\x9D\xD5\x45\xF5\x20\x9D\xEC\x9E\xAE\x56\xCF\xC9"
"\x19\xA1\x9C\x3B\xBD\xDA\xA5\x82\x39\x59\xD8\xE8\x91\x4C\x1A\x12\xC5\x3A\xB7\x12\xC4\x41"
"\x1D\xF0\x3F\x7F\x0B\x9B\x3F\x5F\x88\x8C\x20\x63\xB0\x0A\x19\x3D\x5F\x9B\x69\x3B\xD0\xA5"
"\x3D\x71\xB7\x9B\xAE\x62\x26\x23\x9D\xBA\x4E\xB4\x75\xC1\xA5\x4D\xEB\x7B\x42\x39\x7E\x67"
"\x8E\x42\x92\x5B\xF3\xEB\xBD\x6A\x77\xA5\x44\x2A\xF6\x82\xC4\xFD\x99\x82\xD1\xFB\x6A\x5E"
"\x25\x08\x36\x3A\x42\x51\xE9\xBE\xE6\x96\x7D\x02\xDE\x20\x4D\x60\xEE\x00\xB0\xBD\x19\x8F"
"\x6C\x4D\xC0\x2B\x24\x45\xEB\x35\x98\xB5\x0C\x9F\x2F\x2F\xD8\x38\x87\x77\x07\x40\x0D\xF4"
"\x98\x90\x51\xB6\x92\xE2\xA9\x7B\xFE\x40\xCE\x41\x66\x30\x72\xE2\x88\xB4\x56\x3B\xDA\x83"
"\xDE\x6D\xF6\x6C\x9B\x4F\xE7\xEC\x3E\xB9\xA3\xE5\xF5\xCE\x57\xB3\x53\xC2\xA0\x83\x97\xE8"
"\x30\x28\xC6\xA3\xD4\xF8\xC2\x10\xA1\xE6\x0F\x63\xFA\x67\x0E\xA1\xA7\x57\xA4\xBD\xF0\x18"
"\x59\x92\x14\xC1\xBE\x21\x26\x10\x96\x00\x0C\x40\x58\x02\xAC\xDE\xEB\x3B\xBF\x1B\xBC\xCD"
"\xBB\x91\x66\xAB\x3D\x01\x24\xC0\x06\x14\xC0\x01\x2C\x93\xE7\x68\x24\x26\xE2\x36\x80\x6B"
"\x9D\xC0\x43\xB8\xB3\x03\x37\xB0\x13\x0F\xCC\xF3\x3E\xFC\x01\xBF\xD1\x10\x3F\x82\x4A\xA4"
"\x33\xF1\x3F\x63\x2A\x34\x85\x0B\x3F\xEB\x00\xC0\x08\x14\xC0\x07\x49\x15\x67\xC8\xBF\xF1"
"\x79\x41\x18\x0C\x16\x3E\x32\x01\xE4\x63\xA6\x54\x51\x1D\x1F\x82\xB2\x2A\x3A\x90\x1A\x44"
"\x8B\x53\x30\xBE\x1A\x4B\x96\x86\x10\x81\xFB\xB3\x31\x1C\x93\x1F\x26\xAC\xB1\x1F\xA3\x88"
"\x23\xBC\x22\x0E\x2C\x09\x24\x48\x05\x2A\xD4\xC2\x1A\x4B\x41\x8D\xB0\x39\xDC\xE3\x91\x2E"
"\x04\x80\x85\x01\x90\xE1\x1B\x8A\x2B\x30\x16\x61\xA8\xB1\xCA\xC1\xB4\x31\x01\xA9\x21\x34"
"\x94\xAA\x09\x28\x20\x5C\x39\x31\xD1\xBE\xEF\xCB\x34\xB6\xF9\xC0\xF6\x43\x11\xCB\xE3\x3E"
"\x12\xA4\x28\xF1\x89\x25\x14\x0C\x12\x29\xD0\xC2\x4D\xC8\x08\x23\xA4\x42\x2B\x4C\x08\x03"
"\x8C\x11\x39\xAC\x34\x21\x6C\x8D\x6B\x8B\x39\x3F\x6C\x20\x0B\x6C\x8D\x5A\xA0\x83\x79\x88"
"\x3A\xFB\xA3\x42\x07\x01\x04\x2A\x74\x06\x46\xB4\x0E\x1F\x2C\x09\x3A\x1C\x11\x96\x93\x27"
"\x94\xC9\xC0\x47\xE4\xC3\xC7\x78\x0E\x0E\x21\x91\xA4\x43\xB4\x52\x11\xC3\x05\xFC\xC2\x64"
"\x43\x24\xFC\x72\x0C\x33\x64\xA8\x4C\x31\x07\x22\x1C\x8B\x1A\x78\xBB\xA3\xD8\x35\xF9\x81"
"\xC4\x11\x0C\x08\x94\xA3\x96\x9B\xC1\x0F\x5A\xBC\x8E\xB9\xD9\xC3\x16\xEC\xC3\xAC\xFB\xC3"
"\x65\x14\xB5\x0B\x54\x24\x42\x7C\x10\x47\xBC\x38\x69\x09\xC1\x95\xA1\x40\x85\x51\x45\x13"
"\xEC\x38\x4B\x14\x1E\x39\xF0\x96\xD1\xDB\x13\x07\x79\x46\x52\x64\x9F\xDE\xC0\x08\x54\xC4"
"\xC0\x68\xB9\xC5\x5B\x52\xC2\x64\x44\x46\x3B\xA4\x08\x74\x6C\x3C\x5B\xA4\xA1\xFD\x20\x90"
"\x15\x4C\xC0\xD6\xE0\x0B\x5F\x7C\x9F\x52\x81\xB8\xA7\x1B\x3B\xAA\x79\xC5\xB1\x01\x41\xEF"
"\xD8\x13\x67\xF4\xC7\x90\x51\x9C\x23\xA1\x3C\x8B\xB4\x46\x88\x7C\x48\xBE\x29\xA6\x48\xE2"
"\x46\x19\x6C\x91\xA1\x13\xC4\x70\x0C\x9D\x58\xC4\xB6\x72\xCC\x96\x4A\xDC\x48\xD7\x21\xBD"
"\x8A\x5C\x9A\x76\x8C\xB8\x96\x6C\x20\x53\x64\x0B\x6D\xC4\x3A\x8C\x63\x45\x95\xFB\xC6\x93"
"\x31\x0E\x94\xDC\x1C\x98\xBC\x0F\x7B\x0C\x48\x9B\xDB\xBF\x15\x3A\x90\x9B\x40\xC8\x05\x02"
"\xC8\x78\xA4\x98\x7D\xA4\xC6\x6B\xF4\xC9\x3A\xC4\x49\x85\x78\xC7\x10\xDC\xBE\xC8\x88\xC8"
"\x73\xA4\x49\xAD\xEC\xC8\xCB\x28\x49\x90\x1C\xC9\x9F\xD4\xC7\x0E\xEC\x4A\x8F\xC4\x43\x8E"
"\x14\x26\xAC\x2C\x91\xFA\xE9\xBF\x1F\x5A\xB7\xC3\x38\xC6\x7A\xCC\x8C\x99\xBC\x92\x48\xB2"
"\xC9\x8C\xA0\x47\xFF\x28\xC6\xC9\x80\x46\xB3\x2C\x0E\x0D\xFC\x4A\xE7\xA8\x1A\x59\x14\xCA"
"\xA1\x60\xC8\x85\x2B\xCA\x01\x71\x25\x2B\xD8\xC0\x26\x2B\x11\xB1\x58\xCA\x17\x5A\x97\xE6"
"\xE1\x95\xBF\x54\x88\x71\x54\xC6\xA9\xA4\xCB\x55\x54\xBC\xBB\xCC\x43\xBF\x4C\x89\x8C\x74"
"\x89\x70\x2B\x03\x1C\xD4\x01\xDB\x19\xCC\x53\x2C\x88\x4D\x40\xCD\x4B\x72\xB8\xB1\xDC\x49"
"\xD0\xC4\x45\x9E\x74\x91\x0B\x01\x2F\x39\x6B\xC5\xA9\x48\xCC\xC3\xC0\xCC\x54\x31\x87\x35"
"\x73\x49\x95\x1C\x8C\xEC\xBB\x3C\x79\xB4\xCA\xC3\xCC\x97\xBC\x9C\xC7\xB0\x8C\x1B\x91\x08"
"\x94\x9F\x98\x15\x31\xC4\xC7\x6E\x89\xCA\xE8\xF3\xCC\xD2\x39\xCB\x3E\x23\xCE\x5B\x6C\xC4"
"\x0A\xCA\xCE\x82\x1C\x88\x6D\xE0\xB7\xC9\xAC\xC5\x73\xA8\xB1\x9E\xA0\xBE\x2E\xD1\x90\xDD"
"\x24\xCC\x88\x70\x25\x61\x79\x4B\xA8\x04\xC4\xE3\xBC\xCE\xA1\x68\xC6\xF5\x88\x9D\xD0\x84"
"\x0B\xF6\xC3\xC6\x03\xAC\xCF\x9C\x14\xB9\x12\x44\x20\x78\x04\x4B\xE4\x54\x8F\xFC\x9C\xC6"
"\x8F\xC4\x4E\x6B\x33\x4E\xFB\xB4\x8A\xE8\x5C\x13\x04\x1D\xCA\x71\x91\xA2\xEB\x31\x11\x09"
"\xB5\x05\xFF\xDC\x4F\x89\xA4\xD0\xAB\x54\x24\xE6\x34\x13\xE7\xE4\x3A\x0A\x0D\xC9\x76\x02"
"\x47\xC1\xBC\xCF\x6B\xA9\xCA\x59\x34\x50\x92\x24\x88\x36\xCC\x97\xB8\x2C\xCE\xA2\x69\x8A"
"\x69\x33\x4F\x14\xCD\x2F\x58\x2C\x4C\xA9\x3C\x35\xFA\xFC\xCF\xE6\xE4\xC7\xE7\xAC\xCA\x84"
"\x00\x51\xAE\xB4\x8A\x32\xA8\x9A\x8B\x20\x4D\xFE\x33\xB5\xCC\x8B\x16\xCC\x74\x89\x13\x5D"
"\xCC\xC0\x94\x3A\xDA\xF4\x0C\x49\x34\x10\x19\x25\x52\x06\xF5\xCA\x22\xC5\x4F\xE2\x54\x95"
"\x17\xA5\xD2\x3F\xF1\x3F\x6A\x71\x47\xE5\x6C\x17\x11\x0D\xCA\x21\x2D\xD1\xB5\x5C\xD0\x95"
"\x64\x49\x2B\x75\xC5\x15\x7D\xCF\x16\x55\x53\xD6\xDC\xCE\x32\xA1\x51\x73\x4C\xB9\xA6\xB8"
"\xB3\x1C\x0D\x41\x00\x02\xCA\x38\x95\x10\x20\xE5\x4C\x86\x20\x46\x12\x0D\x53\x37\x4D\xCE"
"\x3D\x4D\x17\x94\x58\xBA\x09\x68\x52\x93\x78\xD2\x6C\xFC\xA0\x17\xD5\x53\x38\x85\x27\xCB"
"\x63\x8C\xA8\x5B\x88\x0B\x43\x22\x2E\xE5\x4E\x0A\x55\xD0\xC7\xF3\x16\xCC\x74\xD1\xC0\x83"
"\xB7\xBA\x54\x1B\x99\xFC\xCC\x0E\x85\x23\x36\x65\x41\x2F\x45\xCB\x43\x55\x4B\x57\x9D\xD3"
"\x14\xCD\xCC\xB2\xE4\x51\x47\x5D\x55\x85\xC9\x53\xEF\x01\xCF\x1E\xB1\xD1\x7E\x59\x3A\x13"
"\x60\x40\xD2\x60\x25\x33\x5A\x56\x16\xF5\x52\x34\x25\xCB\xF2\xEB\x4C\x3F\xBD\x52\x59\x15"
"\x50\x3E\x61\x0C\x46\xA8\xD4\x48\x9D\x19\x28\xBD\x4C\x4D\xBD\x49\x5D\x0D\x92\x42\x95\x56"
"\xE3\x78\x49\x6C\xAD\xD6\x1F\xCD\xD5\xF0\x0C\x39\x6F\x89\xBA\x60\x4D\xBE\x62\x3C\x53\x58"
"\x3D\x37\x48\x5D\x53\xD9\xD4\x4E\x30\xDD\x54\x72\x55\x88\x73\xDD\xD5\x1D\xED\xD5\xD5\xE4"
"\x4B\x60\x1D\x56\xBD\x3C\x58\xCB\x5C\x14\xEF\x1C\x43\xF1\x79\x0E\x39\x78\x56\xAD\xD0\x4D"
"\x85\x1C\xA3\xFF\xA0\xC2\xEB\x93\xD3\x5F\xAD\xB8\x07\x35\xD4\x06\x2B\x35\x7C\xBD\x43\x11"
"\x5C\x32\xD5\xB4\x53\x27\xFD\x56\x4C\x45\x22\x71\x45\x58\x0A\x55\x0F\xFC\x20\x0C\x97\xE5"
"\xD8\x83\x33\xA1\x98\xFD\x57\x7B\xED\xD8\x9C\xFB\xBC\x84\xED\xC7\x4F\x5B\x9B\x7A\xFD\x50"
"\x9D\x6D\x59\x7D\x85\x51\x7E\x1D\xD7\x8C\xAD\x59\x96\xCD\xD6\xC6\x68\x0E\xCD\x44\x54\x8F"
"\xAD\xD5\xB4\xFC\x53\x2C\xBD\x39\x1E\x41\xCF\x50\x61\x37\xA4\x14\x13\x12\xD1\x86\x56\xAD"
"\x1F\x2F\x20\x4E\x42\xED\x4B\x77\x9A\xD6\xAE\x63\x9C\x89\xD4\x4F\xA8\x4D\xDA\xB8\xC0\x8E"
"\x73\xD8\xCA\x6A\x94\xBE\x2D\xB4\x5A\x82\x5D\xD9\x9D\x80\xDB\x1A\x1B\xC5\xD8\x44\x5A\x74"
"\x95\xC9\x4F\xB5\x0E\x99\x3B\xB9\xB2\x35\x55\xB3\xAD\xB4\x62\xF5\x57\xD5\x3B\xB4\xF1\xD8"
"\x06\x9B\x5D\xD7\x34\x05\xD9\x32\xA1\xD5\x9D\x25\xDA\xB9\x2D\x5C\x00\x35\x5A\xFE\x14\xD8"
"\x3A\x0D\xD0\x06\x75\x5A\xC8\x55\xD7\x40\x6C\x5C\x6D\x11\xC8\x23\x99\x4F\x0C\x15\x93\x75"
"\xC3\x9D\xDE\xBC\x5A\x8D\x25\xCA\xA6\x85\x3B\x9A\xFD\x52\x5B\x35\x52\xA0\x8D\x46\x9E\x9D"
"\x35\x94\xF3\xB8\xCD\x34\x56\xCF\x8D\x5C\xD7\xA1\xD2\x20\x99\xB6\xE7\x10\x43\x6A\xA1\xC1"
"\x89\xC0\x44\xB4\x2D\x55\x4E\x7D\x5D\x77\x7D\x8C\x49\x2A\xA4\x60\x52\xDE\x03\xBD\x12\x1B"
"\x02\x0F\x80\xA5\xCA\xC9\x3D\xD2\x59\x15\xDA\x86\x75\x54\xE8\x9D\x5C\xEA\x1D\xD4\xA5\xF5"
"\x55\xCD\x35\xCC\xCF\x15\x52\xA9\x75\x1D\xC0\x13\x5E\x5C\xA2\x43\xCD\xC3\x9D\x9C\xA5\x53"
"\x68\xE5\x15\x31\x44\xDD\xA3\xA0\xC4\xEA\x7D\xDE\xEB\x4D\xDB\xDD\x58\x1E\xDB\x85\xC9\x6E"
"\x2D\x5F\xD8\x45\xA9\xEC\x15\xD6\x6F\x21\x91\x89\x92\xD7\x36\x45\xDE\x46\x4D\xE0\x53\x1D"
"\x1F\x06\x7E\xD7\xFE\xEC\x17\xEF\xED\xD2\xCA\xBD\x56\xE3\xAD\xC9\xEC\xDD\xCB\x5B\x65\xD7"
"\x8E\xA5\xCE\xDD\x64\x5A\xE8\xE9\x51\x04\xEE\xDC\x07\xB6\xE0\x19\x0D\x5D\xC0\x04\x60\xC3"
"\xBD\x40\x98\x21\x9D\x3E\xB5\x4D\xDE\x0C\xDB\xC3\x90\xDF\x18\x96\x12\xE1\x7C\xD5\xED\xAD"
"\x60\x11\xB4\x5C\x1D\xEE\xC9\xAC\x44\xD2\x11\xA6\xDC\x44\x7D\xD3\x14\x1E\x9F\xDE\xED\xC6"
"\xFD\x60\x04\xEC\x68\x3B\xFC\xBD\xD9\x1B\x5E\x60\xC1\x6D\x20\xFF\xFD\x5F\x63\x4C\x5E\x5C"
"\xB5\x5F\x2B\x7E\x54\xF3\xBD\xE0\xBC\xD5\xDE\xDD\x1D\xD1\xC0\xE5\x62\x8D\x7C\xDF\x0F\x56"
"\x5D\x77\x3D\x60\x94\xE5\xE1\xF1\xE9\x3D\x6A\x89\x3B\x54\x5C\x9B\x16\x16\x48\xDA\xAB\xCE"
"\x32\x56\x95\x21\xFB\x09\x4D\x25\x63\xC1\xB3\x0C\x07\x5E\x08\x26\xAE\x3C\x6B\xD4\x1D\xFE"
"\x3D\x4B\x29\x16\xE1\xE7\xDD\xA6\x30\x46\x15\xFE\xE1\xBB\xD9\x04\x62\x42\x6E\x57\x2C\xAE"
"\xE2\xCD\x15\x1E\x47\x7E\xDA\x9D\xE0\x0B\x09\x3E\x5E\xEB\x95\x5D\xA7\x9C\x5C\xCE\x35\xE4"
"\xA2\x85\xE4\x20\xDE\xE0\xEF\xCD\x47\xB9\xC5\x1A\x83\x25\xDF\x2F\xD6\x62\x13\xFE\xC2\x1C"
"\x96\x64\x02\x2D\x8F\xD9\x21\x1D\x32\x4E\x88\x39\x16\xDF\xD0\x7B\xC8\x19\x1C\x23\x3E\xF6"
"\x3D\xD9\xBD\xDD\xDA\x3C\x0C\x41\x5E\x65\x51\x06\x57\x2F\x26\x3E\x01\x66\xDD\x17\x76\xDB"
"\x46\x6E\xDB\x09\x0E\x65\x5E\xCE\x17\x4A\xF6\x64\x2C\xC5\x64\x05\xD6\xE4\x54\x0E\x5A\x82"
"\x1D\x5D\x12\x7E\x66\xC5\xDD\xE1\x0F\x01\xA6\x66\xD6\xDC\x59\x50\x8C\x09\x28\x03\x0E\x4D"
"\x63\x34\x96\xD2\xC5\x38\x61\x15\x1D\x66\x0D\x2E\x8F\xA7\x9B\xE5\xF0\x55\x56\xF7\x84\x61"
"\x1C\x9E\xC0\xF0\xBD\x97\x2E\x64\xE3\x93\x7C\xCC\x6F\xC6\x92\x85\x11\x66\x66\x36\x65\x55"
"\x26\x62\xE1\x31\x62\xDF\x95\xC6\xBE\x65\xD4\xD8\xC5\x67\xBC\x03\x63\x63\xC6\x88\x60\x89"
"\x36\x89\xAE\x64\x83\x00\xAF\x84\xC6\x89\xAB\x33\x01\x06\x4B\xE7\x00\x2E\x88\x3C\xA1\x92"
"\x59\x81\x46\x6A\x99\x87\xF4\x03\x23\x30\x41\x66\x93\x25\x08\x1B\x23\x1E\x50\xC5\x5C\xAB"
"\xA8\x31\x8C\xC5\xE6\x8B\xD6\x06\x94\x36\x03\x3A\xF0\x89\x99\x1E\x65\xE9\x41\xC0\x3E\xF6"
"\x61\x34\x7E\x65\x83\x81\x63\x42\x61\x12\xF2\x7C\x95\x8A\xAD\x9A\xE0\x14\x40\x2F\xE1\x84"
"\x9E\xD8\x06\x29\xA4\xE3\xDC\x9D\x66\xA5\x05\xE1\x0C\x05\x0A\x59\x29\x3D\xD7\xFD\x65\x14"
"\x2E\xE8\x86\xE8\x6A\x1F\x2D\xE6\x72\x73\xA4\x95\x4E\x49\x7C\xE3\x64\xB3\x50\x13\x45\xB9"
"\x28\x93\xC6\xE9\x2F\x69\xD5\x9E\x56\xE1\x80\xA8\xDA\xF4\xFC\x09\xB6\x8E\xDA\x81\xE0\x92"
"\x94\x8E\x6B\x9F\x15\x09\x9E\xF6\x4D\x95\x85\xDF\x99\x75\xE2\x28\xD5\x54\xF7\xCD\x5C\x96"
"\x31\x6C\xBD\x5D\x5D\xD0\x6D\xE5\x1E\x56\x55\x12\xFD\x99\xA2\x76\x1E\xED\xB1\x1A\x87\xBC"
"\xCF\xED\x50\x29\x17\xFE\x6A\xB0\x46\x47\xA6\x19\xE8\x12\x26\x66\xA1\xCE\x14\x98\x36\x68"
"\x0A\xAE\xBD\x79\x31\xED\xA1\x4D\x55\x52\x9C\xDF\x4D\xEE\xE2\xD6\x06\x5C\xF3\x99\xEA\x94"
"\x55\x25\xBF\x0D\xE6\x27\x7A\xCA\xB3\x26\x6B\x86\xA6\xED\x64\xF6\x40\xC7\xFE\xE9\xAA\xC6"
"\x9D\x0C\x26\xBA\x29\x42\xEC\xCB\xDD\xE1\xC8\xC4\xEC\xC4\x8E\xED\x1A\xCD\xEB\xC6\xFE\x61"
"\x0B\xD6\x98\xD0\xFE\xE8\xA3\x2D\x59\x50\xAE\x4C\x49\x31\x6B\xF1\xEC\xEE\xA5\xA0\xE1\x27"
"\xC9\x38\xC2\x8E\x6E\x9D\x2C\xEC\xDD\x5E\xEE\x83\x11\xEC\x2B\x0E\x57\xEF\x6E\x4A\xCB\x1E"
"\xBF\x04\x15\xD3\x75\x76\x65\x83\xAC\x52\xE8\xF6\x42\x44\x9E\x62\x3F\xED\x94\xD3\x0D\x6F"
"\x65\xCE\x64\xAF\x69\xEE\x20\xF5\xEC\xCE\xDE\x11\x6F\xC1\x9D\xB0\x1E\xD8\xA0\xCE\x5F\xDC"
"\x1D\xEB\xF8\xE6\x6E\xFD\x4E\x66\xFA\x73\x68\x6F\x49\x41\xF9\x6B\xE8\x21\xC6\x16\xBF\xDE"
"\xF0\x01\x5E\x6C\x55\xF2\xDA\x54\x15\x43\xC4\x76\xC2\xB1\xF5\x4D\x47\x50\xC7\xEC\x9E\x6B"
"\xFA\x45\x02\xBB\xA0\xEF\x09\xC0\x6D\xB9\x46\x55\xEC\xDB\x6F\xAB\x86\xE5\xBD\x4B\xDD\x54"
"\x9C\x8C\x53\xB0\x82\xDB\xC1\x25\xC4\x6E\x3B\x5A\xC6\xEE\x77\x76\x89\x89\x2D\x15\x6D\x70"
"\xDD\x5A\xAE\xC8\x87\xB1\x6E\x71\x13\x67\x0D\x2E\xED\xB2\x96\xF0\x44\x66\x70\xEB\x48\x1F"
"\xAD\x49\xEB\x98\xF1\x70\x6C\x59\xAF\x18\x0F\x88\x12\xE7\x3C\xFA\xF1\x98\x9A\x5E\x10\x4B"
"\x2B\x15\x09\xB2\x0E\xE9\x3D\x98\xB9\x1C\x13\x2D\x0D\x08\x6D\xB8\x50\x2D\x59\xED\x84\xF0"
"\x68\x80\x40\x73\x7F\x53\xD9\x54\x33\x90\xC4\xD5\x94\x6D\xB8\x45\x6F\x04\xC3\xEF\xDE\x57"
"\x00\xD6\xE5\x3D\x8E\xEB\x04\x0A\xF4\xF7\x4D\x8B\x3A\x0F\xE9\x1C\xA2\xB4\xA9\x0E\xA8\x14"
"\x01\x55\x3D\x3F\x18\x56\xD3\xD1\xEB\x4E\x74\x15\xCF\xA6\x41\x7E\x72\xEE\x85\xF0\x20\xD1"
"\xE8\x20\x11\x17\x86\x5D\x08\x46\x3F\x0C\x38\x5F\x96\xB8\x76\x16\xA9\x56\x1B\x9E\x5A\x43"
"\x3A\x7B\xF4\x5D\xD1\xEA\x35\x2F\x22\x92\x46\x73\x17\x5F\x6F\xC8\xF0\xA3\x53\xB2\x23\x4C"
"\x3A\x25\x33\x78\x40\xEF\x61\x25\x1B\x6E\xA0\xBA\x2B\xA5\x1F\x6A\xBE\x2E\x71\x25\xA9\xC0"
"\x8C\x10\x8A\xAA\xBA\x13\x23\x38\xAA\x3B\x2F\x11\x16\x1E\xE4\x25\xE6\x2D\xA4\x63\x7F\x2D"
"\x5D\x9C\xD1\x64\xCF\xA3\x68\x0F\x92\x69\xCF\xA3\x60\xA7\xA1\x00\x64\x23\x70\xB7\x17\x1E"
"\x02\x00\x71\x67\x23\x72\x87\x0C\x63\x77\xF7\xF6\x8A\x10\x84\x91\x31\xDA\x0A\xC0\x4D\xCC"
"\xF0\x7A\x57\xAD\x0C\xD6\xF7\xD4\xC2\x2F\xFA\xEE\x77\xCC\x2A\xB1\x9E\x68\x96\xD4\x0B\x78"
"\xC9\xC2\xAF\xC4\x3B\xF8\xCD\xD2\x09\x0A\x5F\x78\xC8\x5A\x18\x83\x7F\xF8\xC8\xF2\xA5\x5F"
"\x0A\x11\x87\x9F\xF8\xC6\x0A\x3E\x61\xCC\x78\xD1\x62\xF2\x8E\x47\xAD\x47\x41\x73\x90\x4F"
"\xAD\x54\x41\x72\x92\x37\xAD\x2F\xDA\x29\x35\xCC\x21\x47\x88\x77\x94\x07\x2D\xD9\x23\x32"
"\x75\x87\xF9\x9A\xB7\xF9\x9B\xC7\xF9\x9C\xD7\xF9\x9D\xE7\xF9\x9E\xF7\xF9\x9F\x07\xFA\xA0"
"\x17\xFA\xA1\x27\xFA\xA2\x37\xFA\xA3\x47\xFA\xA4\x57\xFA\xA5\x67\xFA\xA6\x77\xFA\xA7\x87"
"\xFA\xA8\x97\xFA\xA9\xA7\xFA\xAA\xB7\xFA\xAB\xC7\xFA\xAC\xD7\xFA\xAD\xE7\xFA\xAE\xF7\xFA"
"\xAF\x07\xFB\xB0\x17\xFB\xB1\x27\xFB\xB2\x37\xFB\xB3\x47\xFB\xB4\x57\xFB\xB5\x67\xFB\xB6"
"\x77\xFB\xB7\x87\xFB\xB8\x97\xFB\xB9\xA7\xFB\xBA\xB7\xFB\xBB\xC7\xFB\xBC\xD7\xFB\xBD\xE7"
"\xFB\xBE\xF7\xFB\xBF\x07\xFC\xCD\xAA\x01\x35\xC9\x75\x29\x00\x8A\x4D\xB0\xF6\xC0\xFF\x2F"
"\x99\xEF\x89\xA9\x61\x7C\x5B\xB0\x74\x90\x9F\xD4\x9D\x09\x5F\xC5\xB7\xF9\xC9\x9F\x7C\x92"
"\x37\x0C\x80\xEF\x65\x41\xB7\x7C\x7D\xC7\x7C\x7B\x3E\x78\x12\x51\x78\xD6\x1E\xEE\xCF\x87"
"\xF9\xD0\x07\xF0\x7E\xB7\x0B\x83\x1F\x0F\x67\xA8\x94\x39\x47\x7D\xFF\x52\x7D\x45\x3F\x78"
"\x77\xBB\xEF\x8E\x18\x8F\xD2\x9F\xFD\xFA\xAA\x7D\x5E\x9D\xF8\x08\x91\xFD\x6B\x25\x0C\xD6"
"\xE0\xFC\xDE\x8F\x2F\xE5\xD3\x3D\x07\x5A\x3E\x92\xF7\x32\x11\x4B\x72\xE2\x55\xB1\x4D\x92"
"\x83\x9F\x88\xFC\xA9\xEA\x2E\x2A\xE1\x78\xE4\xE7\x7E\xB6\x3A\x33\xF5\xAC\xA3\x57\xCA\x97"
"\xEF\x4F\xB3\x32\x7B\x23\xF5\x4A\xAA\x8A\x6F\xBE\xA7\xEE\x09\x41\xD8\xBD\xE9\xBA\x02\x34"
"\x4B\x05\x40\x12\x96\x97\x9F\x7B\xCE\xD6\xF4\xD3\x0E\x6C\x51\x17\x53\xE5\x5E\x0C\xE7\xFD"
"\x07\x30\xA0\xC0\x7F\xF3\xB6\xC9\x01\x80\x30\xA1\xC2\x85\x0C\x15\x4E\x70\x34\x6F\xA0\x44"
"\x81\xF3\x1C\x4D\x68\x88\x31\xA3\x46\x87\xCE\x06\x9A\x13\xB1\x71\xA3\x97\x89\x24\x07\x7A"
"\x09\xA9\x71\x48\xC4\x92\x2C\x09\x0E\x41\xD9\x70\xC8\xB6\x73\x2D\x25\x6A\xAB\x01\x13\x65"
"\x19\x67\x2B\x6B\x06\x64\x94\x73\x21\x23\x9F\x2C\x81\x06\x4D\x38\x94\x28\x49\xA3\x47\x01"
"\xA8\x94\xC8\xB4\xA9\xD4\xA9\x54\x19\x02\xEA\xC9\xF2\x63\xD5\x84\x0F\xB1\xB6\x3C\xB9\x35"
"\xEC\xD4\xA4\x35\xB5\x8A\x3D\x4B\x55\x84\x39\x89\xB3\xD0\xBA\x7D\x0B\x37\x6E\xC6\x09\x1D"
"\x95\x4E\x6C\x2B\x75\xA4\xCF\x79\x2F\xDD\x3E\xB5\x3B\xD0\xD9\x45\xAA\x74\x01\x03\x8C\x3A"
"\xB5\xB0\x61\xC1\x72\x19\xFE\x0D\x08\x76\xAA\x5E\xC3\x91\xA5\x3E\x36\xCC\x57\xB2\x61\xC8"
"\x61\x6B\x68\xDB\xFC\x0F\x71\x4E\xB2\xA0\x45\xC3\x24\xBD\xD9\x34\xCA\xCB\x87\x1B\xBB\x96"
"\x7A\x4A\xA9\xD9\xAA\x22\x3E\xDB\xAD\xFC\xFA\x2D\xEA\x92\xB3\x73\xBB\x56\xCB\xD6\xB7\xF0"
"\xE1\xC4\x15\x83\xFE\x87\xB7\xE9\xE4\x96\x99\xFD\x7A\x05\xCC\x98\xEA\xAC\xD2\x61\xA7\x83"
"\x4E\x9E\x1B\x35\x76\xE5\xA0\x71\x1F\x65\x6D\xB7\x39\x77\xD0\xE2\xA5\x02\xA7\x2E\x75\x37"
"\x60\xD5\x21\xD5\xDB\x65\xBF\x11\x3C\x7C\xE2\xAF\x97\x97\x05\x59\xD5\xB8\x52\xEF\xF4\xA9"
"\xBA\x97\xD8\x5B\x7F\x68\x9D\x27\xD0\x76\x02\x1E\x88\xE0\x51\xFA\x6D\x66\x20\x4C\xF6\x95"
"\x54\x9E\x58\xE0\xD9\x15\x9D\x65\xCF\x11\x35\x5F\x48\x13\x12\x15\x61\x63\xFA\x05\x18\xD4"
"\x83\x44\xF1\x97\xD3\x86\x7B\xF5\x35\xDE\x75\x55\x59\x87\x5E\x53\xFF\x61\x38\xD6\x71\xAD"
"\x59\x08\x55\x82\xC2\x2D\xD8\x12\x88\x47\x89\x58\x13\x89\x36\xA2\xF4\xA2\x40\x3A\xFE\xD8"
"\x14\x81\x01\x35\x48\x64\x92\x3F\xE2\x08\x18\x92\x21\xF1\x28\x51\x87\x5B\x99\xE8\x53\x85"
"\x2E\x1E\x97\xE1\x46\x41\xD6\x94\xE5\x59\x97\xF9\xF8\x64\x77\x55\x51\xC9\x1C\x8A\x3B\xCA"
"\x38\x64\x48\x46\x1A\xD6\x25\x43\x5B\xB6\xD4\xA6\x50\x32\x86\x36\x95\x7C\x4A\x36\xB6\x66"
"\x8E\xF8\x49\xB7\x19\x98\x77\xBA\x49\x54\x9A\x7F\x6E\x94\xA7\x93\x83\x1E\x9A\x1B\x93\x76"
"\x19\xAA\x11\x94\x03\x49\x39\xE6\x85\x4A\x59\x79\x14\x8B\x14\x09\x43\x07\x1D\xB6\x6C\xEA"
"\xCC\x36\xDB\xF4\x14\x67\x43\x96\x0A\x84\xA9\x19\xA6\xD2\x21\x0C\x49\x8C\xEA\xE6\xA9\xA7"
"\xA7\x50\xE5\x28\x4B\x7E\xC6\x27\xE9\x89\x9A\x05\xD4\xEA\xA6\x9B\x3A\x62\x86\x23\xB6\x3D"
"\x6A\x66\x88\x73\x86\x8A\xD4\xB0\x31\xCA\x48\x2C\x42\x76\x22\x8A\x16\x78\xF3\x94\xA1\x03"
"\x12\xA6\x9A\x9A\x8A\x2D\xA9\xEC\x29\x15\x93\xDA\xD0\x31\x6D\xB7\xD3\x9A\xC0\xAC\x96\x81"
"\x62\x1B\x2E\xA1\x6B\x0D\xB4\x6A\xB9\xEA\x0A\xB7\xE1\xAC\xED\x4D\xE4\x6E\x9D\xCF\x25\x2B"
"\xD5\xA8\x2E\x25\x5A\x97\x49\x0D\x89\x98\x2E\x4A\x26\xE8\x00\x70\xC0\x02\x83\xEB\x96\x88"
"\xF4\xC2\x25\x22\xA5\x71\xD9\xFB\x4F\xBC\x80\x4A\xE4\x0C\x4E\xAE\xA9\xE7\xB0\x7F\xF0\xE6"
"\xB6\xEC\xBA\x54\x65\x0C\x57\x9E\x0A\x6B\x1C\xD4\x6E\x90\x26\x2A\xB0\x0E\x04\x87\x55\xA8"
"\x43\x03\x2B\x29\x45\xAB\x2E\x6F\x92\xD1\x29\x2E\xB7\x1A\xAC\x58\x52\xD4\x9C\xD0\x26\x12"
"\xBF\x96\xE7\x8C\x5B\x51\xDC\x18\xC7\x1E\xE6\x1B\x90\xA0\x67\xE1\xA8\x63\xCA\x55\xD5\x50"
"\x0B\x51\xB5\xEC\xBC\x95\xC1\x44\x32\x79\x70\xC8\x17\xA7\x77\xF5\xC4\x59\x37\x06\xF4\x6B"
"\x42\xC7\x35\x44\xA7\x33\xF3\x07\xC8\xCC\xDB\x38\x83\x73\x50\xE0\x55\x7C\x94\xC7\x83\x05"
"\x2D\xB6\xCB\x80\x34\x54\xF6\xCC\x68\x87\x25\x72\xDA\x68\x5D\x21\x88\x2D\xC2\x78\xCA\xD2"
"\x3C\xA7\xBC\x3D\x95\xC7\x9C\xF0\x34\x91\xE0\x84\x1F\x98\x67\xD2\xE7\x0A\xF4\x71\xA4\xF3"
"\x1C\x04\xE8\xC8\x47\x13\x5D\xE0\x59\x5D\x83\x3D\xAF\x6F\x48\x93\x1B\xD7\xE7\x0D\x29\x2D"
"\x6F\x78\x6C\x63\x24\xF5\x8F\xE0\x19\xAD\xF9\xD6\x56\x03\x9B\x9D\xEB\x71\x6D\x1E\x74\xE7"
"\x5E\x3F\xC7\x5F\xDE\x53\xE2\x3E\x34\x80\xA0\xBF\xF5\x35\x00\xBA\xFF\x1C\xA5\xDE\x62\x29"
"\xCA\x1B\xD4\x45\x3E\x6E\x97\x39\xCA\x0B\x48\x7B\x42\xA9\x37\x0B\xEA\x42\x93\x59\x5E\x1D"
"\x49\x91\x5F\x29\xD1\xE9\x25\xDA\xFE\x9A\xE8\xE1\x63\xFE\x8F\xE3\xC1\x15\xCE\x3C\x87\xC6"
"\x3B\x38\x51\xD5\x68\x31\xDC\x2F\xDE\xB2\x9F\x56\x7C\xEC\xDD\xDB\xAF\xEF\xED\x35\xEA\x9F"
"\xBF\x9C\xB0\x47\x7A\xBF\xC6\x30\x6C\x1E\xC2\x70\xC4\x15\x4E\xE6\x9C\xFD\xF9\x8F\x22\xEB"
"\x03\x52\xFD\x7A\x07\x9D\xC5\x05\xA5\x67\x55\x92\x20\x7D\xC0\xD3\x20\x7B\x61\xAF\x6D\xE9"
"\x7B\x95\xB2\xB0\x32\x39\xB9\xB8\x87\x75\xA3\x99\x9F\x97\xC0\xE7\x1A\xF1\x01\x00\x60\xDE"
"\xD2\xC1\xF1\xC8\x67\x3E\x74\x59\x8C\x41\x61\x99\x1E\x82\xF2\xB4\xC1\xD6\x05\x90\x7B\x0C"
"\xC4\x9F\x40\xBC\x77\x94\xE8\x71\x4E\x81\xB5\xDB\xA1\x42\x86\xB7\x31\xDE\x35\x26\x56\x00"
"\x99\x87\x33\x52\x71\x85\x13\x12\xB1\x58\xFF\xAB\x0A\x12\x43\x47\x3E\x9F\x00\x11\x00\x14"
"\xD4\xA2\x8D\x70\x44\x29\xB7\xA1\x05\x8C\x17\xC9\x93\xFB\x50\x47\x92\x1C\x96\xD0\x88\xC0"
"\x7B\xCE\x26\x4A\x06\x47\x17\x86\x05\x47\x04\xDC\x46\x4B\x6A\x61\xC1\x9C\xA8\x50\x21\xA4"
"\x53\x50\x16\x7D\x42\xC2\x46\x4D\xA4\x16\xDE\x9A\xD6\x15\xF2\x08\x17\xF5\x6C\xCF\x2D\x48"
"\xF8\x55\x40\xD4\xF8\xB0\x1E\xBE\x46\x3D\x72\x88\xE3\xCA\x88\xC7\xC6\x21\x0E\xE4\x8C\x1A"
"\x52\xE2\x02\x1F\xD9\x40\x8C\x4C\xC0\x54\x10\x91\xC8\x26\xBC\x75\x48\xB7\xC4\xC6\x2E\x4F"
"\xDB\xDD\x14\x11\x72\xC5\x63\x49\x52\x2E\xC8\x63\x49\xFC\x18\xD2\xC5\x9A\xDC\x52\x84\x0F"
"\x94\x9E\x09\xA7\x62\x2F\xAD\xF4\x91\x7A\x24\xD9\x22\x46\x84\x48\x4C\xCA\xCC\xF1\x8F\x80"
"\xFC\x1D\x4C\xE8\x88\xB3\x61\xE6\x24\x4F\xDA\x40\x82\xC0\x90\x40\x3E\x48\xA2\x11\x30\xE7"
"\xA0\x1C\x04\xFB\x27\x17\xA6\x49\x2A\x90\x91\x04\xA5\x0F\x65\xE3\xCC\x35\x82\x53\x2E\xC1"
"\x6B\x63\x26\x85\xD7\xCB\xEF\xD4\xCA\x77\x6F\x59\xA5\x52\xB4\xE9\x18\x14\x52\x71\x96\x33"
"\xE4\x27\x5C\x0A\x73\x0E\x4F\x6D\x8A\x13\xDD\xDA\xC4\x44\x16\xA9\x91\x9E\x15\x44\x57\xB6"
"\xC8\x22\x42\x73\x63\xC6\x85\x04\x33\x9D\x3C\x2C\x1A\x48\xC8\xD8\xB1\xF4\xFD\x24\x91\xBF"
"\x0C\x0B\x99\x8A\xB9\x4C\x19\x3D\x54\x94\x7F\x9C\x59\xAD\x76\x99\x90\xB5\x31\xE4\x41\xF8"
"\x5C\x29\x68\x3C\x28\x17\x11\x91\x53\x41\xA5\xB4\x65\x3F\xCD\x39\xC9\xCD\xCC\xB4\x21\x6F"
"\xA2\x27\x00\x37\x89\x31\x4F\x1E\x31\x9E\x6A\x9B\xA7\x47\x28\x5A\x51\x74\x26\xF1\x95\xF0"
"\xAC\xE2\x4D\x9B\x18\xCA\xD7\xD8\x6B\xA4\xA3\xD3\xA8\x81\x30\x6A\xA3\xA9\xBE\x0D\x47\x28"
"\xCD\xC8\xF0\x26\xFA\xCF\x3F\x76\xF5\x5D\xEF\x94\xA2\x32\xB7\x52\x4B\x2F\x02\x73\x4E\x63"
"\x55\xA9\xF5\x88\x9A\xA2\xB3\x86\xB5\x7D\xFF\x2C\x83\x23\x79\x83\x54\x8D\xC4\x72\x76\x3A"
"\xCD\xAB\xB8\x0C\xB3\xD3\x7C\x32\xD5\x9D\xEB\x84\x25\x5C\x61\xF2\x51\x8B\x26\x93\x4D\x4B"
"\x05\x6A\x39\xA1\x2A\x3F\xA7\x1E\x48\xAB\xE8\x3B\x9F\x44\x21\x86\xC8\xE1\xB0\x14\x45\xAC"
"\x69\xE9\x36\xF3\xB7\x57\xB1\x30\xEC\x1F\x54\x0D\x62\x47\x5D\x29\x57\xC2\x30\x93\x28\x63"
"\x05\x00\x13\x5B\xD2\x56\xA1\x22\x64\xB3\x51\x3B\x4E\x69\x8B\x7A\x58\x4C\xD6\xE4\x26\x56"
"\xCC\xAD\x5B\x7A\x7A\x54\xDD\x36\xCF\xAF\x29\xD1\xA7\x26\x7F\xC8\x53\xDF\xD2\x4A\xA9\x67"
"\x61\x18\x21\x53\xE1\x0C\x9A\x68\x2F\xB3\xC5\x65\x6A\x68\x4D\x2B\x59\x5A\x5E\xA1\x90\xD3"
"\x22\xDF\x6D\xF9\x68\x55\x51\x61\x76\x49\xE4\x63\xCA\x6E\xBE\x8B\x91\x65\xC9\x41\xB9\x4F"
"\x55\x2C\x5F\xCB\x2A\x21\xA3\x82\x14\xAD\xCC\x14\xE8\xA6\x84\x71\xA1\xD6\xA6\x15\xB6\xA5"
"\x7B\x94\xD9\x9E\xE3\x59\x85\xBC\x36\x8D\x51\xAD\xD4\x5D\xDE\x1B\x38\x8B\x08\x17\xB2\x39"
"\x05\x2C\x71\xBD\xDA\x57\xD4\x0A\x84\x93\xCB\x2D\x6C\x53\xFD\xF9\x3D\xE6\x86\x34\x30\x8B"
"\xAB\x81\x77\xA9\x9B\x91\xE0\x5D\xF7\x75\x18\x7E\x8B\x67\x16\x03\x62\x8C\x48\x13\x00\x94"
"\xFD\xD1\x79\x2F\x82\x23\x4E\x2A\x4D\x44\xC6\xCC\x08\x8F\x02\xEC\x40\xF8\x7A\x14\xC0\x66"
"\x33\x5B\x8D\x01\xB0\xC7\x94\x3E\xA7\xB5\x5C\xBC\xEB\xA2\xFA\x8B\x99\x02\xA7\x97\xA1\x4C"
"\x66\xA8\x91\x01\xF2\x63\x5C\x6A\xB4\x61\x08\x1E\x24\x12\x74\x58\x62\xDD\x24\xAE\xC7\x2E"
"\x73\xC6\x83\x8F\x19\xE1\x9F\x4E\x38\xA8\xEF\x1C\xF1\x46\x46\xD9\x2B\x37\xA2\x32\xC5\x28"
"\x11\x23\x47\xC6\x4B\x23\xC7\x7E\x92\xC1\xBD\xCD\x6E\xC1\xE4\x7B\x50\x36\x4B\xD9\xB2\x0A"
"\x69\xB1\x8D\x3A\xFB\x12\x40\x6F\x18\x72\x17\xA9\x81\x46\x61\x9A\xC0\xD3\x2E\x18\xCA\x45"
"\x94\x73\x0A\x61\xF8\xBB\x15\x07\x65\x02\xA7\xA8\xD5\x39\x84\x91\x8A\x21\x23\x19\x30\x38"
"\x36\xF0\x60\xEB\x1C\x5C\x8E\x42\xAC\x0C\x5A\xB6\x73\xA9\x2D\x7C\xEA\xE1\x4A\x78\xA3\xFC"
"\x43\xEE\x63\xEF\x25\x66\xCE\xC8\xC5\xCD\x5C\xF9\xF0\xA6\x7D\x36\x54\x53\x93\x18\xA7\x71"
"\xC9\x25\x4B\xD0\x8B\x90\x15\xFB\x39\x41\x31\xBE\xF0\x91\xCC\x3A\x66\x63\xD3\xF9\x2C\x14"
"\xA4\x30\x84\x75\xBC\x6A\x5C\x7F\xD3\xBD\x0B\x91\x74\x53\xFE\x55\xB2\xB7\x59\xBB\xC2\x49"
"\x16\x8E\x0D\x5F\x48\xD7\x2A\x2F\x1B\xCB\xBC\xE6\x9A\xA2\x23\x8B\xEA\x44\x27\xDB\x35\x6E"
"\x9D\x33\xAC\x1B\xEB\xEA\x5E\x6B\x94\x52\x58\x6D\x8A\x88\xD9\x9B\xE3\x2C\x8B\x05\xB8\x70"
"\x5E\x1E\x9F\x13\x32\xEC\x04\x3D\xC8\x19\x26\x20\x5F\x94\x67\x7B\x35\x7B\x52\x7B\xD0\x32"
"\x6C\x70\xBA\x77\xFC\x69\xB7\x04\x39\xD8\xE1\x85\x68\xC5\xED\x8D\xE7\xC4\x29\x39\xD6\xD2"
"\xAE\xA1\xC6\x79\xA9\xEB\xF6\x76\x9A\x7E\xD0\xDE\xF7\xB9\xA3\x4D\xA7\x56\xCB\xDA\xDD\x23"
"\x6F\x77\x46\x27\xE2\x4D\x84\xD4\x5B\x9E\xD6\xC5\x37\x59\xF5\x4D\x5F\xDB\xEA\xB9\xDA\x17"
"\xEF\x73\xBF\x6D\xB4\xA6\x79\xCC\xC1\x2B\x81\xD5\xEB\x03\xED\xA5\x8D\x2F\x6B\x64\xB4\xC0"
"\xC6\xEE\xC3\x51\xEE\x6C\x8D\x4C\x9C\x8B\x3D\xC7\x53\xD5\x33\x1C\x98\x26\x6B\x3D\x15\xCF"
"\x63\xA7\x71\xF3\x93\x45\x22\x27\xC9\xCC\xE4\x5E\xB9\xB9\x4B\x0E\x71\x47\x7B\xBD\xCC\x36"
"\xAF\x2E\xCE\x73\x9E\xC6\x27\xD2\xA1\x69\xFF\xC6\xAD\xDA\x0D\x1B\x72\x92\xBF\x5D\xB5\x00"
"\x7A\x5E\xC0\xA7\x79\x75\x16\xFF\x3C\xAB\x12\xB1\x63\xC3\xDD\x02\xD6\x99\xCB\x32\xD4\x0E"
"\x8F\x37\x5C\xDA\xF9\x96\xA9\x6F\x7B\x40\x81\x5F\x8D\x6C\x55\xF7\x75\x78\x3B\x1E\x64\x2C"
"\xDF\x38\xD6\xD0\xBE\x68\x2A\xAB\xBC\xE3\x8F\xBF\xBC\xB2\xDF\x7D\xEB\xA2\xE7\x64\xB4\x35"
"\xC1\xF1\xBD\xF3\x9E\xEF\x72\xBB\x45\xD8\x83\x07\x7C\xDD\x05\xCF\x61\x25\x31\x71\xE4\x0D"
"\x99\x00\x65\x27\x1F\xA6\x8F\xFB\x06\x99\xC8\x66\xF5\xF8\x60\x9E\xDC\xDB\x4F\x5A\x8E\x82"
"\x54\x7E\x27\x41\x8F\x56\x1D\xA4\x58\x3D\x51\x67\x58\xD3\x51\x52\x03\xEE\xEE\x5C\xEF\xEB"
"\x96\xBA\xF4\x17\x6F\x76\x90\x3F\x3D\xBE\x11\x2F\x3E\x40\xB6\x63\x02\xBB\xB6\xDD\xC6\xE5"
"\x4F\xFB\x7A\x38\x5E\x3E\x2B\x00\x4C\x5A\xA9\x90\x2E\xEC\x6F\x2E\x7B\xCA\xD7\xBD\xE0\xB5"
"\x87\x89\x34\x15\x4F\x6C\xAB\x45\x5A\xDB\xF7\x4C\xB6\x06\x79\x21\xB1\x5F\xFC\x95\x17\xEA"
"\x43\x58\xA0\x71\x7D\xA3\xA5\x0D\x4C\xF6\x64\xC8\xB1\x15\x96\x52\x10\xF6\x75\x5F\x4B\x71"
"\x6B\xA4\x65\x4D\x02\x33\x2D\xD5\x62\x0B\xDB\x50\x63\xA8\xE1\x32\x12\x38\x5F\x62\xD1\x33"
"\x51\xF7\x6A\xBC\xE7\x52\x07\xC5\x64\x2E\x73\x77\xDC\x97\x1A\xE0\xC7\x68\xA3\x17\x1E\x9E"
"\xF7\x41\x5B\x36\x13\x81\x83\x83\x08\x91\x7E\x19\x77\x7F\xCF\x66\x17\x88\x16\x67\x9B\x11"
"\x60\x3D\xA5\x7A\x24\xE5\x82\x7E\x63\x78\x79\x56\x59\x85\x37\x33\xD3\x75\x27\x41\xA2\x82"
"\xE0\x75\x3E\x5E\xF0\x1C\x31\x37\x69\x02\xA8\x4B\xB7\xD2\x7A\x3D\x18\x62\x40\xE8\x84\x34"
"\xF8\x7E\x2B\x72\x1C\x40\xE4\x6B\x25\x31\x82\x32\xC2\x82\x78\xC7\x78\xE2\x86\x7A\xE6\x57"
"\x86\x49\xC5\x58\x9F\x37\x7E\xEE\xD7\x6D\xE6\x31\x65\x0C\xA8\x87\xC7\x31\x72\xEA\x37\x84"
"\xF0\x77\x4F\x3D\x88\x84\x4A\x77\x66\x5C\x58\x12\x4D\x97\x86\x25\x51\x85\x28\x97\x7F\xEA"
"\x06\x10\xD1\xF1\x20\xF4\x92\x80\x36\xB5\x80\xB6\x02\x89\x28\xA6\x79\x9C\x06\x86\x08\xC1"
"\x7A\x7A\xC2\x27\x7D\x12\x7A\x93\x42\x80\x4A\xE8\x7C\x65\x17\x87\xE0\x86\x25\x64\xF8\x1E"
"\x64\x78\x70\x6E\x67\x84\x60\xF8\x89\x65\xF2\x84\xB1\x28\x16\x48\x90\x0A\x4D\xD8\x23\x9B"
"\x78\x83\xAC\xE8\x53\x68\xC1\x6F\xB9\xD7\x87\xB6\x78\x27\xC8\x23\x76\x28\xB1\x1C\x83\x93"
"\x6B\xA4\x57\x80\x6C\xE5\x85\xB4\x98\x89\x11\x64\x86\x2A\x52\x81\x2D\x72\x89\xA9\x65\x87"
"\xA2\x78\x16\x22\xD2\x86\x42\xF8\x88\x1E\xB7\x8A\xD9\x38\x83\xE2\x58\x83\xEC\x26\x86\x41"
"\xB8\x2F\x7E\xD8\x83\x8B\x48\x60\x70\xA1\x03\x66\xC0\x09\xC2\x60\x7F\x87\x87\x71\xEA\xE8"
"\x8B\x6F\x88\x82\x7B\x58\x13\x8A\xA8\x8F\x0A\xF8\x27\x50\xF2\x8A\xCD\x67\x1A\xD3\x11\x42"
"\x7C\x27\x23\x63\x35\x60\xDD\x98\x83\x3A\x07\x76\x9B\x71\x7D\x00\x47\x43\xA3\xF8\x15\x12"
"\xC9\x25\x63\xE4\x50\xA5\xB8\x6B\xE3\x06\x8C\xE1\x48\x87\x73\xE8\x74\x9B\x77\x5C\x79\x78"
"\x8F\x91\x88\x4D\xE8\xC8\x73\xF6\xF8\x68\xFD\x67\x79\xAD\x77\x0A\x3A\x80\x39\x47\x38\x2E"
"\x08\x63\x54\xA7\x60\x05\x5E\xC1\x8F\x9B\xA1\x8C\x83\xD2\x33\x49\x78\x14\x80\x30\x37\xBD"
"\x27\x0C\x9D\x08\x64\x88\x68\x89\x71\xC5\x83\x0D\xE8\x90\x18\xC9\x15\x72\x00\x84\x05\x19"
"\x16\x80\xF0\x37\xF3\xC8\x12\xDD\x74\x16\x4C\x49\x14\x02\x25\x94\x65\xF0\x37\xBA\xB8\x5B"
"\x57\xB6\x58\x20\x29\x6A\x7B\x47\x15\x80\xB8\x17\x02\x45\x6A\xE4\xE8\x91\x19\x59\x8E\x8D"
"\x46\x8C\x54\x61\x95\x51\xD2\x4A\xB8\xF7\x8D\x6A\xD2\x8F\xD0\x38\x6D\x91\x88\x91\x26\xB2"
"\x0D\x50\x04\x91\x62\x99\x7C\xF7\x01\x36\x4F\x56\x11\x30\x86\x39\x37\x79\x4F\xB5\xE0\x95"
"\x9C\xA7\x98\x8B\xC9\x98\xF9\xB1\x5D\xDC\x65\x48\x4A\x89\x12\x13\x30\x7F\x85\x94\x4A\x6F"
"\x61\x02\x96\x19\x30\xBE\x11\x30\x8F\xE9\x2D\x48\x20\x99\x8D\xF9\x4F\xD2\x52\x48\x01\x13"
"\x9A\xA2\x89\x9A\x0B\x91\x99\x86\x84\x40\xA9\xD9\x14\x00\x88\x58\x99\xE7\x9A\x0C\xB1\x9A"
"\xA6\x02\x9A\xB3\x89\x9B\xB9\xA9\x9B\xBB\xC9\x9B\xBD\xE9\x9B\xBF\x09\x9C\xC1\x39\x16\x9E"
"\xE2\x0C\x03\xD5\x2D\x57\x00\x30\x0A\x17\x10\x4D\x77\x80\xC2\xE9\x9C\xCF\x09\x9D\xD1\x29"
"\x9D\xD3\x49\x9D\xD5\x69\x9D\xBA\x19\x8C\x84\xB6\x81\x8D\x78\x9D\xDD\xE9\x9D\xDF\x09\x9E"
"\xE1\x29\x9E\xE3\x49\x9E\xE1\x92\x9D\xC6\x57\x8F\x31\x58\x9E\xEB\xC9\x9E\xED\xE9\x9E\xEF"
"\x09\x9F\xF1\x29\x9F\xA7\xC7\x87\x45\x88\x9E\xF3\x89\x9F\xF9\xA9\x9F\xFB\xC9\x9F\xFD\xE9"
"\x9F\xD0\x63\x8D\xE9\xD9\x7D\xFF\x49\xA0\x05\x6A\xA0\x07\x8A\xA0\x09\xDA\x9E\xD9\x39\x0F"
"\x3F\xC9\x8B\xDC\xA9\xA0\x11\x2A\xA1\x13\x4A\xA1\x15\x6A\xA1\x72\x01\x30\x8F\xC9\x09\x0C"
"\x15\x37\xC2\x20\x08\xA7\x89\x66\xDE\xD2\x75\x17\x4A\xA2\x25\x6A\xA2\x27\x8A\xA2\x29\xAA"
"\xA2\x2B\xCA\xA2\x2D\xEA\xA2\x2F\x0A\xA3\x31\x2A\xA3\x33\x4A\xA3\x35\x6A\xA3\x37\x8A\xA3"
"\x39\xAA\xA3\x3B\xCA\xA3\x3D\xEA\xA3\x3F\x0A\xA4\x41\x2A\xA4\x43\x4A\xA4\x45\x6A\xA4\x47"
"\x8A\xA4\x49\xAA\xA4\x4B\xCA\xA4\x4D\xEA\xA4\x4F\x0A\xA5\x51\x2A\xA5\x53\x4A\xA5\x55\x6A"
"\xA5\x57\x8A\xA5\x59\xAA\xA5\x5B\xCA\xA5\x5D\xEA\xA5\x5F\x0A\xA6\x61\x2A\xA6\x63\x4A\xA6"
"\x65\x6A\xA6\x67\x8A\xA6\x69\xAA\xA6\x6B\xCA\xA6\x6D\xEA\xA6\x6F\x0A\xA7\x71\x2A\xA7\x73"
"\x4A\xA7\x75\x6A\xA7\x77\x8A\xA7\x79\xAA\xA7\x7B\xCA\xA7\x7D\xEA\xA7\x7F\x0A\xA8\x81\x2A"
"\xA8\x83\x4A\xA8\x85\x6A\xA8\x87\x8A\xA8\x89\xAA\xA8\x8B\xCA\xA8\x8D\xEA\xA8\x8F\x0A\xA9"
"\x91\x2A\xA9\x93\x4A\xA9\x95\x6A\xA9\x97\x8A\xA9\x99\xAA\xA9\x9B\xCA\xA9\x9D\xEA\xA9\x9F"
"\x0A\xAA\xA1\x2A\xAA\xA3\x4A\xAA\xA5\x6A\xAA\xA7\x8A\xAA\xA9\xAA\xAA\xAB\xCA\xAA\xAD\xEA"
"\xAA\xAF\x0A\xAB\xB1\x2A\xAB\xB3\x4A\xAB\xB5\x6A\xAB\x44\xCA\x94\x5A\x78\xAB\xBB\xCA\xA2"
"\xA3\x72\x8C\xB1\x4A\x16\x01\x29\xAB\x22\xD0\x29\xC2\x60\x0B\x0E\xCA\xAB\xF9\xA9\x1D\xC9"
"\x3A\x99\x44\xA3\x90\xB1\xFA\x18\x0F\x19\x14\x6F\x99\x93\x40\x16\x45\x08\xEA\x08\x4C\xA6"
"\xAB\x70\x41\xAD\x5B\x75\xAD\x46\x8A\x1A\x10\xBA\x10\x72\xC0\x64\x8E\x70\xA7\x13\xB0\x09"
"\x4C\x26\x05\x88\x87\x8F\xCC\x9A\x11\x65\x60\x2A\xEB\x75\x6C\xC3\xF7\x28\x07\xE1\x7B\xFF"
"\x10\x97\x04\x4A\x76\x0B\x16\x42\xF7\x9A\xAF\x43\x6A\x1F\xC2\xFA\x59\x60\xE9\xA3\x48\xD0"
"\x37\x4D\x96\x0A\x66\xD0\x9A\xE2\x37\x97\xFE\x96\x39\xF4\xB1\xAF\x7F\xE2\x72\x31\xB5\x7E"
"\xF9\xC9\x24\x04\x94\x0A\x74\x90\x98\xA5\xD7\x85\x04\x3A\x21\xD2\x1A\x86\x1D\xEB\xA3\x13"
"\xB0\x13\x83\xF8\x16\x3B\x69\x88\xCD\x47\x14\xE7\xE0\x08\x0B\x2B\xA0\x3E\xC1\xB2\xA7\x39"
"\xB1\xAE\x71\x15\xBB\x35\xA2\x72\x38\x80\x1B\x79\x87\xBF\x55\xB1\x44\x32\xB3\x08\xD3\xB3"
"\xF3\x99\x80\xDA\x70\x96\xEC\xBA\x8B\xFF\x89\x3C\xDC\x39\x8B\x6B\xB9\xA3\x89\xE5\x97\xAB"
"\x97\x88\xA7\xE9\x4B\x75\xC8\x8B\xAD\xB7\xAD\x76\x47\xB0\x70\xB1\xB4\x0D\xDB\x90\x1A\xC8"
"\x6C\xE9\xC3\x93\x74\xF8\xAC\x64\xB6\xB3\x55\x41\x5B\x11\xCA\x8E\xF8\x2A\xB5\x14\xB7\x8F"
"\x6B\xDB\x9D\xA4\x41\x40\x65\x6B\x7B\x2D\x01\xB2\x26\xEA\xB4\x4F\x8B\x8C\x03\x91\x69\x03"
"\x6A\xB6\x01\x4A\x73\xDA\xB8\x81\x02\xFB\x97\x31\xA9\xB5\x97\x82\xB7\x7F\xC5\xB7\x5A\x63"
"\x92\x3E\x6B\x7A\x6F\x71\xB6\x0A\x7A\xB7\x39\x7B\x16\xEA\x67\xAF\xCA\x39\xB6\xD4\x19\xB0"
"\x72\x59\x3E\x29\xBB\x11\x94\x0B\x64\x96\x2B\x94\x27\x5A\x89\x8B\x9B\x50\xCC\x03\x14\x70"
"\x1B\xBA\x08\xD7\x96\x2F\x4B\x21\x4A\xF9\xB3\x91\x47\x94\x59\x0B\x2B\xFA\x62\x29\x61\x2B"
"\x64\xED\x7A\x76\x87\x8B\x79\xD0\x37\xBB\xA4\x2B\x9F\x91\x4B\x81\x63\x64\x06\x0A\x71\x62"
"\xA4\x75\xB3\xF3\x69\x24\x46\xA1\x1F\xBF\xCA\x10\xA3\x44\xBC\xB6\x11\x31\x3F\x0A\xBC\x1A"
"\x99\x18\x44\x93\x1C\x96\x52\xB7\x03\x16\x6E\xF6\xD9\x8B\x81\x4B\xB6\x47\x36\x7B\xA6\x2B"
"\x73\xD6\x7B\x39\xED\xA7\xB3\xBA\xFB\x67\x8D\x5B\x30\x41\x2B\x9F\x35\xC0\x84\xB7\xD1\xA3"
"\x65\xC0\x50\xE6\x9A\x10\x22\x00\x82\x9B\x92\xBA\x50\x7A\x9E\xA9\x38\x15\xF2\xAB\x2B\x9B"
"\xB0\x55\xE9\xAA\x2B\x45\xDB\xB7\x0E\x98\x97\xE7\x98\xB8\xB1\xC9\xBB\xCF\x18\x10\xD5\x04"
"\x30\x8E\x30\x86\x67\x01\x08\xF3\xCB\x47\xF7\xCB\x75\xA8\x58\xB7\xB1\x47\xBD\xE1\xE2\x72"
"\xD8\x06\x30\x2E\x7B\x8D\x5C\x3B\x1C\x94\xF9\xC1\x72\xE1\xC1\x96\x04\xC2\x28\xF3\x38\xF3"
"\x40\x07\x82\x90\x2A\x07\x96\x42\x02\x53\x1C\x01\x93\xC2\x8D\x69\x49\x97\xE4\x8E\x37\x5C"
"\xC2\x3D\x0A\x3F\x6E\xDB\x98\xF2\x8A\xBB\x16\x09\xC3\xDC\x2B\x7A\xAE\xF1\xB8\x9A\x8B\x97"
"\xAF\x71\xC2\xCC\xF7\x95\xFC\x2B\x15\x26\xE0\x08\x71\xF3\x5F\xEC\xBB\x10\x0F\x21\xC5\x5C"
"\xE6\x32\x78\xB4\x81\x9B\x90\x8B\x92\xF2\xAF\x21\xAC\x91\x13\xB0\x95\x5D\x76\xBC\x29\x71"
"\xC5\x30\x03\x64\x25\x2B\x11\x5F\x4C\x15\x1E\x36\x29\x65\xEC\xB0\x9B\x8B\x10\x86\xF6\x8B"
"\x6D\x73\xC5\x30\xA5\xC6\x81\x01\xC7\xF1\x71\xC6\x32\x97\xC7\x02\xC1\xC6\x84\x11\xC5\x58"
"\xDC\x63\x5A\x5C\x15\x8D\xA4\x14\x81\x2C\x15\x88\xEC\x34\x7B\x0C\x13\xB8\x48\xC8\x76\xC3"
"\xB9\xB3\xD5\x63\x5E\x56\x6D\x57\xEC\x29\xEB\x0A\x3C\x98\x8C\xAC\xD3\x88\xBE\x76\x6C\x36"
"\x9D\x4C\xC9\x76\x93\xBF\x73\x01\x69\x36\xD8\x5A\xCE\x82\xC5\xCE\xD0\xB2\xE0\xC8\x4F\x7F"
"\xF7\xC4\x66\x50\x2D\x9E\x32\x4F\x44\x2B\xC4\xEA\x39\x69\xCA\x59\x9F\x53\x51\xB3\xD2\x48"
"\xC4\x7B\x61\x4C\x47\xEC\x86\x09\xBC\x92\x90\x03\xC5\xF3\x34\x0F\x3F\x06\xC4\xF7\x74\xB5"
"\x89\xB1\x5D\x1B\xAA\x60\xC3\x0C\x10\xAA\xB7\x26\x04\x57\x53\x69\x64\x4C\xAC\x61\xCD\xC8"
"\x1C\x65\xBD\xDC\xBA\xA0\x66\xB2\x14\xD9\x8E\x70\xA7\x61\xD9\x92\x45\x88\xA1\x1E\xCC\xBB"
"\x10\xCD\x09\xB5\x41\x1C\xBE\x4C\x25\xCC\x0B\x43\xC5\x73\xFB\xB0\xBF\x5C\x13\xD5\x0A\xC6"
"\xA8\x07\xCB\x46\xE9\x13\xCE\xB6\xCF\xED\x2C\x92\x68\x59\x41\x1B\xB8\xCB\x67\x22\x59\x8D"
"\x33\xC9\xD3\xBB\xC1\x0A\x1C\xD0\xB9\x2B\xC2\x2A\xA6\x51\x52\x39\xCE\xF6\xFC\x85\xE2\x1C"
"\xB5\xBD\xDB\xD0\x06\x9D\xD1\x5B\xE8\x60\x28\x37\x1B\x38\x54\xCA\x0A\xC1\xCE\x30\x01\x56"
"\x3C\xA3\x51\xA6\x11\xCF\x85\xEB\xBB\x13\x74\xD2\x55\xEB\x13\x44\x76\xC4\xFF\x2C\x2C\xD8"
"\x28\x72\x9D\xA8\xBD\xF3\xAC\xD0\x92\xCB\xBA\xE0\x9B\xCF\x11\xC2\x30\xD9\x8C\xC0\xF3\x6A"
"\xCE\xC7\xA1\xCE\x46\xB7\xD2\x69\x7B\x8A\xDC\x66\x18\x44\x96\xD3\x4D\x37\xBA\x49\x2D\x75"
"\xB1\x0B\xD5\x46\x0D\x18\xB6\x4B\x7D\x7D\x89\xCB\x50\xD7\x5C\xF3\x4C\xCF\xF7\xA9\xBA\x9F"
"\x1C\x14\x25\xCD\x96\x0B\xFD\x7C\x62\xC2\xC0\xFA\xAC\x92\x1A\xFD\xCD\x78\xC8\xB4\x1C\x4D"
"\x1E\x60\xB8\xBF\x3A\xFD\xB7\x61\xC6\xCF\xE5\x01\x1E\x0F\x99\xD3\x72\x4C\xD1\x80\x99\x1F"
"\x3B\xD1\x13\x05\x51\x9C\x1A\x1B\xB1\x55\x75\x1C\xAA\x97\xD7\x49\x18\xD7\xCC\x19\xD4\xD3"
"\xCC\xB9\x87\xCD\xB9\x4F\xBD\x70\xB5\x68\x4E\xAB\x33\xC9\x4A\xCD\x8C\x4D\xC1\x30\xBC\xF5"
"\x1B\x2D\xDD\x82\x60\xDD\xAC\x11\x1C\x17\xC5\x5B\xCF\x7B\xED\x8F\x75\xDD\x17\x50\x0C\xDA"
"\x18\xDD\xBD\x5A\x2D\xD9\x9C\x58\xBD\x0C\xF9\xCB\x0B\xA5\x2B\x2F\xEC\xCE\x22\xD1\x4B\xD0"
"\xE4\x88\x84\xCB\xCF\x04\x61\xAC\x0C\x85\x5F\x5C\x2D\xDA\xAB\xCD\x41\x28\xB9\xD3\xE5\xEC"
"\xD6\x49\x79\xD6\x04\xD1\x64\xB4\xFD\xC9\xDC\xB8\xDC\xC2\x17\xC7\x14\x11\xC9\x96\xEC\xCA"
"\x99\xF3\xD3\x63\x7D\xD9\x1F\x49\x14\xCE\x50\x06\xA1\x19\x51\x9D\xFD\xD0\xFD\x2B\x29\x9C"
"\x34\xBA\x78\xBD\xD8\x7A\x6D\xDA\x43\xE9\xB5\x1E\x77\x81\xBD\xCD\x2D\xA7\xF2\x64\x51\x06"
"\x7C\x21\x2B\x8C\xCB\x18\xDE\xCD\x0B\x43\x7E\x97\xD6\x96\x5D\xC4\xF6\x4D\xD6\x2A\xCB\x6B"
"\xFC\xC2\xD6\x04\x01\x45\x27\x83\xDB\xF9\xDC\xDF\x53\x2B\xB7\x27\xB9\xBA\x2C\x1D\x25\x50"
"\xC4\x7C\x07\xBE\xD3\xF3\x50\xE0\xB5\x46\xC5\x48\xA3\xDF\xF5\xAD\xDD\xFC\x3B\xD8\x2B\x88"
"\x33\x1D\xBE\xCE\x9A\x76\x23\xD9\x24\x08\x22\x1E\x4E\xF7\x3B\xC0\x38\x5B\xD1\x69\xC1\xD9"
"\x6F\xB5\xD2\x67\xA6\xCB\x91\xFD\xDA\x3E\x81\xCF\x44\xEC\x1D\x53\x97\xB7\xB0\xC3\x24\x19"
"\x5C\xCC\xB2\xAB\x47\xB6\x66\xE3\x83\xFB\xDF\x19\x41\x7B\x1A\x8E\xB5\xE1\x27\xCD\x4E\x1C"
"\x7C\x92\x84\xD0\x03\x9E\x3B\x54\x9C\xD2\xAF\xAB\xC1\xC2\xED\xE0\x31\x98\xD2\x3D\x8E\xE4"
"\xA7\x17\x60\x45\xAE\x9D\xE4\xA8\x23\x57\x8E\x7F\x8C\x9D\x8E\x2B\x2D\xE5\x21\x09\x21\x21"
"\xDD\x1F\x5B\x0B\xDD\xD1\x4D\x7A\x60\xDE\xC6\x13\xA8\xE4\x7E\xB4\x17\xD1\xCC\x8B\x4F\xBE"
"\xD2\xB4\xA5\x28\x54\xE9\x1B\x65\xFE\xE3\xFB\x0D\x8B\x59\x0E\xE2\x56\x48\x8F\x58\xBD\x9C"
"\x07\xCC\x76\x77\x3E\x11\x01\xF5\x29\xDB\x0B\x7F\x76\xDE\xDC\x87\xC5\xE7\xA6\x4C\xDC\xC3"
"\x6D\xE5\x54\xFC\xB3\x81\x5E\xBF\x81\x27\xD3\x54\x2D\xE3\xAE\x45\xC5\xBB\xF1\xE5\x96\xFE"
"\x1C\x0E\x1C\x47\x35\xDC\x5E\x8C\xCE\x98\x48\xDD\xE5\x6C\x9E\x72\x2E\xEE\xD9\x0D\xF1\x96"
"\x6B\x4E\xCE\x36\xDB\xE8\x42\x1E\xE7\x00\x0E\x59\xB5\x34\x0B\x6B\x4B\x9A\xDC\x75\xCD\x59"
"\xFE\x9A\xA7\x1C\xE4\x1E\xDE\xDA\xC1\x7B\x59\x46\x8E\x75\x60\x89\xE9\x5F\xBD\xDD\x52\x7B"
"\xE9\x50\x0E\xE9\xEA\x6B\x2E\x24\x01\x38\x47\x39\x8C\x89\xEB\xE6\x7F\xDE\xD6\x5A\xBE\x8E"
"\x9A\xEE\xE7\xDE\x28\xE6\xE0\x3D\xE4\x60\x86\xBB\xD9\x4E\xE4\x75\x39\x48\x8E\xEC\x7F\x75"
"\xC9\xE3\xE9\xC5\xC9\x6E\x11\xDC\xE1\xCC\xEA\x28\xCD\xD5\x55\x1C\xE3\x0D\xAC\xEE\x9F\x6D"
"\xDC\x47\xBE\xED\xCB\xEE\xE9\x3A\x2E\x80\xEE\xD3\x15\x34\xBD\x56\xB5\xAD\xED\x09\x9E\xE4"
"\x5B\xEE\xED\xC8\xCE\xD0\xCA\x0E\xED\xF0\x4B\x7E\x16\xE6\xEF\x51\x2E\xED\x07\xBF\xEB\xAA"
"\x69\x50\x47\xDD\xE2\x02\x26\xEA\x87\xFE\xC9\x5C\x5E\xE8\x34\x18\xEA\x2B\x0D\xEA\xBF\x63"
"\xEE\xA6\xE8\xDA\x68\x11\x2B\x82\x1B\xE2\xE6\x7B\x14\x90\x2C\x86\xF4\xF2\xDD\xAE\x7E\xDF"
"\xF1\x01\xE7\xFF\x50\xE3\x0C\xD7\xCF\x75\x6E\xEB\x01\x86\xE7\xD9\xAA\x2B\xCF\x91\x84\x90"
"\x0D\xEC\x98\x5D\xC7\xFC\x8E\xF0\xDC\x5E\xEC\x19\xF4\xED\xE9\x65\x7A\x13\xAF\x6A\x11\xEF"
"\xF0\x88\x6E\x67\x91\xEE\xF4\x1E\x5F\xF3\x82\x8E\xED\x1D\x2F\xF1\x54\x0C\xF2\x49\xEC\xE5"
"\x26\xFF\xE9\x47\xCF\xEC\xE3\x3E\xB0\x51\xAF\x8A\xA9\x0D\x17\x26\x90\xF1\x59\x3D\x6B\x95"
"\x47\x97\xF0\x5C\xEF\x49\x4E\x11\xCD\xDC\x18\x74\x6C\xF0\xF4\x3D\xF5\x8F\x6E\x67\x27\x4F"
"\xEE\x80\x5B\x8D\x79\x7F\xF5\x5D\xAF\xF1\xB7\xB7\xE9\x7A\x0F\xE8\x0F\xAF\x14\xCC\xFB\xEC"
"\x54\x5F\x62\x56\x1F\x13\x4F\xEF\xF5\x1B\xAF\xE0\x59\x7F\xBB\x84\xFF\xF1\x0B\xBF\xEA\x1B"
"\x3E\xF2\x9F\x5C\xF2\x63\xEE\xD9\x6A\x3E\xD5\x0D\x3F\xF7\xA2\xE4\x08\x12\xED\xD5\x16\x37"
"\xFA\x7B\x56\xE9\x2F\x3E\xC7\xAB\x15\xBD\x02\x42\x63\xDE\x4B\xEC\x3D\x8D\x33\x90\xCF\xFA"
"\x80\x6F\x90\x42\xD2\xD8\x92\x5F\xF8\x83\xEE\x89\x4D\x1F\xF9\x58\x6F\xF6\xE2\xBE\xE2\x28"
"\xE7\xE8\x96\x5F\xF6\xFC\x8B\xFB\x2D\x8F\xF9\xCA\x4F\x75\x72\x4F\xE6\xBE\x9F\xF9\x86\x2F"
"\xFC\xAF\xD6\xF9\xD0\xFF\xF9\xC6\xDF\x69\x94\x86\xDC\x3A\x7F\xFD\x8F\x7C\xF3\xD9\xFD\xF6"
"\xAB\xCF\xE0\x5B\xEF\xFA\xB1\x8E\xEA\x17\x24\x9B\xFC\x9D\xFC\xC5\x4F\xF3\xD4\xDB\xFC\x1C"
"\x7F\x86\x69\x1F\xF2\xC3\xDE\x79\x4B\x2F\x5E\x0C\x8F\xE5\xFD\xAE\xF8\x38\xE5\xE5\x5F\x40"
"\x81\xFF\x66\x01\x30\x78\x10\x61\x42\x85\x08\x87\xCC\x1B\x18\xD0\xCB\x42\x46\x0F\xFF\xCD"
"\x1B\xB2\x10\x63\x42\x80\x0F\x2D\x2E\x6C\x48\x31\x62\x46\x91\x1F\x1F\x86\x4C\x38\x91\xE3"
"\x45\x91\x19\x45\x98\xA3\xC8\x68\xE1\xC6\x81\x1D\x57\x62\x24\x39\xD0\x24\x42\x94\x33\x55"
"\xD6\x54\xD8\x92\x62\x41\x85\xB3\x28\x3A\x9B\xE0\x53\x22\x45\x73\x22\x62\x52\xA4\x89\x54"
"\xA7\x52\xA6\x0A\x65\x0A\x7C\x0A\x55\xE1\x04\x3A\xB6\xB8\x76\xF5\xAA\x4D\x2A\xD6\x8C\x3B"
"\x29\x0E\x84\x29\x36\xE3\x84\x5A\x65\xCB\x9E\x45\xFB\xF6\x20\xD0\x87\x42\xD1\xCA\x35\xDB"
"\x34\x25\xDC\x09\xA7\xD8\x06\xD4\xD6\x13\x6E\xE0\x83\x37\x05\xBA\x15\x4B\x18\x62\xD2\xBC"
"\x6F\xAB\x06\xBC\x3A\xD8\x61\x49\xB8\x8D\x03\x1A\x36\x88\xF8\x5F\xCE\xC0\x13\x9C\x15\x3D"
"\xFA\x16\xB3\x66\x83\x64\x1D\x03\xC6\x6A\x57\xA0\xD1\xA1\x9E\xE1\x86\x56\xCC\x73\xB2\x53"
"\x95\x9C\x65\x0B\xBE\x1C\x19\xE7\x6B\xAB\xA6\xA1\x52\x7E\x7C\x1B\x64\x6B\xDC\x02\x45\x03"
"\x20\x5D\x91\x37\x52\xD4\x95\xF1\xC2\x06\x3D\x3C\xB1\xC2\xE3\xBF\x95\xBB\x9C\xBB\x90\xE8"
"\x43\xD5\x6F\x8F\x2F\x6D\xBE\x1B\x6E\xF7\xA9\x1A\x6B\xDB\xAE\x39\x3D\xF9\x61\xE8\x6C\xBD"
"\x9B\xA7\xDD\x77\x60\xAD\x1A\xE6\xEB\x5A\x1F\x48\x57\xEC\xF2\x7F\x96\x0D\xFA\x4E\x5F\x13"
"\x33\x81\x4E\xF9\x8C\xBE\xC0\x30\xE3\x0F\x29\xD7\xA4\x2B\x0F\x2D\xFF\x3C\x5A\xAF\x38\x9F"
"\xD0\x53\x48\x41\xDB\xF4\xC3\x4F\xBD\xA0\x12\x32\xA1\x0C\xB0\x16\x43\xEB\xBD\x87\xCE\xE1"
"\x4A\x98\x6D\xCE\x61\x6B\x3B\xB4\x2A\x8C\xEA\x43\xB1\x1C\x04\x4E\x3B\x02\x85\x0B\x6E\xC1"
"\x16\xB1\xA2\x2C\xB3\xEF\x88\x9B\xF1\x21\x04\x27\x7C\x4B\x3F\x04\x5F\x54\x11\x42\xEC\x18"
"\xCC\xCF\x3E\x81\x30\x34\x28\xBB\x81\x52\x14\xEB\x47\xF2\x6C\x84\x2A\x4A\x84\x86\x2C\x50"
"\xB7\xD2\xCC\x6B\x72\x20\x5B\xCA\x5A\x92\x3B\xF8\x02\x72\xA6\x0C\x2C\x0F\xD2\x41\xC6\x8C"
"\x70\x04\xD3\xA7\x0B\x13\x9A\xA0\x0C\x61\x8E\xC4\x2A\xC0\x79\xE4\x30\x33\x2B\x34\x25\x6C"
"\x8B\xC7\xDC\x56\x9B\x12\xA9\x2B\x0F\xC2\x31\xC2\xF3\xE6\x9C\x40\x8E\x22\xCD\x3B\xD0\xC0"
"\xF5\x2A\xDA\xC6\x44\xF8\xA8\x43\x8A\x4B\x31\x59\x7B\x8E\xC6\x93\xE6\xEC\xED\xC8\x4A\xA3"
"\x6B\x34\x53\x16\x9D\x6B\xB0\x2C\x6D\xE8\x30\x03\x55\x54\xE9\xF0\x50\x32\x20\x93\x74\xCC"
"\x91\x54\x51\x75\x64\xBD\xF6\xEA\x7B\x49\x47\xE4\xFA\xB4\x0A\xD2\x5E\xB7\x71\xD4\x56\xB1"
"\x42\x1C\x68\x93\x54\xE9\x48\x45\xCE\x4B\xD1\x3A\xEE\x1F\x53\x65\x35\x83\xD6\x4D\x91\x62"
"\xD6\x59\x59\xA3\x05\x94\xD2\x7F\x7A\xED\x2A\x95\x67\xAF\x1D\x28\x58\xC6\xBE\x04\xC0\xD3"
"\x1C\x05\xD3\x4F\xA0\x73\xE4\x48\xB3\xC0\xC6\xCE\xE9\x55\x18\xAF\x92\xC5\xD5\xD5\xB2\xE6"
"\x81\xF4\xC4\xBE\x26\x05\xD0\x51\x4B\xB5\x0C\x73\x20\x5F\xBD\xB2\x85\xD5\x56\x89\x74\xCA"
"\x57\x48\x81\x1D\xCF\x45\x06\x91\x50\xB5\xE0\x1D\xC5\x75\xAA\x2B\x67\xFA\x35\xD7\x36\x41"
"\x4F\x7B\xD5\x5F\xF0\x62\xEB\x58\xD9\x0C\x0D\x16\xD5\x63\x52\x5B\xC4\xEC\xC9\x83\x47\x3E"
"\xA8\x4A\x3A\x2F\xB6\x74\xDF\x95\xD0\xED\x38\x65\xA8\x82\xCC\x35\xE6\x91\x5E\x16\xB3\x66"
"\xA4\x86\x05\x79\x4C\x76\x03\x05\x3A\xAC\x89\x89\x16\x28\x5C\xAC\xCA\xED\x38\xE9\x8D\x6B"
"\xC3\xAC\x69\xA8\x30\x9B\xC7\x11\x13\xF0\x94\xF2\x68\x89\x6F\xCD\x5A\x57\x4C\xB9\xCE\x79"
"\x2C\xAE\xFF\x55\x39\xEB\x9E\x7D\x1A\x72\xE9\xB1\x1B\x16\xBB\x50\xAC\xC4\x13\x2C\x6D\x98"
"\xFF\xAB\xE9\x67\x90\xCD\xE6\x37\x54\x96\xA5\x3D\x7B\x4E\x66\xDB\xC6\x7B\xE5\xD1\xF6\xA6"
"\xBB\x33\xAE\xEF\xAE\x29\x6E\x31\xD9\x6C\x93\x63\x21\x07\x5F\x29\xC0\x8E\x11\xA4\x52\xEC"
"\xC3\x45\x9A\xD9\xDF\xC5\x6B\xC2\xDC\x52\xCD\x11\x17\xDB\xF3\xCF\xE9\x25\x97\xCF\xC0\x08"
"\xBD\x9A\x2A\xB1\xFF\x89\xDA\xA7\xC4\x25\x9D\x5B\x67\xB1\xC1\xC6\x88\x59\xBB\x85\xF6\x29"
"\x72\x7F\x27\xE7\xFB\xC3\xB8\x2D\x67\x89\x63\x90\xFF\xCE\xF6\x3A\xC1\x70\xEC\x78\x76\x96"
"\x22\xA6\xF9\x76\xC0\xFD\xD4\x14\xDB\x9A\x04\xD5\x8F\x75\xE7\xB5\x26\x59\xED\xB5\xB3\x1E"
"\x3E\xF6\xA3\x93\x5F\xE8\xE6\xD4\xA3\x87\x7C\xE7\xBE\x7E\xBF\x3C\x78\x7F\xCF\xA7\xFD\x6B"
"\xD8\x57\xAA\x5D\x6E\xB8\xDB\x17\x0C\xEA\xF1\xF4\xFB\x5E\xFC\xC0\xAF\x3E\x5E\x72\xFA\xCB"
"\x67\x0B\x7F\x0C\xF9\x1F\x00\xDD\xC7\x3E\xB6\x81\xAA\x6C\xCD\x93\x1E\x83\xE2\xB6\xBB\x3D"
"\x71\x8D\x7B\x32\x6B\x9C\x79\xE0\x97\x1A\x24\x14\xAE\x64\x7A\xF9\x56\xC0\x6C\x41\x07\x0C"
"\xA6\x46\x81\xDD\x7B\x1E\xF6\xBA\x66\xB2\x51\xE9\x6D\x74\x64\xBB\x1E\x0A\x4F\x88\x16\xBE"
"\x1C\xED\x14\xE6\x91\xC3\xF6\xCE\x35\xC1\xFC\x65\xD0\x65\x09\x34\x8F\x17\x06\x18\xA3\xCD"
"\xB8\xAE\x74\x3F\xCC\x9A\x03\x5B\xC7\x35\x22\xAE\xA4\x6E\xFB\x81\x9E\x0F\x8D\x36\x42\xD4"
"\x01\x80\x7F\x9D\xA3\xA0\xA5\xB4\x71\xC1\xF1\x89\xD0\x7B\x05\xCC\x12\xD0\x8E\x88\x45\xDB"
"\x19\x8F\x81\x7D\x09\x1D\x12\x3F\x58\xAA\x32\x78\x2A\x82\x5E\xAC\x1E\x54\x12\x65\x2F\xF9"
"\x30\xE9\x8A\x58\xD1\xC1\x1C\xD3\xE4\xA9\xF5\x51\x48\x51\x4B\xC4\x21\xA7\xA6\x44\x3D\x86"
"\xE5\x50\x7F\x2D\x43\x4B\x1B\x91\x77\x27\xFA\x0C\x61\x79\x7D\xF9\x8B\x85\x6C\x88\xB5\x3D"
"\x26\xA8\x87\x63\x2A\x53\x81\x10\x09\x1F\x67\xE4\xCB\x49\x21\xAC\x09\x20\x7A\xA8\x8D\x49"
"\x9A\x87\x93\x20\xF3\x24\x28\x4B\x84\x49\x98\x19\x32\x30\xCC\x4A\x19\xBA\xBA\x98\x2B\x8C"
"\x3D\x11\x00\x43\xB0\x85\xC2\x40\xA6\xAE\x02\x95\xC1\x94\xF1\x99\x0F\xE9\x5A\x28\xB5\x48"
"\xC6\x11\x23\x71\x82\x14\xD0\xAA\x68\x9B\xDC\xA1\xE8\x93\xA6\x0B\xA3\x53\x00\x41\x9F\xBD"
"\xA0\x08\x09\xFD\xC9\x1B\xC0\xEE\x63\x26\x13\xC8\xEA\x0A\x56\x83\x25\x54\xEC\xA8\xC9\x6D"
"\x7E\x13\x9C\xE1\x54\xC8\x35\x9F\x55\x4E\x33\x68\xD3\x9A\x57\x30\x27\x36\xBD\x29\x4E\xAF"
"\x39\x11\x9C\xE4\x4C\xD5\x15\x74\x70\x90\x6E\xD2\xE7\x61\xEB\x94\x15\x3A\xB1\x94\x4F\x7D"
"\xA2\x8A\x9F\x78\x9A\xA3\x0E\xFC\xB9\x4F\x77\xA2\x0E\x47\xAD\xBC\x9A\x0E\x66\x18\x1F\x54"
"\x5D\xA1\x9D\x58\x91\xA7\x19\xB2\x79\x50\x8B\x22\x64\xA0\xEA\x2C\x27\x12\x22\xEA\xC5\x57"
"\x5E\xF4\x20\x26\xD0\x81\xAC\xA2\x89\xA7\x82\x06\x14\x75\x75\x4B\x23\x48\x6B\xE2\x08\xAE"
"\x9C\xCA\x0C\x03\xD5\x53\x2C\x39\x76\x47\x96\xDE\x14\xA7\x39\xD5\xE9\x4D\x57\xA4\xD3\x7B"
"\xEE\x14\xA8\x41\xDD\x69\x80\x36\x31\x47\x8D\xA2\x8A\x13\x24\xC2\xD7\x4A\x79\x57\x18\xA1"
"\x3E\x15\xAA\x09\xE9\x69\x54\xA9\xBA\x40\x26\x56\x75\x25\x40\x2C\x8B\x4D\xB1\xDA\x55\xAF"
"\x7E\x15\x9C\x53\xC5\xE9\x4F\xC1\x5A\x56\xB3\x02\x4F\x75\x4C\x35\x54\x35\xCF\xDA\xD6\x27"
"\x8A\xD5\xAD\x50\x45\x63\x5C\xED\x69\x44\xBA\xDE\x15\xAF\x79\xCD\x08\x5C\x59\x4A\x56\xBD"
"\xFE\x15\xA8\x49\x14\x1E\x9E\x2A\x35\x46\xC0\x1E\x96\xAF\x87\xBD\x28\x62\x0C\x8B\x55\xAD"
"\x02\x53\xB1\x91\x95\x2C\x4B\x13\x7B\x51\xBF\x4E\x16\xB3\xE0\x8C\xA2\xA5\xD4\x8A\x44\x99"
"\xEA\x00\xA5\x99\x45\x6C\x1E\x45\x6B\xD1\x4A\x05\x30\xAA\x8F\xBD\x4B\x69\x59\xDB\xDA\xB0"
"\x92\xD6\xA7\x21\x73\xED\x6C\x6D\xF3\x42\x1A\xD2\x16\xB7\xBB\xFA\x54\x6E\xDF\x0A\x1D\x85"
"\x3A\x96\x68\xF3\x68\x26\x6F\x89\x5B\x5C\xDC\xC1\x36\xA7\x97\x35\xEE\x72\x17\x12\xCA\xA3"
"\x75\x96\xB9\xA5\xAD\x6C\x74\xB1\xF2\xB3\xC6\x82\x75\x8E\xAA\xF2\x8A\x33\xE0\x25\x88\x8E"
"\x52\x17\xBC\x92\x9D\x80\x39\x43\x7B\xD3\x82\x3E\x34\xBC\xE9\x3D\xC8\x15\x90\xD5\x2B\x67"
"\x78\x85\x13\x0F\x05\xAD\x7A\xC1\x3B\xDE\x72\x96\x97\xBE\x48\x21\xE4\x3F\xB8\x9A\x5F\xFF"
"\xFE\x17\xC0\x01\x16\xF0\x80\x09\x5C\xE0\x19\x69\xE3\x8F\x06\x56\xF0\x82\x19\xDC\x60\x07"
"\x3F\x18\xC2\x80\x9D\x40\x2A\x12\x1C\x61\x0B\x5F\x18\xC3\x19\xD6\xF0\x86\x39\xDC\x61\x0F"
"\x7F\x18\xC4\x21\x16\xF1\x88\x49\x5C\x62\x13\x9F\x18\xC5\x29\x56\xF1\x8A\x59\xDC\x62\x17"
"\xBF\x18\xC6\x31\x96\xF1\x8C\x69\x5C\x63\x1B\xDF\x18\xC7\x39\xD6\xF1\x8E\x79\xDC\x63\x1F"
"\xFF\x18\xC8\x41\x16\xF2\x90\x89\x5C\x64\x23\x1F\x19\xC9\x49\x56\xF2\x92\x99\xDC\x64\x27"
"\x3F\x19\xCA\x51\x96\xF2\x94\xA9\x5C\x65\x2B\x5F\x19\xCB\x59\xD6\xF2\x96\xB9\xDC\x65\x2F"
"\x7F\x19\xCC\x61\x16\xF3\x98\xC9\x5C\x66\x33\x9F\x19\xCD\x69\x56\xF3\x9A\xD9\xDC\x66\x37"
"\xBF\x19\xCE\x71\x96\xF3\x9C\xE9\x5C\x67\x3B\xDF\x19\xCF\x79\xD6\xF3\x9E\xF9\xDC\x67\x3F"
"\xFF\x19\xD0\x81\x16\xF4\xA0\x09\x5D\x68\x43\x1F\x1A\xD1\x89\x56\xF4\xA2\x19\xDD\x68\x47"
"\x3F\x1A\xD2\x91\x96\xF4\xA4\xF5\x3C\x01\x97\x0E\x4C\x8B\x94\xD6\xF4\xA6\x39\x4D\x99\xEB"
"\x72\x1A\xD4\xA1\x6E\x74\xA5\xD6\x28\x6A\x53\x9F\x1A\xD1\xCB\x81\x2E\xAA\x59\xDD\xEA\x3B"
"\x93\xE6\xD3\xAE\x96\xF5\xAC\x31\x52\x83\x54\x0C\x2C\x15\xF3\xB1\x35\xAE\xBF\x5B\xE4\x61"
"\x95\x9A\xD6\xC1\x16\x36\x64\xF2\x82\x18\x60\x63\xB6\x0C\x03\xE3\xC4\x2E\xA5\x3B\x9C\x55"
"\x0F\x1B\xDA\xA1\x46\x4C\x47\x8C\x5D\x61\x90\x5E\xBA\x2B\xA8\x7C\xA2\x60\x7F\x8B\x96\x50"
"\x52\x8D\x40\x35\x60\xB6\x38\x19\xE1\xAB\x01\x45\x1B\xDD\xE8\x9E\xF6\x45\xAA\xBD\x53\x41"
"\x9A\x09\x7E\xC7\x46\x4B\xA5\x46\x49\x9B\x73\xA7\x1B\xDF\x91\x9D\xC0\x15\x92\x6A\x0B\x41"
"\xCC\x73\xA0\x77\x5E\x77\x2C\xA1\x23\x6F\x58\x06\xA8\xBF\x3E\x2B\xDC\x3C\xAC\x30\xC7\x4D"
"\xAC\xB0\x5D\xBA\xB3\x8D\x56\x13\x9E\xEF\xC5\x16\xDC\xDA\xA8\xD3\x0F\x74\x29\x63\x70\xB3"
"\xDE\x04\xB5\x51\x7D\x26\x67\xED\x3C\xF0\x76\xE3\x54\xB0\x4A\x4C\x69\xE1\xB6\x23\x93\x67"
"\x63\x24\xE5\x8F\x54\x1A\xF3\x2C\xEE\xD5\x72\xC5\x5A\x99\x0F\xF1\x78\x5C\x38\xF6\xF2\xAA"
"\x82\x3C\xD3\x55\x8D\x39\x3C\xE1\x6C\xDF\x67\x1D\xC5\xE8\xF3\xEC\x35\x9E\xC8\x32\x8F\x79"
"\xED\x16\x4B\xEF\xA1\xC9\x4E\x7C\x7E\x43\x31\x6E\x89\xE6\x35\xAF\x2A\xFF\xAA\x4E\xB8\x14"
"\x2E\x4B\xB6\x74\x15\x37\xB1\xC7\x56\x03\xFC\x02\xB7\x63\x5D\x47\x75\x63\x22\xC2\xA5\x9D"
"\x3F\xB0\x2C\x6F\xAF\x49\xA2\x3A\x52\x83\xB5\x0C\x04\xC1\x58\x57\xDF\xD2\xAF\x0C\x88\x81"
"\x39\x22\xB2\x22\x95\xE9\xD9\x6D\x93\xF2\x8A\xDF\xE8\x71\xD6\x2B\xE1\x5D\xED\x7D\x14\xA0"
"\x03\xE0\x99\x87\x67\x29\xE7\xF4\xA7\x75\xD4\x9C\x65\x58\x38\xF7\x7A\x10\xAF\x56\x83\x2B"
"\x20\xA4\x43\x01\xA9\x05\xDF\x13\x42\x71\xD2\xA7\xB8\x06\xCF\x1A\x37\x2C\x61\xFD\xCD\xD4"
"\xCB\x6A\xF5\x57\x5B\x8E\xDC\xD7\xDA\x97\x6E\xBF\xC5\x53\x9A\x47\x48\xEE\xF5\x2A\x13\xAA"
"\x59\x01\x37\x0C\xFF\x96\xDA\xC5\xB9\xD9\xCA\xD7\x3C\xD9\x5D\x01\x7C\x5C\x6E\xDD\x95\xA0"
"\x63\x25\xF9\x5D\x59\x36\x5E\x4D\xEF\x63\xD2\xDC\x9E\x9A\xCC\xD9\xE6\xF5\xBF\x39\xFB\x8C"
"\xFB\x6F\x26\x9C\xD0\xF9\xF7\x17\x85\x5C\x13\xCA\xBC\xAC\x94\x2F\x9A\x60\x00\x51\x28\x39"
"\x0C\x97\x3E\x38\x72\x06\x3D\xF3\x29\x08\xAE\x48\x41\xEB\x69\xF9\xEC\xFE\xC5\x29\xF8\x80"
"\x87\xD3\xFF\xE6\x08\x4F\xEA\x86\xF6\xB0\x6A\xFF\x3E\x4B\xB1\xB8\x4F\xB3\x7A\xE4\x9B\x14"
"\x10\x96\xBC\x0F\x75\x0A\x8B\x97\x94\x64\xFB\xC2\x0E\x44\xCA\x48\xE5\xE8\xAA\x82\x6C\xCF"
"\x36\x50\xA2\x38\x1A\x0A\xFB\x70\xE6\xF9\x00\x6C\x02\xE6\x88\xF0\x64\xCC\xD2\xFE\x67\x94"
"\xCC\xE3\x9A\x6E\x8D\x96\x14\x29\x99\x02\xA3\x05\x67\xE9\x57\xE0\x63\x05\xDD\x03\x03\x0B"
"\xD0\x26\xB8\x2B\x61\x7A\xD0\x07\x9D\x61\x04\x13\x42\x0E\x72\x89\x2D\x6C\xA9\x40\x26\x40"
"\x10\x4A\xC4\x07\x7B\x70\xF4\xE0\x8D\x01\x53\x2A\x09\xF1\x85\x23\x12\xA6\x09\xB1\xC4\x01"
"\x9F\x08\x02\xF1\xA4\x31\xBC\x03\x31\x88\x0F\x21\xC2\x67\x8A\xC6\x0F\x4F\x6A\xC0\xBB\xC4"
"\x29\x05\x41\x06\xDC\x04\x83\x2C\x34\xA3\xA1\xB4\x2F\x63\x12\xAF\xBE\x6A\x81\x0A\x3F\xC3"
"\xEE\x32\xA9\xAB\x26\xEA\x9F\x52\xE5\x04\x19\x0F\x03\xC5\x24\x86\xDE\x90\x68\x42\xD0\x4A"
"\x8E\x46\x10\x11\x82\x00\xC9\xEF\x9D\x80\x26\xE4\x0C\x62\xE8\x28\xE2\xDE\x04\x63\xBF\xF6"
"\xCE\x09\x57\x0B\x4F\x22\xD1\x52\x24\xAF\x46\x9C\x6A\x9B\xB2\x30\xEA\xCA\xC8\x2D\x48\x03"
"\x13\x31\xA2\xE3\x10\xB1\x3A\xA6\xC9\x98\x1C\xE2\x14\xF6\x90\x3E\xEA\xD0\x52\xDE\x48\x0D"
"\x33\xA5\x0D\x35\x11\x8C\x20\x8B\xB9\x7E\x66\x29\xD4\xC2\x02\x85\xCA\xF8\x8E\x4F\xAF\x54"
"\x4B\x16\x3F\x86\x68\x5E\x6E\x17\x4D\x51\x58\x72\x90\x14\x45\x26\xB8\x82\x10\x8E\x08\xB1"
"\x03\x8F\x26\x14\xB1\xA7\x10\x0D\x08\x68\x9E\x91\x85\xDC\x10\x0B\x79\xD0\xBD\x8E\x91\x72"
"\xEC\xD0\x20\x96\x23\x1A\x17\xA2\x6E\x74\xCF\x48\xAE\xEA\x90\x70\xC3\x19\x4A\x0A\x9C\xCA"
"\xE0\x62\xB4\x21\xF6\x54\x68\x47\x62\x11\xFD\x56\x62\x18\xB3\x87\xBA\x7E\x66\x1E\x04\xC1"
"\x51\xA8\x11\x96\xE6\x11\xEA\x0E\x8B\x1F\xC1\x45\x1B\x5D\xE9\x12\x4F\xEF\x1F\x83\xA6\xF0"
"\x8C\xF1\x6A\x8E\x49\x5F\x94\x51\x21\x09\x28\x30\xD4\x2F\x17\xC3\xE3\x09\xB1\x04\x22\xC9"
"\x31\x0C\x7F\x31\xAE\xBA\xD0\x91\x56\x27\x20\x9B\x2A\x1E\xDD\x71\x11\x6D\x02\x3A\x6E\xF0"
"\x89\x58\xB1\x2F\x5C\xD1\x78\x1C\xC5\x4B\xE0\x50\x4D\x14\x51\x19\xB3\xC2\xFE\x38\xE1\xF3"
"\x16\x42\x15\x33\x02\x0F\xF3\x50\x0F\xF5\xA2\x0F\x51\xE4\xF4\xC2\xE9\x1F\xBD\x50\xA8\x7C"
"\x91\xE8\xF8\x28\x19\x67\xB1\x28\x05\xE3\x10\x13\xF2\x97\xE8\x71\x5A\x0E\x48\x22\x9D\xB1"
"\x27\xF5\x28\x03\x0B\x64\x03\x79\x52\x27\x75\xA8\xAC\x24\xF0\x4D\xCA\x48\x1C\xC7\x91\x1B"
"\x8F\x10\x03\xBB\x52\xAA\x1C\x25\x0D\x07\x70\x83\xF4\xC5\x11\x7A\x92\x87\xFC\x25\x24\xA1"
"\xC8\x25\xE9\x83\x34\xEC\x64\x2C\xB5\xED\xFC\x06\xEB\x2D\x1A\x11\x84\xBA\xEA\x27\x27\xAB"
"\x6E\xE6\xA1\x0C\x3E\xEB\xE1\xBE\xAE\x61\xEE\x65\x1B\xE2\xA5\x83\x8C\x25\x91\x9E\x0D\x20"
"\x08\xD3\x30\x61\xCA\x0C\x56\xA5\x2C\x5E\x2E\x29\xF1\xA4\x21\xED\x45\x19\xCB\x45\x0E\x3E"
"\x0B\x1E\x03\x42\xF7\x84\x92\xBF\xF8\x0E\x2F\x23\x52\x74\x88\xA6\xE2\x42\xD3\x22\xA1\xC2"
"\x34\xBF\x52\x2C\xA4\xA0\x07\x93\x63\x08\x7A\x10\xFF\x28\xC9\xFC\x00\x11\x20\xB1\xE4\x98"
"\x52\x11\x4B\x42\x8F\x98\x5E\xB2\x3F\x76\xA6\x2D\xDD\x12\x0D\x79\x73\x19\x29\xE2\x8D\xCE"
"\xF0\xA3\x10\xEF\xB9\xAE\x32\xEB\xB6\x2E\x18\xF9\x32\x2C\x7F\xA2\x91\x7A\x8B\x18\x6D\x73"
"\x36\x51\x13\x21\x0F\x4A\xB0\xFE\x10\xF7\x64\x2B\x1C\x95\xB3\x97\x3A\x11\x2B\x2F\x90\x25"
"\xBD\x73\x1A\x41\x73\x27\x79\x26\x2A\x71\xEA\x6D\xF0\x04\x0C\xCD\xA3\x06\xD2\xC7\x49\xDA"
"\xB1\x2E\xD3\x6E\x87\x2E\xE6\x37\x81\x13\x79\x84\xB3\x2A\x69\x71\x23\xE9\xF3\x2E\xCF\x53"
"\x1B\x52\xC1\x31\x67\xB2\xAB\x0E\xD0\x40\x05\xD0\x39\x35\x24\x21\xDA\x13\x75\xA6\xEB\x14"
"\xA7\x53\xE1\xD6\x2F\x9C\xB8\x4D\x7E\x2C\xB2\x3B\xFF\x53\x41\xB7\xED\x3C\x2D\xC9\x3C\x33"
"\x74\xE5\xC2\xB3\x18\x41\xF4\xAC\x18\xD4\x0A\x25\xD4\x3C\x74\xD3\x06\x63\x70\x3B\xAD\xC2"
"\x16\x82\xAF\x45\xD9\xAA\x3E\x2D\x33\xFE\x5E\x50\x44\x12\x06\x08\xC1\x8F\x68\x34\xAF\x20"
"\x8F\x33\x42\x1F\x82\x24\x7D\xEC\x42\xBF\x30\x3A\x03\xE3\xBC\xAC\xA5\x3A\xB1\xA2\x48\x53"
"\xE5\x2C\x79\xB4\xBA\xAE\x33\x9C\x44\x20\x91\xA6\x72\x45\x55\x13\xF2\x9E\x13\x43\x8B\x47"
"\x43\x45\xD4\x3A\x3D\xF4\x6A\x52\x33\x2F\xAF\x94\x34\xD3\x93\xA5\x34\x46\x36\x21\x14\x2E"
"\x4C\xE0\x14\x7C\x33\x2D\x11\x68\x40\x80\x0E\x4D\x99\xF2\x2D\x36\x13\xE2\x8C\xF2\x23\xE7"
"\x2D\x8B\x80\x11\x68\xA0\x2B\x48\x81\x2C\x89\x7A\x90\x08\xA5\x54\x58\x96\x94\xE4\x36\x43"
"\x50\xC5\x44\x32\x9D\xD4\xF5\xD2\xE7\x1B\xCB\xC5\x07\xC7\x05\x4C\x29\x10\x96\xBC\xD4\x20"
"\x1F\x95\x33\xB7\x49\x52\x3F\x93\x3C\xBF\xC8\xAD\xF6\xF4\x6A\x94\xEB\x96\xA2\x14\x4E\xA7"
"\xC5\x15\x1F\x0F\x00\x6A\xC0\x19\xBE\xD1\x20\xE4\x74\x28\x9B\x28\x54\x75\xCB\x52\x04\x51"
"\x96\x06\x46\x56\x6D\x21\x97\xF4\xD4\x4A\xDD\xEA\x26\xF3\xB0\x26\xCF\xEA\x52\xAD\x31\x44"
"\x6F\x8B\x52\xED\x72\x33\x10\x15\x96\xDE\x93\x2D\xE8\x12\x2E\x3C\xB3\x52\x83\x55\x2C\x45"
"\xE2\x52\x4B\xF3\x56\xDD\xE9\x0A\x71\x50\x4B\xC1\xEA\x74\xF6\x71\x3C\xCF\x34\x4D\x65\xB4"
"\x4C\x5B\x15\x2E\x54\x95\x17\x91\xF3\x3B\x33\xC6\x21\xFC\xD2\x20\x4C\x72\x22\x61\xA9\x52"
"\x6C\x95\x4B\xCD\x6A\x2F\xC5\x6B\x43\xC5\x44\x10\xF7\x93\x2D\x56\x8D\x5E\x23\xF3\x20\x4D"
"\xB4\x41\xC9\xB2\xEB\x94\x95\x20\x32\xF5\x5F\x2D\x6A\x5A\xF3\x15\x4B\xA5\x35\x5D\x15\xCC"
"\x53\x29\x92\x63\x9A\x75\x93\xA0\xE3\x3E\xC9\x6E\xF1\xE8\x03\x5C\xCD\x74\x68\xF8\xB3\x37"
"\xCC\x61\xF5\x50\xB4\x22\x90\x35\x02\xC3\x35\x2D\xA2\xF5\xAC\xDE\x55\xDF\xE2\x15\x3E\x42"
"\xB0\x22\xF1\xB5\x5E\x20\x88\x60\x6B\x73\x9B\xEA\x44\xED\xFC\x55\xF3\x38\x35\x9C\x06\x16"
"\x29\x41\x76\x66\x0F\xB6\xC0\x18\xA5\x01\xF5\xD5\x4C\x34\xB6\x4E\xA1\x62\xD7\xB8\x22\xD7"
"\xCC\x44\x4E\xE7\x21\x15\x1C\xC5\xE7\xC8\x74\x9B\xF2\x89\x40\xC1\x69\x5D\x01\x96\x61\x41"
"\x4A\x64\x15\xAB\x57\x01\xB5\x62\x55\x96\x55\x9B\xB3\x66\x79\x16\x4B\xD6\x32\x5B\x8B\x88"
"\x6B\x62\xD6\x66\xC1\x89\x66\x87\xB5\x5D\xC9\x16\x67\xD9\x13\x1B\x21\xC5\x19\x3A\xB2\xAA"
"\xD6\xB3\x65\xD7\x03\x55\xC7\x69\x5B\x1D\xD2\xAB\xA6\xE6\x22\xBC\x76\x5C\x89\xF2\x67\xF1"
"\xCA\xEF\xBC\x42\x19\x65\xB6\xAC\xA6\xF6\xB0\xEA\x66\x44\x66\x55\x56\x55\xF4\x6A\x29\x11"
"\x62\xE7\xD4\x23\x31\x92\xE0\x28\x96\x8C\xB8\x56\x62\xC9\x52\x38\xFF\x64\x26\x10\x57\x56"
"\xE1\xEF\x57\x61\xD4\x60\x19\x97\x5A\x0B\xF6\x89\xF6\x2F\x30\x05\xA2\xA8\x10\xD0\x4C\x38"
"\xF1\xAE\xDC\x24\x9C\x3C\x45\x07\x13\xC2\x67\xCB\x42\x18\xDC\x96\xA5\xE2\xB2\x27\xF4\xD6"
"\x57\xB3\xF6\x61\x5B\x4B\x70\xAD\x55\x6B\x47\xF6\x6C\x27\xB1\x97\x1C\x74\x8B\x7E\x83\x78"
"\x3F\x96\x72\x6D\x43\x55\x31\xB6\x53\x45\x33\x74\x3D\x97\xDC\xD2\xD6\x6C\x45\x57\x29\x8F"
"\xB2\x40\x54\x97\xAE\x94\x76\x7F\x50\xD6\x36\xD0\xD4\x37\x71\xD3\xAC\x76\xE2\x31\xF4\x96"
"\x63\xE7\x73\x77\x59\xAB\x77\xB1\xEB\x40\x0F\x10\xB3\xD2\x97\x2A\x0F\xC5\x12\x99\xB4\xF6"
"\x70\x08\x51\x8E\xD4\x27\x26\x93\xE9\xD8\x43\x3E\x27\xCE\x79\x57\x16\x52\x0F\xAA\x6C\xA1"
"\xF6\x9B\x2A\x73\x6F\x53\x16\x69\x68\xF7\xA9\xEA\x46\x1F\x27\xF7\x34\x4F\xE3\xE9\x00\x68"
"\x4D\xDD\x6A\x22\xA8\x63\x2D\xCB\xD7\x7C\x2F\xD7\xB5\xDC\x37\xC7\xFA\xF2\x2F\x65\x4A\xA3"
"\x2E\x6D\x1B\xB4\x73\x3E\x2B\xA2\x62\x2E\x86\xE3\xEC\xA5\x84\xFB\x02\xBA\xAA\xAF\x1C\x01"
"\x68\x09\xD9\xF6\x32\xCB\x22\x33\x3D\x78\x56\xB8\xC2\x19\xAA\x50\x3C\x29\xA2\x58\x52\xA5"
"\xDF\x94\x10\x53\x4B\x14\x74\xFD\xD7\x74\x65\xA5\x87\x87\xE9\xF0\x08\xB8\x6F\x4B\x91\x65"
"\xEF\xEA\x5A\xA3\xD7\x62\xC7\x32\x45\xF3\x0A\x10\xFE\x43\x0A\x2C\xF8\x82\x07\x4C\x83\x73"
"\x4C\x59\x75\x6F\x47\x1D\xD7\xAA\xB0\xD6\x4E\x25\xB1\x85\xEF\x34\xFB\xCA\x33\x30\x3C\x73"
"\x81\x4B\x50\xA6\xC4\xB4\xAE\xA0\x12\x81\x82\x33\x75\x5F\xE5\x75\x63\x4B\x0C\xDD\x89\x75"
"\x5D\x75\x4C\xF6\x37\xBF\xB4\x37\xBD\xB2\x18\xC7\xEE\x95\x7A\x6D\x06\x3E\x07\x75\x6B\x80"
"\x55\x2C\x58\xB8\xFC\xB2\x66\x11\xBB\xF8\xF0\x00\xF9\x4B\xC1\xCA\x91\x27\x35\x11\xD9\x12"
"\x83\x11\x22\x00\xE7\x0B\xAF\x74\xF6\xA0\x5C\x17\x81\x23\x77\x26\xC0\xD7\xC0\xF8\x38\xBC"
"\xFC\xF8\xC6\x4E\x16\x7A\xA1\xC4\x29\xCB\x38\x4F\x93\x75\x39\x1F\x94\x8C\x73\x38\x4C\x1F"
"\x72\x90\xAD\x32\xFD\x66\x79\xAB\x48\x6F\x08\xD6\xF6\x85\x7D\xE5\x46\xFF\xEB\xDD\x06\x58"
"\x6E\xDF\xB8\x2C\x17\x4C\x94\xEB\x6B\x6C\x7D\x0C\x89\xFF\x37\x58\x7D\xF4\x8C\x24\x17\xE6"
"\xE2\xD5\x93\xE6\x6A\x4A\xD1\xB3\x5B\xAD\xD7\x1D\xC5\x18\x8F\x39\xF4\xAC\x92\xF9\x87\x5D"
"\xEC\x8E\xB1\x93\x58\x7D\xA9\x59\x14\x37\x94\xBF\xD6\xB8\x48\x19\xC7\x6A\x00\x54\x6B\x54"
"\x18\x38\xF7\x2E\x6D\x4B\x3B\x4A\x8A\x32\x9E\x6D\xE4\x8A\x42\x9E\x9D\x19\x73\xA9\x79\x8C"
"\xAD\x19\x2D\xD0\x55\x52\xB6\xC1\x19\x22\x38\x30\xD4\x99\x2D\x01\x5A\xA0\xCB\x8A\xA0\x2D"
"\xE5\x5D\x02\x9A\x8D\x23\xAC\x89\x2D\xEA\xA1\xE9\x44\x18\xF4\xB8\xC0\x8A\xB9\x1E\x8F\x99"
"\x4F\x8F\x2A\x55\x06\xAA\xA1\x11\xE2\xA4\xC4\xE9\xA3\x23\x6C\xDF\x36\x8A\x8E\xB6\xAD\x9C"
"\xE8\x09\x93\xF5\xCA\xE8\x4A\xB7\x1F\xF3\xCF\xA5\x5F\x9A\xC9\x1A\x63\x6E\x61\x9A\xA6\x6B"
"\xFA\xC5\x5A\xCF\xA6\x15\xCD\x0B\x76\xD9\x07\x81\x32\xA7\x79\xEC\x14\x12\x46\x84\x7F\xBA"
"\xD0\x08\x97\xA8\x8F\x1A\xA9\x4D\xCC\xA8\x93\x9A\xA9\x9B\x9A\xC3\x96\xDA\xA9\xA3\x5A\xAA"
"\x1D\x0C\xAA\xA7\xDA\xAA\xAF\x3A\xC0\xAA\x1A\xAB\xB7\x9A\xAB\xC1\x6B\x7D\xD9\xB7\xAB\xC3"
"\x5A\xAC\xC7\x9A\xAC\xCB\xDA\xAC\xCF\x1A\xAD\xD3\x5A\xAD\xD7\x9A\xAD\xDB\xDA\xAD\xDF\x1A"
"\xAE\xE3\x5A\xAE\xE7\x9A\xAE\xEB\xDA\xAE\xEF\x1A\xAF\xF3\x5A\xAF\xF7\x9A\xAF\xFB\xDA\xAF"
"\xFF\x1A\xB0\x03\x5B\xB0\x07\x9B\xB0\x0B\xDB\xB0\x0F\x1B\xB1\x13\x5B\xB1\x17\x9B\xB1\x1B"
"\xDB\xB1\x1F\x1B\xB2\x23\x5B\xB2\x27\x9B\xB2\x2B\xDB\xB2\x2F\x1B\xB3\x33\x5B\xB3\x37\x9B"
"\xB3\x3B\xDB\xB3\x3F\x1B\xB4\x43\x5B\xB4\x47\x9B\xB4\x4B\xDB\xB4\x4F\x1B\xB5\xA5\xBA\x06"
"\x70\xAD\x93\x53\xDB\xB5\x21\x0D\x9D\x5F\x5B\xB6\x25\x6D\x69\x66\x7A\xB6\x6F\x1B\xD0\xF8"
"\xE7\x7C\x71\x9B\xB7\xF5\x0C\x35\x82\xE1\x83\x16\xD8\xD5\x46\xFA\xE8\xCE\xF4\xA4\x3B\x9A"
"\xA5\x12\xC5\x8A\xEF\x57\xA3\xCD\x09\xA2\x30\x8C\xB8\xF5\xE9\xB9\xAB\x2C\x68\xBD\x82\x9C"
"\xF9\x8C\x4B\x8C\xE2\xF2\x8E\x3A\xA1\x9F\x58\x9A\x64\x97\xA2\xF5\x12\x72\x9D\x06\x3E\xE6"
"\x18\xBC\x28\x4F\xEE\x44\x40\x97\x7B\xB0\x6D\x67\x0C\x6E\x73\xDB\x39\x08\xC3\xA7\xA5\xAD"
"\x5F\x16\x79\x21\x33\x72\x38\x1E\x11\x49\xC4\xC4\xBC\xA9\x0B\xBD\x11\xF8\xBF\x51\x10\x03"
"\xE7\x7B\xCC\xAA\xDB\x16\x62\x33\x55\xBD\xE2\xA0\x03\x23\xA8\xCD\x6D\xD3\x30\xC7\xBE\xCD"
"\x07\xB9\xC1\xC9\x1B\x65\x99\xBF\x5B\x5B\x27\xD8\x3B\xBC\x23\x2B\xC0\x0D\x98\x3D\x30\x1C"
"\x75\x00\xA1\x07\x87\xBA\xD9\x02\xF9\xC5\x0C\xDC\x16\x86\x16\xC5\x53\x61\xC2\xEF\xCA\x6F"
"\xD2\xAB\x06\xB6\xC2\x2B\xE8\x60\xC3\xDF\xE2\x6F\x15\xBC\xC5\x4D\xCA\xFE\xBC\x42\x10\xD0"
"\x31\xFE\x5E\x07\x4F\xB9\xD7\x99\x74\x40\x9D\x8E\xC5\x16\x1C\xA1\x69\xE9\x83\xD4\x3A\xB9"
"\xC3\x85\xD8\x6A\xA1\xE2\xC6\xBD\xA2\x5B\x7A\x72\xC2\x66\x15\xC9\xCD\xA3\xC9\xF7\xBB\xBC"
"\x41\xBC\x4B\xCB\xA8\xBF\xA3\x9C\x2B\x16\x5C\x6A\x64\x75\x13\x7A\x92\x34\xFA\x1B\xAA\xAA"
"\x52\xB8\xAB\x17\x36\x4E\x4E\xE8\x48\x76\x59\x71\xD4\xBB\x0D\x91\x2B\x27\x50\x92\x0B\x6F"
"\x08\xFB\x57\x24\xBA\x9B\x22\xD8\xB1\x79\x1B\xF8\x71\xEF\xFB\x8D\xFB\xBC\x92\xE3\x26\xC2"
"\xAF\x6E\x9F\x9D\xA2\xEB\x28\xA3\x10\xB3\x7C\xD0\xBB\x79\x9A\x05\x93\xBC\xED\x65\xB9\x25"
"\xE8\xC2\xE1\xC2\xD1\xF9\xD6\x5B\xC5\x79\x55\xC3\x98\x4A\xB7\xB4\x80\x37\xCF\x8B\xF5\x4A"
"\xCD\x73\xBC\x9A\xB5\xC4\xCD\xA9\x2A\x34\xBB\xD2\xF0\x4E\xCF\xBA\xEC\x1C\xD2\xB5\xB5\x5F"
"\x0E\x2F\xD3\xF9\x17\xD0\xBF\x58\x4C\x42\x52\x21\xEF\x33\x89\xE6\x41\x68\x6B\x9C\x42\xBA"
"\x22\x1F\xD3\xF3\x98\xEE\x13\x7B\x85\xA5\xF9\xB8\xA2\x56\xB8\xDC\x76\x6D\x5D\x85\x2D\x5C"
"\xD0\x3D\xDC\x31\xA4\x1C\x34\x9B\xFB\xB8\x83\x3C\x62\x5F\xF1\xD3\x59\xF9\xD6\x15\xAF\x10"
"\x1B\x23\x6A\xA9\xAA\xD4\xBB\xCA\xE4\x30\x4E\x88\xFB\x7B\xD5\x9B\xD1\x2A\xF0\x31\x88\x9B"
"\xF4\x3A\x2A\x45\xF2\xAC\x48\x9B\x9F\x52\x5E\x09\x4B\xCF\x05\xD2\x9C\x77\x2F\x73\x9E\xF7"
"\x80\xE3\xF8\xDE\xC9\xA7\xDE\xD5\xBD\xDD\xA7\x77\x89\x09\x3E\x77\x3D\x9D\x96\x0B\x99\x2D"
"\x74\x4F\x3F\xD6\x7C\x7B\xE7\x1C\x7C\x92\x64\x77\x13\xB6\x29\xB7\x1D\x29\xA2\x2F\xC5\xB9"
"\x1C\xAB\xC6\x1D\xAB\xCA\xBD\x8E\xA1\xBD\xDF\xC1\xB2\x63\xC4\x91\xED\xF0\x33\xDB\x41\x9D"
"\x02\xE1\xBD\x43\x07\xF2\x8C\xF1\xEE\x54\xE8\x20\x49\xC2\x1D\xD6\x63\x5D\xD3\xA3\x5D\xCB"
"\xC7\x24\x55\x82\x9B\xCA\xC3\xB9\x86\xFE\x7D\xCF\x05\x81\x9E\xF4\x5D\x99\xA5\x7D\xB7\xF1"
"\x37\xE7\x1E\x99\x48\xCB\x29\x18\x0A\x5E\x2C\x2E\x59\x07\x96\x7E\xE8\x27\x1D\xE9\xA9\xCA"
"\xA2\x35\x7D\x6E\x29\xFE\x7E\xCB\x88\xC0\x23\x8B\xE3\x7F\xCE\x61\xD9\xCD\xDC\xE5\x3C\x20"
"\xD0\x1D\xCE\x03\xD6\xC3\x3F\x91\xE9\x67\xEE\x2E\x70\x9A\xDE\xE7\x1D\x96\x31\xA6\x2A\x16"
"\x18\xEB\x45\x62\x18\x17\xD1\x2E\x9E\xE2\x26\x74\xD0\xE8\xB1\xBC\xA6\x72\x9C\x2C\xBA\xF2"
"\x38\x64\x7E\xEF\xA7\x79\xB7\x05\x28\xE4\xDF\x37\xEA\x05\xD9\xE7\xC7\x34\xDF\xB3\xCA\xE2"
"\x0F\x79\xF1\xF1\xE8\x94\xF3\xAB\xEB\x55\xDD\x9C\x90\xEE\xDA\xE9\x74\xEC\x35\xBE\x4A\x47"
"\x3E\x30\x30\x7E\xF9\x0E\x02\xDB\x6C\xE1\xBA\x47\x33\x31\x02\x98\x71\x58\xFE\x51\x4D\x22"
"\xEE\x1B\xBA\x48\x93\x5C\x5C\x73\x5D\x19\xEF\xBE\x27\xF2\x1E\xC3\x07\xBF\xE7\xBB\xBD\xBA"
"\xCC\x20\xD9\x09\x66\xF2\x51\x7E\xD4\x83\x55\xEF\x35\x1A\xF6\xBB\xD6\x1C\x7B\xD2\xFF\xAE"
"\x80\x55\x42\xB2\xE1\x4D\x3D\xE2\x20\x1E\xE6\x8A\xDB\x3C\x5E\x1F\x2E\xD3\x3E\xC0\x14\xD8"
"\xF9\xDB\xEA\xBD\x15\x36\xF2\x6B\x57\x32\x64\x5A\xE0\xFF\xE1\x1C\xD6\x03\x5A\x9F\xA7\xF5"
"\xBF\x2A\xA2\x0D\x18\xEF\x71\x43\xEF\x79\x1E\xE4\xA7\xFE\x5B\x77\x86\xE4\x1B\xDF\x59\xDD"
"\x3F\x81\x59\xDA\xEC\x31\x3D\x78\x7E\xF4\xE6\xE1\x1F\xAA\xAA\x1E\x00\xC0\x80\x02\x07\x12"
"\x2C\x68\xF0\x20\xC2\x84\x0A\x01\x4E\x10\xB6\xED\xE1\x36\x2F\x0B\x27\x52\xAC\x68\xF1\x22"
"\xC6\x80\x13\x9C\xFD\xEB\xE8\xD1\xD9\x84\x8C\x22\x45\x02\x82\x68\xF2\xA1\xB3\x21\x23\x01"
"\x0E\x71\xB6\x6D\x9E\xC7\x98\xE7\x4C\x4A\x5C\x09\x50\x84\xB9\x98\x1D\x41\xDA\x04\x30\xA1"
"\xD6\x49\x93\xCE\x44\xD8\xF4\x12\x73\x9E\xCA\x21\x30\x3D\xD6\x14\xA9\xF4\x9C\xA3\x09\x1B"
"\x75\xFE\xE3\x89\x71\x2A\xD3\x80\x46\x3F\x86\xEC\xE9\xF5\xE0\x56\x9D\x4D\x45\xE2\xF4\x88"
"\x34\xA0\x52\x8F\xE6\x88\x8E\xC4\x1A\x73\xED\x57\x00\x65\x75\x5A\x1D\x99\x96\xAA\xCE\x59"
"\x23\x67\x51\xAD\xEB\xD5\xAD\x5A\xB6\x17\xBD\x04\xA5\x19\xB7\x86\x36\x9D\x70\x47\xCE\xA5"
"\x7A\xAA\x2B\xC6\xC6\x5C\xE3\x52\xD6\x4A\xF5\xEC\xCA\x9F\x85\x1F\xD6\x82\x5C\xF9\x33\xE8"
"\xD0\xA2\x2B\x02\xDE\xE9\x79\xF4\x4A\x46\x78\x3B\x62\xB6\xBB\x74\x75\xCC\xB1\x8C\x73\xD2"
"\x3D\x9D\xB1\xF4\x5B\xC1\x4E\x5F\xC3\x6D\xDC\xBA\x27\x6E\xBF\xA4\x39\x66\x05\x18\xB6\xAA"
"\xED\xBD\x7D\x93\x5B\x3C\x5E\x7C\xB6\x59\x95\x2C\x79\xEB\xBE\x4A\x3C\x77\x5C\xC9\xA6\x6D"
"\xF2\x85\xED\x51\xEF\xED\xEB\xDF\x2B\xE3\x5E\x3C\xD8\xBB\xEC\x91\x72\x5E\x77\xD4\x56\xC3"
"\xA6\xF6\x98\xE0\x23\xD3\x8E\x29\x1C\x35\x46\xE7\xFF\x7E\x87\x87\x7D\x7F\x22\x6E\x93\xE1"
"\x37\x20\x81\x9F\x05\xC7\x5C\x81\x13\xA9\xB6\x1A\x7F\x18\xDD\xE5\x5D\x47\xE9\x65\x14\xDF"
"\x7F\x17\x05\xD8\x91\x79\xBB\x4D\xD6\x58\x86\x36\x1D\xD8\xDF\x73\xC7\x55\x98\x51\x77\xF6"
"\x21\x48\x91\x7E\xFF\x48\x68\x91\x6F\xD2\x01\xF0\x60\x87\x16\x8A\x87\x61\x75\x2B\x51\x78"
"\xE2\x44\x25\xFE\xC3\x48\x40\x0B\x76\x34\xDF\x45\x0F\x3E\xF7\x55\x79\x35\x4E\x94\xE2\x90"
"\x22\xE1\xB6\x09\x8E\x14\x99\xA0\x03\x94\x3A\xC8\x81\x1D\x7D\xCB\x25\x98\xDF\x65\x2E\x2A"
"\x39\xA3\x89\x20\xE2\x35\xE2\x95\x61\x8A\x69\xD0\x87\x63\x56\xE4\x63\x96\x36\x09\x89\x9E"
"\x57\x37\x02\xC7\x65\x60\x1E\xA6\x62\x0B\x9D\x51\xF9\xE4\x08\x9D\xB6\xA4\xD2\xE4\x70\x56"
"\x5A\x17\x5B\x8F\x5D\x7E\xA5\xE3\x76\x2B\xA5\xB8\x62\x45\x2D\xA2\x45\x5D\x66\x5C\xC6\x08"
"\x5D\x6D\x8D\xC6\xC4\x23\x40\x68\x02\xD9\x5C\x9A\x94\x15\x99\x11\x92\x11\xDA\x54\x06\x7B"
"\xFF\xB8\x17\x9A\xA2\x55\x46\x6A\xE6\x42\xFA\x35\x28\xA3\x7F\x7C\x16\x74\x21\x72\xA8\xCA"
"\x3A\x2B\x43\x5C\x82\x49\x6B\xA5\xB0\xAD\x6A\xD1\x9A\xB0\x21\xCA\x62\x7D\x02\x4A\xBA\xDA"
"\xA3\xB8\x1E\x54\x26\x46\x3A\xCE\xE3\x88\x19\x8E\xB0\x77\x29\x77\x7E\x8E\x74\xA8\x87\xE2"
"\x69\x23\x88\x19\x82\x24\x26\xAC\x97\x71\x7E\xE5\xE6\x4A\x3A\x3A\x83\xC4\x15\x9C\x3C\x2B"
"\x12\x9A\x34\x92\xE7\xA8\x91\xA9\xB2\x09\xA9\x47\xDA\xD0\x61\x06\xBD\x66\x5C\xE1\x2A\x41"
"\x43\x6C\xE3\x8C\x2D\xF3\x5E\xA1\xC3\x29\x47\x69\x99\x68\xB0\x85\x1A\x4B\x90\xAA\x03\xFF"
"\xB9\xDA\xAD\xC7\xC2\x69\xF0\xC1\x57\x76\xBA\xDA\xAF\x0B\x0B\x7A\x1E\x84\x62\xA5\xA6\xAB"
"\xC2\x41\x86\xEA\x6B\x9B\x05\xC7\x5A\x2D\x6C\xC5\x46\x3C\x10\xB2\x18\x43\x58\xF1\x45\x84"
"\x8E\x3C\x2D\x5E\x2C\x2F\xE4\x32\x5E\x94\xB6\x65\x2B\xBE\x0B\x81\x3B\x52\xBA\xAB\x41\x4B"
"\x91\xCB\x26\x6F\x49\x95\xD0\x08\x4D\x2C\x33\x42\xF1\x29\xD6\xAE\x42\xBD\x2E\x3D\xA1\xC8"
"\x0D\xCB\x9A\x30\xC9\x0C\xE7\x2C\x10\xAC\x52\x9F\x5C\xD9\xC4\x31\x6B\x8A\x33\xA7\x19\x6B"
"\xDC\x13\xD5\x5E\xF5\x5C\x34\xD4\xD2\x9A\x4D\x34\xD3\x5B\xD7\xAA\xB6\x45\xB0\x42\xDC\x93"
"\xCB\x5A\x1B\xED\x35\x7C\x22\x3F\x6D\xA3\xC8\x3F\xDF\xCC\xB6\x9A\x1F\x53\xE5\xB7\x42\x29"
"\xFF\xC5\xEE\x4A\xBD\x22\x7D\x90\xD2\x54\x7A\x0C\xA1\xCD\x17\xED\xEC\x76\xD9\x5E\xD5\x7D"
"\xB5\x46\x40\x6D\xF3\x25\xE6\x6E\x1B\x2A\x36\xA0\x71\x19\x8E\x22\xE8\x49\x8A\x54\xB9\x4D"
"\x67\xB7\x4D\x56\xD4\x9D\x23\xA4\xBA\xE7\x0E\xC3\x1D\x77\x2D\xB0\x75\x56\xD9\xE5\x45\xE1"
"\x6D\x13\x62\xB0\x8D\xEA\x94\x2D\xC2\x08\xBE\x38\xE9\x97\xE9\xF9\x9E\x86\xF1\x96\xD1\x18"
"\xE1\x09\x4D\x7E\x38\xE0\xAE\x51\x45\x7C\x41\x8D\x7B\x1B\xE4\xB6\x78\xCD\x03\x08\xBC\xDC"
"\x6E\x8D\x7A\xB4\xA7\x2A\x27\x7E\xEC\xA8\x75\x3D\xFD\xD7\xB3\x1F\x59\xBA\xA7\x64\x67\xDA"
"\x13\xEC\x95\x3D\x9F\x7A\xF4\xE5\xA3\x0C\x76\x66\x57\xD4\x4B\x2F\x12\xAE\x2B\x94\xFB\xE7"
"\xD0\x47\x24\xFD\xED\xEF\x5E\xBA\xF3\x19\x68\x68\xB6\x9F\x8E\x59\x04\x09\xF6\xF2\x5F\xF5"
"\xFA\x66\x20\xC4\x49\x6F\x6C\x4A\x22\xE0\xFE\x32\x68\xC0\x95\x40\x09\x83\x48\xC8\x9B\xFA"
"\x0E\x06\xBE\x70\x85\xB0\x22\x00\xB4\xDF\x68\xCE\x67\x41\xE8\x91\xAF\x22\x2A\x0C\xDD\x01"
"\x05\xF6\x95\xF8\x51\x66\x7E\x1B\xDB\x1B\x0A\x35\x82\xBF\x1C\x9E\xF0\x74\xBB\xF3\x1C\x92"
"\x22\xA7\xA9\x80\xBD\xEF\x60\xF1\x69\xDE\xD0\x70\x98\x11\xC5\xE5\x50\x7E\xAD\x2B\xDF\x08"
"\xC7\x77\x31\x91\xF4\xB0\x89\x5C\x63\x9F\x8A\xD2\xD7\xC2\xE2\x95\x8E\x7A\x60\x29\xE2\x0D"
"\x1D\x97\x9D\x27\xC6\x85\x86\x4D\x1C\x5D\xEC\xAA\x88\x25\x01\xC6\x2E\x45\x4C\x12\xCD\x04"
"\x36\x01\x46\x5C\x1D\x71\x82\xF5\x5B\xE2\xC7\xBC\x68\xC5\xA4\x91\x11\x88\x73\x94\xA2\xF7"
"\x92\x55\xC2\x3D\x12\x12\x6B\x3B\x44\x61\x14\x33\x62\xC6\x6F\xF5\x71\x6D\x4A\xCC\x21\x1A"
"\x3D\xA7\x46\x95\xC1\xD0\x8F\x78\xF9\x5D\x65\x86\x90\x3D\x19\x9E\xAC\x8E\xEB\xBA\xA3\x83"
"\xF2\x58\xC8\x9E\xD8\x50\x84\x7F\xA4\xE2\x20\x73\x94\xCA\x51\xEE\x31\x92\x94\x3B\x25\x46"
"\x16\x19\xB2\x55\x5A\x44\x96\xF6\x73\xE5\xD6\x26\x89\x29\x36\x5A\x12\x2F\x68\x93\x9C\xDE"
"\x16\xB8\x35\x4F\x6A\x51\x8C\xA1\xE4\x25\x2B\x4D\x35\xC5\xEF\xC1\x52\x90\x5B\x6C\x19\x2D"
"\x93\x89\x42\x5C\x9E\x2C\x91\xB1\x04\xE5\x2C\x9F\xC9\x33\x6C\xDE\xF2\x90\xF6\xD3\xA5\x0B"
"\x7F\xE8\x36\x13\xD0\xAB\x76\x54\x11\x22\xFC\xF0\x72\x0A\x7A\x41\x50\x34\xA5\xFC\xDB\x23"
"\x1F\xB7\x42\x69\x02\x2B\x9A\x66\xB2\xA6\x33\x97\x99\xCF\x40\xD2\x93\x90\xD4\x8C\x18\x3E"
"\x6B\xC9\x4D\x10\x6A\x13\x5D\x03\x8D\xDD\x3F\x0F\x06\x4E\x2E\x56\xB2\x7C\x09\xA5\xC8\x43"
"\xC7\x14\x51\x88\x52\x30\x79\x0D\xED\xE7\x44\xDE\x89\xAB\x80\x5A\x64\xA1\xAA\x2C\x28\x46"
"\xA7\xE9\x4D\x28\x36\x53\xA0\xF1\x24\x65\x23\xD3\x79\x52\x87\x8E\x34\x8D\xF6\xFC\x22\x32"
"\x11\xDA\x52\xD6\xBD\x54\x4C\x41\x5B\x9D\xC5\xAE\x87\xC7\x98\x86\xD4\x79\x29\xAD\x66\x49"
"\x3B\x5A\xD3\x82\x78\xB4\xA7\x9E\xEB\x95\xDD\x68\xC5\x51\x8A\xF4\x6C\x57\x7C\x1B\x6A\x42"
"\x6C\xC9\x52\xA8\x9A\xA9\xA8\x0A\xA1\x16\x24\x2B\x8A\x52\xAA\x16\xA8\xA9\x0C\x84\xA7\x31"
"\xE5\x79\x51\xA3\x32\xEE\xA7\x00\x15\x27\x09\x41\xFA\x51\x7D\x92\xD5\x58\x9A\x11\x46\x9E"
"\x82\x87\x40\x2B\x2E\x55\x41\x78\x39\x47\x5C\xF5\xE4\x3A\xB9\xC9\xC7\x91\x61\xED\x26\x57"
"\x6D\x4A\xD5\x17\x3A\x15\x57\x9B\x62\x64\x60\x07\x84\x55\xD1\x69\xF5\x98\xF3\x6C\xAB\x41"
"\x34\xAA\x54\xED\xC1\xD5\x16\x5F\x05\x5A\x62\x01\x60\x55\xC8\x86\x89\xAF\x93\xDA\x63\x5D"
"\xDD\x95\xB1\x5F\xBE\xEA\x61\x83\xF3\xAB\x4E\xB3\x9A\xD9\x04\x6D\x16\x61\xA0\x2B\x2C\xAD"
"\x0E\x9B\x4D\xB6\x1A\x51\x64\xE8\xAC\xDA\x5F\x2B\xC2\x44\xCE\xF2\x71\xB5\xA3\x71\x9A\xE9"
"\xA0\xA9\xD6\x99\xF9\x96\xB7\x8C\x7D\xED\x65\x99\xA9\x13\xD8\xEA\x56\x70\x2B\x2D\x9C\x69"
"\xF3\x82\x5A\x75\xB5\x72\xA6\x6E\x6B\xED\x40\x08\x9B\xDC\x59\xC9\x76\xAB\xC3\x95\x15\x6E"
"\x90\x98\x53\xEA\x5A\x34\xB8\xC6\xBD\x89\x59\x6B\xFB\x2E\x40\xCE\x6D\x9F\xED\x3D\xAF\x99"
"\x3C\xFB\x23\x42\x86\x96\xB8\x10\x22\x2D\x41\xE4\xFB\x0F\xF1\xDA\xF5\xB9\x9E\x9B\xE8\xAC"
"\xB0\x2B\x10\xED\x4E\xD5\xBF\xC0\x2C\xAE\x68\x7A\x96\xD4\x85\x74\xD7\xB1\x63\x85\xAF\x64"
"\x69\xD5\xB3\x07\x9B\x30\xB3\x02\x86\x2F\x1C\xA3\xCB\x4F\x92\x2E\x77\xBB\x89\xDA\xA4\x2F"
"\x71\x4A\x26\x0D\x8F\x47\xA5\xB9\x95\x29\x82\xF1\x73\x61\xE3\x20\xB7\xC0\x27\x56\xE6\x86"
"\x0F\xB6\x26\xE6\xC6\xAD\xB1\x62\x35\xEF\x79\x23\x4C\x2B\x05\x66\x31\xAD\xB4\xAD\xF0\x77"
"\x31\x8C\x1F\xBE\x2E\xAB\x9D\x63\xAA\x2F\x83\x89\x48\x2C\x11\x97\x16\x74\xFC\x5D\x88\x54"
"\x51\x1C\x64\x5C\xAD\x18\x00\x04\x96\xF2\x8B\x0F\x3C\x65\x54\xB9\xEC\xB6\x60\x4D\xED\x8D"
"\xDB\x27\xE4\x80\xE8\x98\xBB\xCE\x42\xAB\x70\x7F\x8C\xD9\x2D\x8F\x59\x34\x4F\xD2\x41\x06"
"\xED\x65\x82\x36\x5F\x30\x83\x48\xD0\xC1\x9C\xE9\xAC\x67\x3B\xB2\xB9\xAD\x0D\x7E\x6A\x9F"
"\xC5\xA4\x9F\x05\x27\xE4\xCF\x7B\x9E\x6D\x8C\xB7\xE6\x40\x7A\xFD\xCB\xC8\x87\x7E\x34\xA4"
"\x23\x2D\xE9\x30\xBD\x39\x4A\x72\x4C\x71\x21\x0D\x4D\xD3\x40\x77\x76\x46\x34\xA6\xE8\x41"
"\x27\x5D\x4F\x4E\x8B\xBA\xD4\xA6\x3E\x35\xAA\x85\x2C\xDF\x27\x1B\x37\x40\x72\x88\xCB\x94"
"\x30\x1D\x1A\xFD\xB0\x9A\xC1\x36\x4E\x75\x46\xD3\x8B\xEB\x5D\xF3\xBA\xD7\xBE\x66\xA5\x7C"
"\xBD\xDC\x66\xB9\x7D\xDA\xB5\xDE\xA9\x35\x78\x3D\xED\xE1\xB2\xDE\x97\xC9\xBF\xB6\x1E\x79"
"\x7F\x2D\xED\x69\x53\xBB\xDA\x12\x25\x71\xB1\x8D\xCB\x63\x61\xAE\x11\x36\xC2\xDE\xDA\x9A"
"\x90\x3D\x10\x68\xFF\x03\xBF\xBE\x26\xB7\xB9\xAD\xAD\xEE\x75\xB3\xBB\xDD\x4D\x86\x9C\xA8"
"\x27\x96\xED\x01\x7B\x67\xDE\xB3\x4A\x97\xBD\xC9\x1C\x4C\x30\xB3\x1B\xDD\xCE\x76\x37\xC0"
"\x03\x2E\x70\x5E\x13\x9B\x7B\xA5\xE6\x71\xBE\xAD\x7C\xEC\x42\x12\x8A\xD0\xE8\x6D\xF6\xC0"
"\xFD\x3D\xF0\x89\x53\xBC\xE2\xBC\xD6\x1F\x27\xF2\x04\x11\x61\x08\xC2\xD1\x46\xBD\x50\xC2"
"\x3B\xE5\x70\xEE\x5E\x67\x1E\x7A\x7C\xB8\x77\xD2\xCD\x6B\x89\x5B\xBC\xE5\x2E\x7F\x39\xCC"
"\x31\x5A\x06\x2E\x85\xFC\x4B\x65\x48\x66\x59\xCC\x81\xBC\xB4\xA5\xFC\xDF\xBD\x66\x79\xCC"
"\x83\x2E\xF4\xA1\x13\xBD\xE8\x23\xA9\xC1\x9E\x8C\xAE\xF4\xA5\x33\xBD\xE9\x4E\x7F\x3A\xD4"
"\xA3\x2E\xF5\xA9\x53\xBD\xEA\x56\xBF\x3A\xD6\xB3\xAE\xF5\xAD\x73\xBD\xEB\x5E\xFF\x3A\xD8"
"\xC3\x2E\xF6\xB1\x93\xBD\xEC\x66\x3F\x3B\xDA\xD3\xAE\xF6\xB5\xB3\xBD\xED\x6E\x7F\x3B\xDC"
"\xE3\x2E\xF7\xB9\xD3\xBD\xEE\x76\xBF\x3B\xDE\xF3\xAE\xF7\xBD\xF3\xBD\xEF\x7E\xFF\x3B\xE0"
"\x03\x2F\xF8\xC1\x13\xBE\xF0\x86\x3F\x3C\xE2\x13\xAF\xF8\xC5\x33\xBE\xF1\x8E\x7F\x3C\xE4"
"\x23\x2F\xF9\xC9\x53\xBE\xF2\x96\xBF\x3C\xE6\x33\xAF\xF9\xCD\x73\xBE\xF3\x9E\xFF\x3C\xE8"
"\x43\x2F\xFA\xD1\x93\xBE\xF4\xA6\x3F\x3D\xEA\x53\xAF\xFA\xD5\xB3\xBE\xF5\xAE\x7F\x3D\xEC"
"\x63\x2F\xFB\xD9\xD3\xBE\xF6\xB6\xBF\x3D\xEE\x73\xAF\xFB\xDD\xF3\xBE\xF7\xBE\xFF\x3D\xF0"
"\x83\x2F\xFC\xE1\x13\xBF\xF8\xC6\x3F\x3E\xF2\x93\xAF\xFC\xE5\x33\xBF\xF9\xCE\x7F\x3E\xF4"
"\xA3\x2F\xFD\xE9\x53\xBF\xFA\xD6\xBF\x3E\xF6\xB3\xAF\xFD\xED\x73\xBF\xFB\xDE\x9F\x08\xD2"
"\xF3\x94\xF4\xEF\x93\xBF\xFC\x4A\x47\xC2\x8C\x54\xCE\xE1\xC7\xAE\x8F\xA7\xA2\x65\xBF\xC5"
"\x4B\x23\x6E\xF3\xD3\x9F\xDD\x01\x52\x7F\x1B\xD1\xFC\x7E\x0A\x27\x64\xB1\x30\x97\x7F\xFD"
"\x05\x60\xCC\xD1\x0C\xFE\xF5\x12\xFF\xDD\x8D\xFB\x5D\x95\xFE\x55\x1C\x00\x0A\xA0\x03\x5A"
"\x5C\xAF\x14\xE0\x2B\x25\x60\xFF\x2D\x60\x05\x52\xE0\xC4\x35\xE0\x03\x6E\xA0\xC0\x4D\x00"
"\x1D\x98\x00\x8C\xF8\x9C\xFD\xF8\x5F\x38\x61\x20\x4C\xC1\x9F\xC5\x11\xCA\xFC\x71\x20\x0B"
"\xE2\x5A\x08\x1A\x15\x09\x32\x14\x8E\x5D\x20\x0A\x56\x5C\xBA\x7C\x5B\x0B\xE6\xE0\xAF\xBD"
"\x60\x4F\xC5\x60\xFB\xD5\x20\x02\x02\xE1\xC4\x39\xC7\xC9\xE9\xA0\x11\x46\x1A\x0F\x0E\x46"
"\x61\x14\x61\x5C\xF8\xE0\xFE\xCD\x60\x10\x1E\x20\x58\x2C\x21\x0C\x52\x61\xD8\x44\xC7\x11"
"\x66\xE1\xB4\x25\xE1\x2E\x09\x21\x7E\x38\xA1\x02\x9A\xA0\x41\x80\x21\x0D\x4A\x21\x68\x59"
"\x60\x42\x3C\x48\xC2\x69\x21\x1B\x8E\x19\x17\x96\xA0\x17\x9A\x0F\x1A\x9E\xA0\x19\x16\x04"
"\x19\x46\x21\x14\xD2\xD7\x1C\x32\x5B\xB4\xB5\xA1\x1F\x96\xDA\x1B\xCA\xA0\x98\xDD\xD3\x1E"
"\xDA\x61\x21\x1A\x5B\x1C\x22\x62\x1D\x36\xD1\x1D\x22\x44\x1C\xE5\x89\x9D\xFC\xA1\x24\x8A"
"\x5A\x20\xFE\xE0\x22\x8A\x46\x23\x8E\xE1\x21\x66\xD7\x26\xD2\x9B\x18\xE2\x47\x94\x84\xA2"
"\x0F\x7D\xE2\x24\x96\xE2\x0E\x32\x4A\xB7\x5D\xE2\xAC\x75\xA2\x65\x90\x22\x27\xBA\xA2\x27"
"\x26\x22\x26\xB2\x22\x8B\xC1\xA2\x29\xDE\x22\xAA\x55\xE2\x42\x0C\x41\x5E\xD1\xC9\xB2\xA5"
"\x10\x2D\x2A\x9C\x2D\x4E\x47\x87\x2D\x51\x2F\x5A\xD6\xAC\x64\x62\x41\xF0\x62\x2F\xFE\x22"
"\x2E\x3E\xA3\xA9\xE9\x22\x2B\x29\xA3\x22\xE6\xA1\x41\xCC\x98\x33\x22\x52\x30\x42\x23\x37"
"\x02\xDC\x04\x14\x90\xC7\x19\x0B\x35\x66\x97\x15\x6A\x19\xBF\x25\xD3\x38\x76\xA3\x3A\x32"
"\x5E\x3A\x82\x86\x76\x8C\x1C\x00\x30\xC2\x49\x18\xDC\xD4\x6C\xE3\x3A\xDE\xE3\xE0\xB5\x23"
"\x9F\x25\x5A\x42\xA8\xE0\x64\x0D\x23\x3E\x06\x64\xE0\xE9\xE3\x27\xF5\x15\x2A\x19\xE4\xAC"
"\x84\x62\x94\x08\x24\x43\x46\x1E\x41\xE2\x8E\x74\x75\xCB\xCB\x34\x24\x45\x0E\xDF\x43\x52"
"\xC6\x0D\x6E\x1A\x3F\x56\x24\x47\xDE\x1E\x41\x32\x63\x5E\x65\xA3\x3B\x16\x8C\x04\x76\xA4"
"\x49\xA2\x1E\x41\x5E\xE4\x57\xAC\x49\x49\x9E\xA4\x4B\xA6\x1D\x39\xC5\x59\x9E\x5D\x44\x4C"
"\x66\xD0\x4C\x76\xA1\x2A\xB6\xA2\x2C\x0A\x44\x4D\xEE\xCF\x4D\x36\x57\x31\x62\x44\x4F\xD6"
"\xCB\x4F\x8A\xC9\x50\xD2\x4B\x51\xBE\xA4\x52\x4A\x5A\x4A\x06\x63\x53\x02\xE4\x53\xEE\xA4"
"\x4E\xE6\xE4\x67\xA8\xE4\x52\x5E\x65\x0F\x3A\xA5\x56\x42\xE5\x56\x4A\x65\x2D\x7A\xA5\x30"
"\x82\x25\x65\x58\x25\x56\x96\xA5\x34\x45\x25\x55\x86\x65\x5A\xA2\xA5\x35\x1A\x22\x57\x02"
"\xE4\x58\xDA\xA3\x59\xCE\xE5\x34\x76\xE5\x5A\xDA\x65\x5B\x56\xE3\x20\xC2\xE1\x5D\xC2\x65"
"\x13\xCA\x25\x5D\x06\x26\x5D\xE1\xE5\x5E\x0A\x62\x8F\x51\x52\x5E\xBE\x22\x58\xB2\x65\x61"
"\x86\x09\x59\x0A\x66\x60\xB6\xC4\x43\xD0\xA3\x29\xBD\xE5\x62\x12\xE6\x61\xE2\x64\x62\xC6"
"\x62\x5F\x8A\xE5\x5F\xFA\x25\x64\x42\xE6\x5D\xBC\x91\xB4\x31\x66\x66\x1E\x99\x3D\x32\x8F"
"\x42\x95\x58\x68\xB6\xE6\x8D\xCD\x03\x69\xF2\x9A\x69\x32\xE1\x57\x5C\x64\x58\xAC\xE1\x67"
"\xDC\x05\x6E\xBA\x66\x64\x7E\xCC\x0A\xB6\xD9\x6C\x26\xE3\x36\xBA\x05\x0E\x5E\x49\x89\x14"
"\x27\x6F\x26\x67\x40\x84\x9F\x5C\xF5\x21\xAA\x05\x67\x3D\xC2\xE5\x5D\xC0\x63\x6E\x2E\x05"
"\x75\x2A\x67\x68\x2E\xC8\x6E\xC2\x17\x74\xA2\xCA\x43\x4E\x40\x94\x84\xE3\x5F\x84\x27\x76"
"\x96\x27\x42\x84\x22\xFA\xB1\x86\x48\xD2\x59\x77\x12\x22\x68\x9A\x27\x7C\x9E\x21\xE7\xF4"
"\x5A\x7B\xA2\xE6\x7B\xC6\x27\x7E\x8E\xA0\xF6\xAC\x27\x9D\x1D\xA5\x19\x24\xE5\x42\xF8\x27"
"\x80\x26\x88\x80\xE6\xA7\x81\x42\x16\x48\xE6\x49\x19\x88\xE7\x81\x36\xA8\x83\x3E\x28\x84"
"\x46\xA8\x84\x4E\x28\x85\x56\xA8\x85\x5E\x28\x86\x66\xA8\x86\x6E\x28\x87\x76\xA8\x87\x7E"
"\x28\x88\x86\xA8\x88\x8E\x28\x89\x96\xA8\x89\x9E\x28\x8A\xA6\xA8\x8A\xAE\x28\x8B\xB6\xA8"
"\x8B\xBE\x28\x8C\xC6\xA8\x8C\xCE\x28\x8D\xD6\xA8\x8D\xDE\x28\x8E\xE6\xA8\x8E\xEE\x28\x8F"
"\xF6\xA8\x8F\xFE\x28\x90\x06\xA9\x90\x0E\x29\x91\x16\xA9\x91\x1E\x29\x92\x26\xA9\x92\x2E"
"\x29\x93\x36\xA9\x93\x3E\x29\x94\x46\xA9\x94\x4E\x29\x95\x56\xA9\x95\x5E\x29\x96\x66\xA9"
"\x96\x6E\x29\x97\x76\xA9\x97\x7E\x29\x98\x86\xA9\x98\x8E\x29\x99\x96\xA9\x99\x9E\x29\x9A"
"\xA6\xA9\x9A\xAE\x29\x9B\xB6\xA9\x9B\xBE\x29\x9C\xC6\xA9\x9C\xCE\x29\x9D\xD6\xA9\x9D\xDE"
"\x29\x9E\xE6\xA9\x9E\xEE\x29\x9F\xF6\xA9\x9F\xFE\x29\xA0\x06\xAA\xA0\x0E\x2A\xA1\x16\xAA"
"\xA1\x1E\x2A\xA2\x26\xAA\xA2\x2E\x2A\xA3\x36\xAA\xA3\x3E\x2A\xA4\x46\xAA\xA4\x4E\x2A\xA5"
"\x56\xAA\xA5\x5E\x2A\xA6\x66\xAA\xA6\x6E\x2A\xA7\x76\xAA\xA7\x7E\x2A\xA8\x86\xAA\xA8\x8E"
"\x2A\xA9\x96\xAA\xA9\x9E\x2A\xAA\xA6\xAA\xAA\xAE\x2A\xAB\xB6\xAA\xAB\xBE\x2A\xAC\xC6\xAA"
"\xAC\xCE\x2A\xAD\xD6\xAA\xAD\xDE\x2A\xAE\xE6\xAA\xAE\xEE\x2A\xAF\xF6\xAA\xAF\xFE\x2A\xB0"
"\x06\xAB\xB0\x0E\x2B\xB1\x16\xAB\xB1\x1E\x2B\xB2\x26\xAB\xB2\x2E\x2B\xB3\x36\xAB\xB3\x3E"
"\x2B\xB4\x46\xAB\xB4\x4E\x2B\xB5\x56\xAB\xB5\x5E\x2B\xB6\x66\xAB\xB6\x6E\x2B\xB7\x76\xAB"
"\xB7\x7E\x2B\xB8\x86\xAB\xB8\x8E\x2B\xB9\x96\xAB\xB9\x9E\x2B\xBA\xA6\xAB\xBA\xAE\x2B\xBB"
"\xB6\xAB\xBB\xBE\x2B\xBC\xC6\xAB\xBC\xCE\x2B\xBD\xD6\xAB\xBD\xDE\x2B\xBE\xE6\xAB\xBE\xEE"
"\x2B\xBF\xF6\xAB\xBF\xFE\x2B\xC0\x06\xAC\xC0\x0E\x2C\xC1\x16\xAC\xC1\x1E\x2C\xC2\x26\xAC"
"\xC2\x2E\x2C\xC3\x36\xAC\xC3\x3E\x2C\xC4\x46\xAC\xC4\x4E\x2C\xC5\x56\xAC\xC5\x5E\x2C\xC6"
"\x66\xAC\xC6\x6E\x2C\xC7\x76\xAC\xC7\x7E\x2C\xC8\x86\xAC\xC8\x8E\x2C\xC9\x96\xAC\xC9\x9E"
"\x2C\xCA\xA6\xAC\xCA\xAE\x2C\xCB\xB6\xAC\xCB\xBE\x2C\xCC\xC6\xAC\xCC\xCE\x2C\xCD\xD6\xAC"
"\xCD\xDE\x2C\xCE\xE6\xAC\xCE\xEE\x2C\xCF\xF6\xAC\xCF\xFE\x2C\xD0\x06\xAD\xD0\x0E\x2D\xD1"
"\x16\xAD\xD1\x1E\x2D\xD2\x26\xAD\xD2\x2E\x2D\xD3\x36\xAD\xD3\x3E\x2D\xD4\x46\xAD\xD4\x4E"
"\x2D\xD5\x56\xAD\xD5\x5E\x2D\xD6\x66\xAD\xD6\x6E\x2D\xD7\x76\xAD\xD7\x7E\x2D\xD8\x86\xAD"
"\xD8\x8E\x2D\xD9\x96\xAD\xD9\x9E\x2D\xDA\xA6\xAD\xDA\xAE\x2D\xDB\xB6\xAD\xDB\xBE\x2D\xDC"
"\xC6\xAD\xDC\xCE\x2D\xDD\xD6\xAD\xDD\xDE\x2D\xDE\xE6\xAD\xDE\xEE\x2D\xDF\xF6\xAD\xDF\xFE"
"\x2D\xE0\x06\xAE\xE0\x0E\x2E\xE1\x16\xAE\xE1\x1E\x2E\xE2\x26\xAE\xE2\x2E\x2E\xE3\x36\xAE"
"\xE3\x3E\x2E\xE4\x46\xAE\xE4\x4E\x2E\xE5\x56\xAE\xE5\x5E\x2E\xE6\x66\xAE\xE6\x6E\x2E\xE7"
"\x76\xAE\xE7\x7E\x2E\xE8\x86\xAE\xE8\x8E\x2E\xE9\x96\xAE\xE9\x9E\x2E\xEA\xA6\xAE\xEA\xAE"
"\x2E\xEB\xB6\xAE\xEB\xBE\x2E\xEC\xC6\xAE\xEC\xCE\x2E\xED\xD6\xAE\xED\xDE\x2E\xEE\xE6\xAE"
"\xEE\xEE\x2E\xEF\xF6\xAE\xEF\xFE\x2E\xF0\x06\xAF\xF0\x0E\x2F\xF1\x16\xAF\xF1\x1E\x2F\xF2"
"\x26\xAF\xF2\x2E\x2F\xF3\x36\xAF\xF3\x3E\x2F\xF4\x46\xAF\xF4\x4E\x2F\xF5\x56\xAF\xF5\x5E"
"\x2F\xF6\x66\xAF\xF6\x6E\x2F\xF7\x76\xAF\xF7\x7E\x2F\xF8\x86\xAF\xF8\x8E\x2F\xF9\x96\xAF"
"\xF9\x9E\x2F\xFA\xA6\xAF\xFA\xAE\x2F\xFB\xB6\xAF\xFB\xBE\x2F\xFC\xC6\xAF\xFC\xCE\x2F\xFD"
"\xD6\xAF\xFD\xDE\x2F\xFE\xE6\xAF\xFE\xEE\x2F\xFF\xF6\xAF\xFF\xFE\x2F\x00\x07\xB0\x00\x0F"
"\x30\x01\x17\xB0\x01\x1F\x30\x02\x27\xB0\x02\x2F\x30\x03\x37\xB0\x03\x3F\x30\x04\x47\xB0"
"\x04\x4F\x30\x05\x57\xB0\x05\x5F\x30\x06\x67\xB0\x06\x6F\x30\x07\x77\xB0\x07\x7F\x30\x08"
"\x87\xB0\x08\x8F\x30\x09\x97\xB0\x09\x9F\x30\x0A\xA7\xB0\x0A\xAF\x30\x0B\xB7\xB0\x0B\xBF"
"\x30\x0C\xC7\xB0\x0C\xCF\x30\x0D\xD7\xB0\x0D\xDF\x30\x0E\xE7\xB0\x0E\xEF\x30\x0F\xF7\xB0"
"\x0F\xFF\x30\x10\x07\xB1\x10\x0F\x31\x11\x17\xB1\x11\x1F\x31\x12\x27\xB1\x12\x2F\x31\x13"
"\x37\xB1\x13\x3F\x31\x14\x47\xB1\x14\x4F\x31\x15\x57\xB1\x15\x5F\x31\x16\x67\xB1\x16\x6F"
"\x31\x17\x77\xB1\x17\x7F\x31\x18\x87\xB1\x18\x8F\x31\x19\x97\xB1\x19\x9F\x31\x1A\xA7\xB1"
"\x1A\xAF\x31\x1B\xB7\xB1\x1B\xFB\x1D";
#undef DD_ALIGNED_BUFFER

static const FontCharSet fontRussoOneMonoCharSet = {
	/* bitmap               = */ fontRussoOneMonoBitmap,
	/* bitmapWidth          = */ 1024,
	/* bitmapHeight         = */ 1024,
	/* bitmapColorChannels  = */ 1,
	/* bitmapDecompressSize = */ 1048576,
	/* charBaseHeight       = */ 40,
	/* charWidth            = */ 31,
	/* charHeight           = */ 52,
	/* charCount            = */ 256,
	{
	 { 443, 576 }, { 207, 648 }, { 230, 648 }, { 253, 648 },
	 { 276, 648 }, { 299, 648 }, { 322, 648 }, { 345, 648 },
	 { 368, 648 }, { 391, 648 }, { 414, 648 }, { 437, 648 },
	 { 460, 648 }, { 483, 648 }, { 506, 648 }, { 529, 648 },
	 { 552, 648 }, { 575, 648 }, { 598, 648 }, { 621, 648 },
	 { 644, 648 }, { 667, 648 }, { 690, 648 }, { 713, 648 },
	 { 736, 648 }, { 759, 648 }, { 782, 648 }, { 805, 648 },
	 { 828, 648 }, { 999, 288 }, { 351, 576 }, { 374, 576 },
	 { 397, 576 }, { 178, 576 }, { 270, 504 }, { 745,   0 },
	 { 675, 360 }, { 361,   0 }, { 520,  72 }, { 323, 576 },
	 { 602, 504 }, { 989, 360 }, { 642, 432 }, { 304, 432 },
	 { 236, 576 }, {   0, 504 }, {  91, 576 }, { 519, 432 },
	 { 485, 216 }, { 307, 504 }, { 765, 360 }, { 810, 360 },
	 { 395, 144 }, { 369, 288 }, { 231, 288 }, { 414, 288 },
	 { 767, 216 }, { 277, 288 }, {  62, 576 }, { 294, 576 },
	 { 983, 144 }, { 925, 432 }, { 601, 432 }, { 459, 288 },
	 { 775,  72 }, { 639,   0 }, { 885, 144 }, { 504, 288 },
	 { 591, 144 }, { 549, 288 }, { 594, 288 }, { 640, 144 },
	 { 579, 216 }, { 418, 504 }, {  39, 504 }, { 245, 216 },
	 { 639, 288 }, { 475,   0 }, { 532, 216 }, {   0, 216 },
	 { 150, 144 }, { 199, 144 }, { 437, 216 }, { 861, 216 },
	 { 673, 216 }, { 346, 144 }, {  53,  72 }, {   0,   0 },
	 { 418,  72 }, { 673,  72 }, {  93, 288 }, { 777, 504 },
	 { 560, 432 }, { 637, 504 }, { 476, 432 }, { 886, 432 },
	 { 946, 504 }, { 909, 288 }, { 954, 288 }, { 261, 432 },
	 {   0, 360 }, { 218, 432 }, { 724, 432 }, {  45, 360 },
	 {  90, 360 }, { 913, 504 }, { 381, 504 }, { 135, 360 },
	 { 847, 504 }, { 418,   0 }, { 180, 360 }, { 225, 360 },
	 { 360, 360 }, { 405, 360 }, { 847, 432 }, { 540, 360 },
	 { 156, 504 }, { 684, 288 }, {   0, 288 }, { 128,   0 },
	 { 585, 360 }, { 720, 216 }, { 175, 432 }, { 492, 504 },
	 { 120, 576 }, { 529, 504 }, { 765, 432 }, { 420, 576 },
	 {  92, 648 }, { 466, 576 }, { 489, 576 }, { 512, 576 },
	 { 535, 576 }, { 558, 576 }, { 581, 576 }, { 604, 576 },
	 { 627, 576 }, { 650, 576 }, { 673, 576 }, { 696, 576 },
	 { 719, 576 }, { 742, 576 }, { 765, 576 }, { 788, 576 },
	 { 811, 576 }, { 834, 576 }, { 857, 576 }, { 880, 576 },
	 { 903, 576 }, { 926, 576 }, { 949, 576 }, { 972, 576 },
	 { 995, 576 }, {   0, 648 }, {  23, 648 }, {  46, 648 },
	 {  69, 648 }, { 115, 648 }, { 138, 648 }, { 161, 648 },
	 { 184, 648 }, { 207, 576 }, { 347, 432 }, { 729, 288 },
	 { 469,  72 }, { 826,  72 }, { 149, 576 }, { 774, 288 },
	 { 964, 432 }, { 247,   0 }, { 566, 504 }, {  47, 288 },
	 { 806, 432 }, {  78, 504 }, { 304,   0 }, { 812, 504 },
	 { 455, 504 }, { 390, 432 }, { 707, 504 }, { 742, 504 },
	 { 977, 504 }, { 819, 288 }, { 542, 144 }, { 265, 576 },
	 {   0, 576 }, {  31, 576 }, { 344, 504 }, { 978,  72 },
	 { 957,   0 }, {   0,  72 }, { 530,   0 }, { 630, 360 },
	 { 106,  72 }, { 585,   0 }, { 159,  72 }, { 798,   0 },
	 { 851,   0 }, { 904,   0 }, {  65,   0 }, { 724,  72 },
	 { 626, 216 }, { 622,  72 }, { 185, 288 }, { 444, 144 },
	 { 132, 432 }, { 139, 288 }, { 195, 504 }, { 864, 288 },
	 { 571,  72 }, { 293, 216 }, { 248, 144 }, { 212,  72 },
	 { 297, 144 }, { 836, 144 }, { 367,  72 }, { 683, 432 },
	 { 316,  72 }, { 787, 144 }, { 264,  72 }, { 738, 144 },
	 {  50, 144 }, { 692,   0 }, { 689, 144 }, { 900, 360 },
	 { 341, 216 }, { 928,  72 }, { 945, 360 }, {  88, 432 },
	 {   0, 144 }, {  44, 432 }, { 188,   0 }, { 196, 216 },
	 { 323, 288 }, { 934, 144 }, {   0, 432 }, { 389, 216 },
	 { 880, 504 }, { 672, 504 }, { 233, 504 }, { 117, 504 },
	 { 270, 360 }, { 315, 360 }, { 814, 216 }, { 100, 144 },
	 { 450, 360 }, { 495, 360 }, {  49, 216 }, { 433, 432 },
	 { 908, 216 }, { 955, 216 }, {  98, 216 }, { 720, 360 },
	 { 147, 216 }, { 877,  72 }, { 855, 360 }, { 493, 144 }
	}
};









// ========================================================
// LZW decompression helpers for the font bitmap:
// ========================================================

// These must match the font-tool encoder!
static const int LzwNil            = -1;
static const int LzwMaxDictBits    = 12;
static const int LzwStartBits      = 9;
static const int LzwFirstCode      = (1 << (LzwStartBits - 1)); // 256
static const int LzwMaxDictEntries = (1 << LzwMaxDictBits);     // 4096

struct LzwDictionary
{
    // Dictionary entries 0-255 are always reserved to the byte/ASCII range.
    struct Entry
    {
        int code;
        int value;
    };

    int size;
    Entry entries[LzwMaxDictEntries];

    LzwDictionary();
    int findIndex(int code, int value) const;
    bool add(int code, int value);
    bool flush(int & codeBitsWidth);
};

struct LzwBitStreamReader
{
    const std::uint8_t * stream; // Pointer to the external bit stream. Not owned by the reader.
    int sizeInBytes;             // Size of the stream in bytes. Might include padding.
    int sizeInBits;              // Size of the stream in bits, padding not include.
    int currBytePos;             // Current byte being read in the stream.
    int nextBitPos;              // Bit position within the current byte to access next. 0 to 7.
    int numBitsRead;             // Total bits read from the stream so far. Never includes byte-rounding.

    LzwBitStreamReader(const std::uint8_t * bitStream, int byteCount, int bitCount);
    bool readNextBit(int & outBit);
    int readBits(int bitCount);
};

// ========================================================
// LzwDictionary:
// ========================================================

LzwDictionary::LzwDictionary()
{
    // First 256 dictionary entries are reserved to the byte/ASCII
    // range. Additional entries follow for the character sequences
    // found in the input. Up to 4096 - 256 (LzwMaxDictEntries - LzwFirstCode).
    size = LzwFirstCode;
    for (int i = 0; i < size; ++i)
    {
        entries[i].code  = LzwNil;
        entries[i].value = i;
    }
}

int LzwDictionary::findIndex(const int code, const int value) const
{
    if (code == LzwNil)
    {
        return value;
    }
    for (int i = 0; i < size; ++i)
    {
        if (entries[i].code == code && entries[i].value == value)
        {
            return i;
        }
    }
    return LzwNil;
}

bool LzwDictionary::add(const int code, const int value)
{
    if (size == LzwMaxDictEntries)
    {
        return false;
    }
    entries[size].code  = code;
    entries[size].value = value;
    ++size;
    return true;
}

bool LzwDictionary::flush(int & codeBitsWidth)
{
    if (size == (1 << codeBitsWidth))
    {
        ++codeBitsWidth;
        if (codeBitsWidth > LzwMaxDictBits)
        {
            // Clear the dictionary (except the first 256 byte entries).
            codeBitsWidth = LzwStartBits;
            size = LzwFirstCode;
            return true;
        }
    }
    return false;
}

// ========================================================
// LzwBitStreamReader:
// ========================================================

LzwBitStreamReader::LzwBitStreamReader(const std::uint8_t * bitStream, const int byteCount, const int bitCount)
    : stream(bitStream)
    , sizeInBytes(byteCount)
    , sizeInBits(bitCount)
    , currBytePos(0)
    , nextBitPos(0)
    , numBitsRead(0)
{ }

bool LzwBitStreamReader::readNextBit(int & outBit)
{
    if (numBitsRead >= sizeInBits)
    {
        return false; // We are done.
    }

    const int mask = 1 << nextBitPos;
    outBit = !!(stream[currBytePos] & mask);
    ++numBitsRead;

    if (++nextBitPos == 8)
    {
        nextBitPos = 0;
        ++currBytePos;
    }
    return true;
}

int LzwBitStreamReader::readBits(const int bitCount)
{
    int num = 0;
    for (int b = 0; b < bitCount; ++b)
    {
        int bit;
        if (!readNextBit(bit))
        {
            break;
        }
        const int mask = 1 << b;
        num = (num & ~mask) | (-bit & mask);
    }
    return num;
}

// ========================================================
// lzwDecompress() and helpers:
// ========================================================

static bool lzwOutputByte(int code, std::uint8_t *& output, int outputSizeBytes, int & bytesDecodedSoFar)
{
    if (code < 0 || code >= 256)
    {
        return false;
    }
    if (bytesDecodedSoFar >= outputSizeBytes)
    {
        return false;
    }
    *output++ = static_cast<std::uint8_t>(code);
    ++bytesDecodedSoFar;
    return true;
}

static bool lzwOutputSequence(const LzwDictionary & dict, int code,
                              std::uint8_t *& output, int outputSizeBytes,
                              int & bytesDecodedSoFar, int & firstByte)
{
    // A sequence is stored backwards, so we have to write
    // it to a temp then output the buffer in reverse.
    int i = 0;
    std::uint8_t sequence[LzwMaxDictEntries];
    do
    {
        sequence[i++] = dict.entries[code].value & 0xFF;
        code = dict.entries[code].code;
    } while (code >= 0);

    firstByte = sequence[--i];
    for (; i >= 0; --i)
    {
        if (!lzwOutputByte(sequence[i], output, outputSizeBytes, bytesDecodedSoFar))
        {
            return false;
        }
    }
    return true;
}

static int lzwDecompress(const void * compressedData, int compressedSizeBytes,
                         int compressedSizeBits, void * uncompressedData,
                         int uncompressedSizeBytes)
{
    if (compressedData == nullptr || uncompressedData == nullptr)
    {
        return 0;
    }
    if (compressedSizeBytes <= 0 || compressedSizeBits <= 0 || uncompressedSizeBytes <= 0)
    {
        return 0;
    }

    int code          = LzwNil;
    int prevCode      = LzwNil;
    int codeBitsWidth = LzwStartBits;
    int firstByte     = 0;
    int bytesDecoded  = 0;

    const std::uint8_t * compressedPtr = reinterpret_cast<const std::uint8_t *>(compressedData);
    std::uint8_t * uncompressedPtr = reinterpret_cast<std::uint8_t *>(uncompressedData);

    // We'll reconstruct the dictionary based on the bit stream codes.
    LzwBitStreamReader bitStream(compressedPtr, compressedSizeBytes, compressedSizeBits);
    LzwDictionary dictionary;

    // We check to avoid an overflow of the user buffer.
    // If the buffer is smaller than the decompressed size, we
    // break the loop and return the current decompression count.
    while (bitStream.numBitsRead < bitStream.sizeInBits)
    {
        if (codeBitsWidth > LzwMaxDictBits)
        {
            break;
        }
        code = bitStream.readBits(codeBitsWidth);

        if (prevCode == LzwNil)
        {
            if (!lzwOutputByte(code, uncompressedPtr, uncompressedSizeBytes, bytesDecoded))
            {
                break;
            }
            firstByte = code;
            prevCode  = code;
            continue;
        }

        if (code >= dictionary.size)
        {
            if (!lzwOutputSequence(dictionary, prevCode, uncompressedPtr,
                 uncompressedSizeBytes, bytesDecoded, firstByte))
            {
                break;
            }
            if (!lzwOutputByte(firstByte, uncompressedPtr, uncompressedSizeBytes, bytesDecoded))
            {
                break;
            }
        }
        else
        {
            if (!lzwOutputSequence(dictionary, code, uncompressedPtr,
                 uncompressedSizeBytes, bytesDecoded, firstByte))
            {
                break;
            }
        }

        if (!dictionary.add(prevCode, firstByte))
        {
            break;
        }

        if (dictionary.flush(codeBitsWidth))
        {
            prevCode = LzwNil;
        }
        else
        {
            prevCode = code;
        }
    }

    return bytesDecoded;
}

// ========================================================
// Built-in font glyph bitmap decompression:
// ========================================================

// If you decide to change the font, these are the only things that
// need to be updated. The s_font* variables are never referenced
// directly in the code, these functions are used instead.
static inline const std::uint8_t* getRawFontBitmapData() { return fontRussoOneMonoBitmap;  }
static inline const FontCharSet  & getFontCharSet()       { return fontRussoOneMonoCharSet; }

static std::uint8_t * decompressFontBitmap()
{
    const std::uint32_t * compressedData = reinterpret_cast<const std::uint32_t *>(getRawFontBitmapData());

    // First two uint32s are the compressed size in
    // bytes followed by the compressed size in bits.
    const int compressedSizeBytes = *compressedData++;
    const int compressedSizeBits  = *compressedData++;

    // Allocate the decompression buffer:
    const int uncompressedSizeBytes = getFontCharSet().bitmapDecompressSize;
    std::uint8_t * uncompressedData = static_cast<std::uint8_t *>(DD_MALLOC(uncompressedSizeBytes));

    // Out of memory? Font rendering will be disable.
    if (uncompressedData == nullptr)
    {
        return nullptr;
    }

    // Decode the bitmap pixels (stored with an LZW-flavor of compression):
    const int bytesDecoded = lzwDecompress(compressedData,
                                           compressedSizeBytes,
                                           compressedSizeBits,
                                           uncompressedData,
                                           uncompressedSizeBytes);

    // Unexpected decompression size? Probably a data mismatch in the font-tool.
    if (bytesDecoded != uncompressedSizeBytes)
    {
        DD_MFREE(uncompressedData);
        return nullptr;
    }

    // Must later free with DD_MFREE().
    return uncompressedData;
}

// ========================================================
// Internal Debug Draw queues and helper types/functions:
// ========================================================

struct DebugString
{
    std::int64_t expiryDateMillis;
    ddVec3       color;
    float        posX;
    float        posY;
    float        scaling;
    ddStr        text;
    bool         centered;
};

struct DebugPoint
{
    std::int64_t expiryDateMillis;
    ddVec3       position;
    ddVec3       color;
    float        size;
    bool         depthEnabled;
};

struct DebugLine
{
    std::int64_t expiryDateMillis;
    ddVec3       posFrom;
    ddVec3       posTo;
    ddVec3       color;
    bool         depthEnabled;
};

struct InternalContext DD_EXPLICIT_CONTEXT_ONLY(: public OpaqueContextType)
{
    int                vertexBufferUsed;
    int                debugStringsCount;
    int                debugPointsCount;
    int                debugLinesCount;
    std::int64_t       currentTimeMillis;                           // Latest time value (in milliseconds) from dd::flush().
    GlyphTextureHandle glyphTexHandle;                              // Our built-in glyph bitmap. If kept null, no text is rendered.
    RenderInterface *  renderInterface;                             // Ref to the external renderer. Can be null for a no-op debug draw.
    DrawVertex         vertexBuffer[DEBUG_DRAW_VERTEX_BUFFER_SIZE]; // Vertex buffer we use to expand the lines/points before calling on RenderInterface.
    DebugString        debugStrings[DEBUG_DRAW_MAX_STRINGS];        // Debug strings queue (2D screen-space strings + 3D projected labels).
    DebugPoint         debugPoints[DEBUG_DRAW_MAX_POINTS];          // 3D debug points queue.
    DebugLine          debugLines[DEBUG_DRAW_MAX_LINES];            // 3D debug lines queue.

    InternalContext(RenderInterface * renderer)
        : vertexBufferUsed(0)
        , debugStringsCount(0)
        , debugPointsCount(0)
        , debugLinesCount(0)
        , currentTimeMillis(0)
        , glyphTexHandle(nullptr)
        , renderInterface(renderer)
    { }
};

// ========================================================
// Library context mode selection:
// ========================================================

#if (defined(DEBUG_DRAW_PER_THREAD_CONTEXT) && defined(DEBUG_DRAW_EXPLICIT_CONTEXT))
    #error "DEBUG_DRAW_PER_THREAD_CONTEXT and DEBUG_DRAW_EXPLICIT_CONTEXT are mutually exclusive!"
#endif // DEBUG_DRAW_PER_THREAD_CONTEXT && DEBUG_DRAW_EXPLICIT_CONTEXT

#if defined(DEBUG_DRAW_EXPLICIT_CONTEXT)
    //
    // Explicit context passed as argument
    //
    #define DD_CONTEXT static_cast<InternalContext *>(ctx)
#elif defined(DEBUG_DRAW_PER_THREAD_CONTEXT)
    //
    // Per-thread global context (MT safe)
    //
    #if defined(__GNUC__) || defined(__clang__) // GCC/Clang
        #define DD_THREAD_LOCAL static __thread
    #elif defined(_MSC_VER) // Visual Studio
        #define DD_THREAD_LOCAL static __declspec(thread)
    #else // Try C++11 thread_local
        #if DEBUG_DRAW_CXX11_SUPPORTED
            #define DD_THREAD_LOCAL static thread_local
        #else // !DEBUG_DRAW_CXX11_SUPPORTED
            #error "Unsupported compiler - unknown TLS model"
        #endif // DEBUG_DRAW_CXX11_SUPPORTED
    #endif // TLS model
    DD_THREAD_LOCAL InternalContext * s_threadContext = nullptr;
    #define DD_CONTEXT s_threadContext
    #undef DD_THREAD_LOCAL
#else // Debug Draw context selection
    //
    // Global static context (single threaded operation)
    //
    static InternalContext * s_globalContext = nullptr;
    #define DD_CONTEXT s_globalContext
#endif // Debug Draw context selection

// ========================================================

#if DEBUG_DRAW_USE_STD_MATH

static inline float floatAbs(float x)       { return fabsf(x); }
static inline float floatSin(float radians) { return sinf(radians); }
static inline float floatCos(float radians) { return cosf(radians); }
static inline float floatInvSqrt(float x)   { return (1.0f / sqrtf(x)); }

#else // !DEBUG_DRAW_USE_STD_MATH

// ========================================================
// Fast approximations of math functions used by Debug Draw
// ========================================================

union Float2UInt
{
    float asFloat;
    std::uint32_t asUInt;
};

static inline float floatRound(float x)
{
    // Probably slower than std::floor(), also depends of FPU settings,
    // but we only need this for that special sin/cos() case anyways...
    const int i = static_cast<int>(x);
    return (x >= 0.0f) ? static_cast<float>(i) : static_cast<float>(i - 1);
}

static inline float floatAbs(float x)
{
    // Mask-off the sign bit
    Float2UInt i;
    i.asFloat = x;
    i.asUInt &= 0x7FFFFFFF;
    return i.asFloat;
}

static inline float floatInvSqrt(float x)
{
    // Modified version of the emblematic Q_rsqrt() from Quake 3.
    // See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
    Float2UInt i;
    float y, r;
    y = x * 0.5f;
    i.asFloat = x;
    i.asUInt = 0x5F3759DF - (i.asUInt >> 1);
    r = i.asFloat;
    r = r * (1.5f - (r * r * y));
    return r;
}

static inline float floatSin(float radians)
{
    static const float A = -2.39e-08;
    static const float B = 2.7526e-06;
    static const float C = 1.98409e-04;
    static const float D = 8.3333315e-03;
    static const float E = 1.666666664e-01;

    if (radians < 0.0f || radians >= TAU)
    {
        radians -= floatRound(radians / TAU) * TAU;
    }

    if (radians < PI)
    {
        if (radians > HalfPI)
        {
            radians = PI - radians;
        }
    }
    else
    {
        radians = (radians > (PI + HalfPI)) ? (radians - TAU) : (PI - radians);
    }

    const float s = radians * radians;
    return radians * (((((A * s + B) * s - C) * s + D) * s - E) * s + 1.0f);
}

static inline float floatCos(float radians)
{
    static const float A = -2.605e-07;
    static const float B = 2.47609e-05;
    static const float C = 1.3888397e-03;
    static const float D = 4.16666418e-02;
    static const float E = 4.999999963e-01;

    if (radians < 0.0f || radians >= TAU)
    {
        radians -= floatRound(radians / TAU) * TAU;
    }

    float d;
    if (radians < PI)
    {
        if (radians > HalfPI)
        {
            radians = PI - radians;
            d = -1.0f;
        }
        else
        {
            d = 1.0f;
        }
    }
    else
    {
        if (radians > (PI + HalfPI))
        {
            radians = radians - TAU;
            d = 1.0f;
        }
        else
        {
            radians = PI - radians;
            d = -1.0f;
        }
    }

    const float s = radians * radians;
    return d * (((((A * s + B) * s - C) * s + D) * s - E) * s + 1.0f);
}

#endif // DEBUG_DRAW_USE_STD_MATH

// ========================================================
// ddVec3 helpers:
// ========================================================

enum VecElements { X, Y, Z, W };

static inline void vecSet(ddVec3_Out dest, const float x, const float y, const float z)
{
    dest[X] = x;
    dest[Y] = y;
    dest[Z] = z;
}

static inline void vecCopy(ddVec3_Out dest, ddVec3_In src)
{
    dest[X] = src[X];
    dest[Y] = src[Y];
    dest[Z] = src[Z];
}

static inline void vecAdd(ddVec3_Out result, ddVec3_In a, ddVec3_In b)
{
    result[X] = a[X] + b[X];
    result[Y] = a[Y] + b[Y];
    result[Z] = a[Z] + b[Z];
}

static inline void vecSub(ddVec3_Out result, ddVec3_In a, ddVec3_In b)
{
    result[X] = a[X] - b[X];
    result[Y] = a[Y] - b[Y];
    result[Z] = a[Z] - b[Z];
}

static inline void vecScale(ddVec3_Out result, ddVec3_In v, const float s)
{
    result[X] = v[X] * s;
    result[Y] = v[Y] * s;
    result[Z] = v[Z] * s;
}

static inline void vecNormalize(ddVec3_Out result, ddVec3_In v)
{
    const float lenSqr = v[X] * v[X] + v[Y] * v[Y] + v[Z] * v[Z];
    const float invLen = floatInvSqrt(lenSqr);
    result[X] = v[X] * invLen;
    result[Y] = v[Y] * invLen;
    result[Z] = v[Z] * invLen;
}

static inline void vecOrthogonalBasis(ddVec3_Out left, ddVec3_Out up, ddVec3_In v)
{
    // Produces two orthogonal vectors for normalized vector v.
    float lenSqr, invLen;
    if (floatAbs(v[Z]) > 0.7f)
    {
        lenSqr  = v[Y] * v[Y] + v[Z] * v[Z];
        invLen  = floatInvSqrt(lenSqr);
        up[X]   = 0.0f;
        up[Y]   =  v[Z] * invLen;
        up[Z]   = -v[Y] * invLen;
        left[X] = lenSqr * invLen;
        left[Y] = -v[X] * up[Z];
        left[Z] =  v[X] * up[Y];
    }
    else
    {
        lenSqr  = v[X] * v[X] + v[Y] * v[Y];
        invLen  = floatInvSqrt(lenSqr);
        left[X] = -v[Y] * invLen;
        left[Y] =  v[X] * invLen;
        left[Z] = 0.0f;
        up[X]   = -v[Z] * left[Y];
        up[Y]   =  v[Z] * left[X];
        up[Z]   = lenSqr * invLen;
    }
}

// ========================================================
// ddMat4x4 helpers:
// ========================================================

static inline void matTransformPointXYZ(ddVec3_Out result, ddVec3_In p, ddMat4x4_In m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
}

static inline void matTransformPointXYZW(float result[4], ddVec3_In p, ddMat4x4_In m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
    result[W] = (m[3] * p[X]) + (m[7] * p[Y]) + (m[11] * p[Z]) + m[15];
}

static inline float matTransformPointXYZW2(ddVec3_Out result, const float p[3], ddMat4x4_In m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
    float rw  = (m[3] * p[X]) + (m[7] * p[Y]) + (m[11] * p[Z]) + m[15];
    return rw;
}

// ========================================================
// Misc local functions for draw queue management:
// ========================================================

enum DrawMode
{
    DrawModePoints,
    DrawModeLines,
    DrawModeText
};

static void flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DrawMode mode, const bool depthEnabled)
{
    if (DD_CONTEXT->vertexBufferUsed == 0)
    {
        return;
    }

    switch (mode)
    {
    case DrawModePoints :
        DD_CONTEXT->renderInterface->drawPointList(DD_CONTEXT->vertexBuffer,
                                                   DD_CONTEXT->vertexBufferUsed,
                                                   depthEnabled);
        break;
    case DrawModeLines :
        DD_CONTEXT->renderInterface->drawLineList(DD_CONTEXT->vertexBuffer,
                                                  DD_CONTEXT->vertexBufferUsed,
                                                  depthEnabled);
        break;
    case DrawModeText :
        DD_CONTEXT->renderInterface->drawGlyphList(DD_CONTEXT->vertexBuffer,
                                                   DD_CONTEXT->vertexBufferUsed,
                                                   DD_CONTEXT->glyphTexHandle);
        break;
    } // switch (mode)

    DD_CONTEXT->vertexBufferUsed = 0;
}

static void pushPointVert(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DebugPoint & point)
{
    // Make room for one more vert:
    if ((DD_CONTEXT->vertexBufferUsed + 1) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModePoints, point.depthEnabled);
    }

    DrawVertex & v = DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++];
    v.point.x      = point.position[X];
    v.point.y      = point.position[Y];
    v.point.z      = point.position[Z];
    v.point.r      = point.color[X];
    v.point.g      = point.color[Y];
    v.point.b      = point.color[Z];
    v.point.size   = point.size;
}

static void pushLineVert(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DebugLine & line)
{
    // Make room for two more verts:
    if ((DD_CONTEXT->vertexBufferUsed + 2) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeLines, line.depthEnabled);
    }

    DrawVertex & v0 = DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++];
    DrawVertex & v1 = DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++];

    v0.line.x = line.posFrom[X];
    v0.line.y = line.posFrom[Y];
    v0.line.z = line.posFrom[Z];
    v0.line.r = line.color[X];
    v0.line.g = line.color[Y];
    v0.line.b = line.color[Z];

    v1.line.x = line.posTo[X];
    v1.line.y = line.posTo[Y];
    v1.line.z = line.posTo[Z];
    v1.line.r = line.color[X];
    v1.line.g = line.color[Y];
    v1.line.b = line.color[Z];
}

static void pushGlyphVerts(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const DrawVertex verts[4])
{
    static const int indexes[6] = { 0, 1, 2, 2, 1, 3 };

    // Make room for one more glyph (2 tris):
    if ((DD_CONTEXT->vertexBufferUsed + 6) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeText, false);
    }

    for (int i = 0; i < 6; ++i)
    {
        DD_CONTEXT->vertexBuffer[DD_CONTEXT->vertexBufferUsed++].glyph = verts[indexes[i]].glyph;
    }
}

static void pushStringGlyphs(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) float x, float y,
                             const char * text, ddVec3_In color, const float scaling)
{
    // Invariants for all characters:
    const float initialX    = x;
    const float scaleU      = static_cast<float>(getFontCharSet().bitmapWidth);
    const float scaleV      = static_cast<float>(getFontCharSet().bitmapHeight);
    const float fixedWidth  = static_cast<float>(getFontCharSet().charWidth);
    const float fixedHeight = static_cast<float>(getFontCharSet().charHeight);
    const float tabW        = fixedWidth  * 4.0f * scaling; // TAB = 4 spaces.
    const float chrW        = fixedWidth  * scaling;
    const float chrH        = fixedHeight * scaling;

    for (; *text != '\0'; ++text)
    {
        const int charVal = *text;
        if (charVal >= FontCharSet::MaxChars)
        {
            continue;
        }
        if (charVal == ' ')
        {
            x += chrW;
            continue;
        }
        if (charVal == '\t')
        {
            x += tabW;
            continue;
        }
        if (charVal == '\n')
        {
            y += chrH;
            x  = initialX;
            continue;
        }

        const FontChar fontChar = getFontCharSet().chars[charVal];
        const float u0 = (fontChar.x + 0.5f) / scaleU;
        const float v0 = (fontChar.y + 0.5f) / scaleV;
        const float u1 = u0 + (fixedWidth  / scaleU);
        const float v1 = v0 + (fixedHeight / scaleV);

        DrawVertex verts[4];
        verts[0].glyph.x = x;
        verts[0].glyph.y = y;
        verts[0].glyph.u = u0;
        verts[0].glyph.v = v0;
        verts[0].glyph.r = color[X];
        verts[0].glyph.g = color[Y];
        verts[0].glyph.b = color[Z];
        verts[1].glyph.x = x;
        verts[1].glyph.y = y + chrH;
        verts[1].glyph.u = u0;
        verts[1].glyph.v = v1;
        verts[1].glyph.r = color[X];
        verts[1].glyph.g = color[Y];
        verts[1].glyph.b = color[Z];
        verts[2].glyph.x = x + chrW;
        verts[2].glyph.y = y;
        verts[2].glyph.u = u1;
        verts[2].glyph.v = v0;
        verts[2].glyph.r = color[X];
        verts[2].glyph.g = color[Y];
        verts[2].glyph.b = color[Z];
        verts[3].glyph.x = x + chrW;
        verts[3].glyph.y = y + chrH;
        verts[3].glyph.u = u1;
        verts[3].glyph.v = v1;
        verts[3].glyph.r = color[X];
        verts[3].glyph.g = color[Y];
        verts[3].glyph.b = color[Z];

        pushGlyphVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) verts);
        x += chrW;
    }
}

static float calcTextWidth(const char * text, const float scaling)
{
    const float fixedWidth = static_cast<float>(getFontCharSet().charWidth);
    const float tabW = fixedWidth * 4.0f * scaling; // TAB = 4 spaces.
    const float chrW = fixedWidth * scaling;

    float x = 0.0f;
    for (; *text != '\0'; ++text)
    {
        // Tabs are handled differently (4 spaces)
        if (*text == '\t')
        {
            x += tabW;
        }
        else // Non-tab char (including whitespace)
        {
            x += chrW;
        }
    }

    return x;
}

static void drawDebugStrings(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    const int count = DD_CONTEXT->debugStringsCount;
    if (count == 0)
    {
        return;
    }

    const DebugString * const debugStrings = DD_CONTEXT->debugStrings;

    for (int i = 0; i < count; ++i)
    {
        const DebugString & dstr = debugStrings[i];
        if (dstr.centered)
        {
            // 3D Labels are centered at the point of origin, e.g. center-aligned.
            const float offset = calcTextWidth(dstr.text.c_str(), dstr.scaling) * 0.5f;
            pushStringGlyphs(DD_EXPLICIT_CONTEXT_ONLY(ctx,) dstr.posX - offset, dstr.posY, dstr.text.c_str(), dstr.color, dstr.scaling);
        }
        else
        {
            // Left-aligned
            pushStringGlyphs(DD_EXPLICIT_CONTEXT_ONLY(ctx,) dstr.posX, dstr.posY, dstr.text.c_str(), dstr.color, dstr.scaling);
        }
    }

    flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeText, false);
}

static void drawDebugPoints(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    const int count = DD_CONTEXT->debugPointsCount;
    if (count == 0)
    {
        return;
    }

    const DebugPoint * const debugPoints = DD_CONTEXT->debugPoints;

    //
    // First pass, points with depth test ENABLED:
    //
    int numDepthlessPoints = 0;
    for (int i = 0; i < count; ++i)
    {
        const DebugPoint & point = debugPoints[i];
        if (point.depthEnabled)
        {
            pushPointVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) point);
        }
        numDepthlessPoints += !point.depthEnabled;
    }
    flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModePoints, true);

    //
    // Second pass draws points with depth DISABLED:
    //
    if (numDepthlessPoints > 0)
    {
        for (int i = 0; i < count; ++i)
        {
            const DebugPoint & point = debugPoints[i];
            if (!point.depthEnabled)
            {
                pushPointVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) point);
            }
        }
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModePoints, false);
    }
}

static void drawDebugLines(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    const int count = DD_CONTEXT->debugLinesCount;
    if (count == 0)
    {
        return;
    }

    const DebugLine * const debugLines = DD_CONTEXT->debugLines;

    //
    // First pass, lines with depth test ENABLED:
    //
    int numDepthlessLines = 0;
    for (int i = 0; i < count; ++i)
    {
        const DebugLine & line = debugLines[i];
        if (line.depthEnabled)
        {
            pushLineVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) line);
        }
        numDepthlessLines += !line.depthEnabled;
    }
    flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeLines, true);

    //
    // Second pass draws lines with depth DISABLED:
    //
    if (numDepthlessLines > 0)
    {
        for (int i = 0; i < count; ++i)
        {
            const DebugLine & line = debugLines[i];
            if (!line.depthEnabled)
            {
                pushLineVert(DD_EXPLICIT_CONTEXT_ONLY(ctx,) line);
            }
        }
        flushDebugVerts(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DrawModeLines, false);
    }
}

template<typename T>
static void clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) T * queue, int & queueCount)
{
    const std::int64_t time = DD_CONTEXT->currentTimeMillis;
    if (time == 0)
    {
        queueCount = 0;
        return;
    }

    int index = 0;
    T * pElem = queue;

    // Concatenate elements that still need to be draw on future frames:
    for (int i = 0; i < queueCount; ++i, ++pElem)
    {
        if (pElem->expiryDateMillis > time)
        {
            if (index != i)
            {
                queue[index] = *pElem;
            }
            ++index;
        }
    }

    queueCount = index;
}

static void setupGlyphTexture(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (DD_CONTEXT->renderInterface == nullptr)
    {
        return;
    }

    if (DD_CONTEXT->glyphTexHandle != nullptr)
    {
        DD_CONTEXT->renderInterface->destroyGlyphTexture(DD_CONTEXT->glyphTexHandle);
        DD_CONTEXT->glyphTexHandle = nullptr;
    }

    std::uint8_t * decompressedBitmap = decompressFontBitmap();
    if (decompressedBitmap == nullptr)
    {
        return; // Failed to decompressed. No font rendering available.
    }

    DD_CONTEXT->glyphTexHandle = DD_CONTEXT->renderInterface->createGlyphTexture(
                                        getFontCharSet().bitmapWidth,
                                        getFontCharSet().bitmapHeight,
                                        decompressedBitmap);

    // No longer needed.
    DD_MFREE(decompressedBitmap);
}

// ========================================================
// Public Debug Draw interface:
// ========================================================

bool initialize(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle * outCtx,) RenderInterface * renderer)
{
    if (renderer == nullptr)
    {
        return false;
    }

    void * buffer = DD_MALLOC(sizeof(InternalContext));
    if (buffer == nullptr)
    {
        return false;
    }

    InternalContext * newCtx = ::new(buffer) InternalContext(renderer);

    #ifdef DEBUG_DRAW_EXPLICIT_CONTEXT
    if ((*outCtx) != nullptr) { shutdown(*outCtx); }
    (*outCtx) = newCtx;
    #else // !DEBUG_DRAW_EXPLICIT_CONTEXT
    if (DD_CONTEXT != nullptr) { shutdown(); }
    DD_CONTEXT = newCtx;
    #endif // DEBUG_DRAW_EXPLICIT_CONTEXT

    setupGlyphTexture(DD_EXPLICIT_CONTEXT_ONLY(*outCtx));
    return true;
}

void shutdown(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (DD_CONTEXT != nullptr)
    {
        // If this macro is defined, the user-provided ddStr type
        // needs some extra cleanup before shutdown, so we run for
        // all entries in the debugStrings[] array.
        //
        // We could call std::string::clear() here, but clear()
        // doesn't deallocate memory in std string, so we might
        // as well let the default destructor do the cleanup,
        // when using the default (AKA std::string) ddStr.
        #ifdef DEBUG_DRAW_STR_DEALLOC_FUNC
        for (int i = 0; i < DEBUG_DRAW_MAX_STRINGS; ++i)
        {
            DEBUG_DRAW_STR_DEALLOC_FUNC(DD_CONTEXT->debugStrings[i].text);
        }
        #endif // DEBUG_DRAW_STR_DEALLOC_FUNC

        if (DD_CONTEXT->renderInterface != nullptr && DD_CONTEXT->glyphTexHandle != nullptr)
        {
            DD_CONTEXT->renderInterface->destroyGlyphTexture(DD_CONTEXT->glyphTexHandle);
        }

        DD_CONTEXT->~InternalContext(); // Destroy first
        DD_MFREE(DD_CONTEXT);

        #ifndef DEBUG_DRAW_EXPLICIT_CONTEXT
        DD_CONTEXT = nullptr;
        #endif // DEBUG_DRAW_EXPLICIT_CONTEXT
    }
}

bool isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    return (DD_CONTEXT != nullptr && DD_CONTEXT->renderInterface != nullptr);
}

bool hasPendingDraws(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return false;
    }
    return (DD_CONTEXT->debugStringsCount + DD_CONTEXT->debugPointsCount + DD_CONTEXT->debugLinesCount) > 0;
}

void flush(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const std::int64_t currTimeMillis, const std::uint32_t flags)
{
    if (!hasPendingDraws(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    // Save the last know time value for next dd::line/dd::point calls.
    DD_CONTEXT->currentTimeMillis = currTimeMillis;

    // Let the user set common render states.
    DD_CONTEXT->renderInterface->beginDraw();

    // Issue the render calls:
    if (flags & FlushLines)  { drawDebugLines(DD_EXPLICIT_CONTEXT_ONLY(ctx));   }
    if (flags & FlushPoints) { drawDebugPoints(DD_EXPLICIT_CONTEXT_ONLY(ctx));  }
    if (flags & FlushText)   { drawDebugStrings(DD_EXPLICIT_CONTEXT_ONLY(ctx)); }

    // And cleanup if needed.
    DD_CONTEXT->renderInterface->endDraw();

    // Remove all expired objects, regardless of draw flags:
    clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DD_CONTEXT->debugStrings, DD_CONTEXT->debugStringsCount);
    clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DD_CONTEXT->debugPoints,  DD_CONTEXT->debugPointsCount);
    clearDebugQueue(DD_EXPLICIT_CONTEXT_ONLY(ctx,) DD_CONTEXT->debugLines,   DD_CONTEXT->debugLinesCount);
}

void clear(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx))
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    // Let the user cleanup the debug strings:
    #ifdef DEBUG_DRAW_STR_DEALLOC_FUNC
    for (int i = 0; i < DEBUG_DRAW_MAX_STRINGS; ++i)
    {
        DEBUG_DRAW_STR_DEALLOC_FUNC(DD_CONTEXT->debugStrings[i].text);
    }
    #endif // DEBUG_DRAW_STR_DEALLOC_FUNC

    DD_CONTEXT->vertexBufferUsed  = 0;
    DD_CONTEXT->debugStringsCount = 0;
    DD_CONTEXT->debugPointsCount  = 0;
    DD_CONTEXT->debugLinesCount   = 0;
}

void point(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In pos, ddVec3_In color,
           const float size, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->debugPointsCount == DEBUG_DRAW_MAX_POINTS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_POINTS limit reached! Dropping further debug point draws.");
        return;
    }

    DebugPoint & point     = DD_CONTEXT->debugPoints[DD_CONTEXT->debugPointsCount++];
    point.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    point.depthEnabled     = depthEnabled;
    point.size             = size;

    vecCopy(point.position, pos);
    vecCopy(point.color, color);
}

void line(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In from, ddVec3_In to,
          ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->debugLinesCount == DEBUG_DRAW_MAX_LINES)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_LINES limit reached! Dropping further debug line draws.");
        return;
    }

    DebugLine & line      = DD_CONTEXT->debugLines[DD_CONTEXT->debugLinesCount++];
    line.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    line.depthEnabled     = depthEnabled;

    vecCopy(line.posFrom, from);
    vecCopy(line.posTo, to);
    vecCopy(line.color, color);
}

void screenText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const char * const str, ddVec3_In pos,
                ddVec3_In color, const float scaling, const int durationMillis)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->glyphTexHandle == nullptr)
    {
        return;
    }

    if (DD_CONTEXT->debugStringsCount == DEBUG_DRAW_MAX_STRINGS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_STRINGS limit reached! Dropping further debug string draws.");
        return;
    }

    DebugString & dstr    = DD_CONTEXT->debugStrings[DD_CONTEXT->debugStringsCount++];
    dstr.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    dstr.posX             = pos[X];
    dstr.posY             = pos[Y];
    dstr.scaling          = scaling;
    dstr.text             = str;
    dstr.centered         = false;
    vecCopy(dstr.color, color);
}

void projectedText(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const char * const str, ddVec3_In pos, ddVec3_In color,
                   ddMat4x4_In vpMatrix, const int sx, const int sy, const int sw, const int sh, const float scaling,
                   const int durationMillis)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    if (DD_CONTEXT->glyphTexHandle == nullptr)
    {
        return;
    }

    if (DD_CONTEXT->debugStringsCount == DEBUG_DRAW_MAX_STRINGS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_STRINGS limit reached! Dropping further debug string draws.");
        return;
    }

    float tempPoint[4];
    matTransformPointXYZW(tempPoint, pos, vpMatrix);

    // Bail if W ended up as zero.
    if (floatAbs(tempPoint[W]) < FloatEpsilon)
    {
        return;
    }

    // Bail if point is behind camera.
    if (tempPoint[Z] < -tempPoint[W] /*|| tempPoint[Z] > tempPoint[W]*/)
    {
        return;
    }
    
    // Perspective divide (we only care about the 2D part now):
    tempPoint[X] /= tempPoint[W];
    tempPoint[Y] /= tempPoint[W];

    // Map to window coordinates:
    float scrX = ((tempPoint[X] * 0.5f) + 0.5f) * sw + sx;
    float scrY = ((tempPoint[Y] * 0.5f) + 0.5f) * sh + sy;

    // Need to invert the direction because on OGL the screen origin is the bottom-left corner.
    // NOTE: This is not renderer agnostic, I think... Should add a #define or something!
    scrY = static_cast<float>(sh) - scrY;

    DebugString & dstr    = DD_CONTEXT->debugStrings[DD_CONTEXT->debugStringsCount++];
    dstr.expiryDateMillis = DD_CONTEXT->currentTimeMillis + durationMillis;
    dstr.posX             = scrX;
    dstr.posY             = scrY;
    dstr.scaling          = scaling;
    dstr.text             = str;
    dstr.centered         = true;
    vecCopy(dstr.color, color);
}

void axisTriad(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddMat4x4_In transform, const float size,
               const float length, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 p0, p1, p2, p3;
    ddVec3 xEnd, yEnd, zEnd;
    ddVec3 origin, cR, cG, cB;

    vecSet(cR, 1.0f, 0.0f, 0.0f);
    vecSet(cG, 0.0f, 1.0f, 0.0f);
    vecSet(cB, 0.0f, 0.0f, 1.0f);

    vecSet(origin, 0.0f, 0.0f, 0.0f);
    vecSet(xEnd, length, 0.0f, 0.0f);
    vecSet(yEnd, 0.0f, length, 0.0f);
    vecSet(zEnd, 0.0f, 0.0f, length);

    matTransformPointXYZ(p0, origin, transform);
    matTransformPointXYZ(p1, xEnd, transform);
    matTransformPointXYZ(p2, yEnd, transform);
    matTransformPointXYZ(p3, zEnd, transform);

    arrow(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p0, p1, cR, size, durationMillis, depthEnabled); // X: red axis
    arrow(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p0, p2, cG, size, durationMillis, depthEnabled); // Y: green axis
    arrow(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p0, p3, cB, size, durationMillis, depthEnabled); // Z: blue axis
}

void arrow(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In from, ddVec3_In to, ddVec3_In color,
           const float size, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    static const float arrowStep = 30.0f; // In degrees
    static const float arrowSin[45] = {
        0.0f, 0.5f, 0.866025f, 1.0f, 0.866025f, 0.5f, -0.0f, -0.5f, -0.866025f,
        -1.0f, -0.866025f, -0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };
    static const float arrowCos[45] = {
        1.0f, 0.866025f, 0.5f, -0.0f, -0.5f, -0.866026f, -1.0f, -0.866025f, -0.5f, 0.0f,
        0.5f, 0.866026f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    // Body line:
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, color, durationMillis, depthEnabled);

    // Aux vectors to compute the arrowhead:
    ddVec3 up, right, forward;
    vecSub(forward, to, from);
    vecNormalize(forward, forward);
    vecOrthogonalBasis(right, up, forward);
    vecScale(forward, forward, size);

    // Arrowhead is a cone (sin/cos tables used here):
    float degrees = 0.0f;
    for (int i = 0; degrees < 360.0f; degrees += arrowStep, ++i)
    {
        float scale;
        ddVec3 v1, v2, temp;

        scale = 0.5f * size * arrowCos[i];
        vecScale(temp, right, scale);
        vecSub(v1, to, forward);
        vecAdd(v1, v1, temp);

        scale = 0.5f * size * arrowSin[i];
        vecScale(temp, up, scale);
        vecAdd(v1, v1, temp);

        scale = 0.5f * size * arrowCos[i + 1];
        vecScale(temp, right, scale);
        vecSub(v2, to, forward);
        vecAdd(v2, v2, temp);

        scale = 0.5f * size * arrowSin[i + 1];
        vecScale(temp, up, scale);
        vecAdd(v2, v2, temp);

        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v1, to, color, durationMillis, depthEnabled);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v1, v2, color, durationMillis, depthEnabled);
    }
}

void cross(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, const float length,
           const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 from, to;
    ddVec3 cR, cG, cB;

    vecSet(cR, 1.0f, 0.0f, 0.0f);
    vecSet(cG, 0.0f, 1.0f, 0.0f);
    vecSet(cB, 0.0f, 0.0f, 1.0f);

    const float cx = center[X];
    const float cy = center[Y];
    const float cz = center[Z];
    const float hl = length * 0.5f; // Half on each side.

    // Red line: X - length/2 to X + length/2
    vecSet(from, cx - hl, cy, cz);
    vecSet(to,   cx + hl, cy, cz);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, cR, durationMillis, depthEnabled);

    // Green line: Y - length/2 to Y + length/2
    vecSet(from, cx, cy - hl, cz);
    vecSet(to,   cx, cy + hl, cz);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, cG, durationMillis, depthEnabled);

    // Blue line: Z - length/2 to Z + length/2
    vecSet(from, cx, cy, cz - hl);
    vecSet(to,   cx, cy, cz + hl);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, cB, durationMillis, depthEnabled);
}

void circle(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In planeNormal, ddVec3_In color,
            const float radius, const float numSteps, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 left, up;
    ddVec3 point, lastPoint;

    vecOrthogonalBasis(left, up, planeNormal);

    vecScale(up, up, radius);
    vecScale(left, left, radius);
    vecAdd(lastPoint, center, up);

    for (int i = 1; i <= numSteps; ++i)
    {
        const float radians = TAU * i / numSteps;

        ddVec3 vs, vc;
        vecScale(vs, left, floatSin(radians));
        vecScale(vc, up,   floatCos(radians));

        vecAdd(point, center, vs);
        vecAdd(point, point,  vc);

        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastPoint, point, color, durationMillis, depthEnabled);
        vecCopy(lastPoint, point);
    }
}

void plane(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In planeNormal, ddVec3_In planeColor,
           ddVec3_In normalVecColor, const float planeScale, const float normalVecScale, const int durationMillis,
           const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 v1, v2, v3, v4;
    ddVec3 tangent, bitangent;
    vecOrthogonalBasis(tangent, bitangent, planeNormal);

    // A little bit of preprocessor voodoo to make things more interesting :P
    #define DD_PLANE_V(v, op1, op2) \
    v[X] = (center[X] op1 (tangent[X] * planeScale) op2 (bitangent[X] * planeScale)); \
    v[Y] = (center[Y] op1 (tangent[Y] * planeScale) op2 (bitangent[Y] * planeScale)); \
    v[Z] = (center[Z] op1 (tangent[Z] * planeScale) op2 (bitangent[Z] * planeScale))
    DD_PLANE_V(v1, -, -);
    DD_PLANE_V(v2, +, -);
    DD_PLANE_V(v3, +, +);
    DD_PLANE_V(v4, -, +);
    #undef DD_PLANE_V

    // Draw the wireframe plane quadrilateral:
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v1, v2, planeColor, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v2, v3, planeColor, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v3, v4, planeColor, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) v4, v1, planeColor, durationMillis, depthEnabled);

    // Optionally add a line depicting the plane normal:
    if (normalVecScale != 0.0f)
    {
        ddVec3 normalVec;
        normalVec[X] = (planeNormal[X] * normalVecScale) + center[X];
        normalVec[Y] = (planeNormal[Y] * normalVecScale) + center[Y];
        normalVec[Z] = (planeNormal[Z] * normalVecScale) + center[Z];
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) center, normalVec, normalVecColor, durationMillis, depthEnabled);
    }
}

void sphere(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In color,
            const float radius, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    static const int stepSize = 15;
    ddVec3 cache[360 / stepSize];
    ddVec3 radiusVec;

    vecSet(radiusVec, 0.0f, 0.0f, radius);
    vecAdd(cache[0], center, radiusVec);

    for (int n = 1; n < arrayLength(cache); ++n)
    {
        vecCopy(cache[n], cache[0]);
    }

    ddVec3 lastPoint, temp;
    for (int i = stepSize; i <= 360; i += stepSize)
    {
        const float s = floatSin(degreesToRadians(i));
        const float c = floatCos(degreesToRadians(i));

        lastPoint[X] = center[X];
        lastPoint[Y] = center[Y] + radius * s;
        lastPoint[Z] = center[Z] + radius * c;

        for (int n = 0, j = stepSize; j <= 360; j += stepSize, ++n)
        {
            temp[X] = center[X] + floatSin(degreesToRadians(j)) * radius * s;
            temp[Y] = center[Y] + floatCos(degreesToRadians(j)) * radius * s;
            temp[Z] = lastPoint[Z];

            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastPoint, temp, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastPoint, cache[n], color, durationMillis, depthEnabled);

            vecCopy(cache[n], lastPoint);
            vecCopy(lastPoint, temp);
        }
    }
}

void cone(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In apex, ddVec3_In dir, ddVec3_In color,
          const float baseRadius, const float apexRadius, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    static const int stepSize = 20;
    ddVec3 axis[3];
    ddVec3 top, temp0, temp1, temp2;
    ddVec3 p1, p2, lastP1, lastP2;

    vecCopy(axis[2], dir);
    vecNormalize(axis[2], axis[2]);
    vecOrthogonalBasis(axis[0], axis[1], axis[2]);

    axis[1][X] = -axis[1][X];
    axis[1][Y] = -axis[1][Y];
    axis[1][Z] = -axis[1][Z];

    vecAdd(top, apex, dir);
    vecScale(temp1, axis[1], baseRadius);
    vecAdd(lastP2, top, temp1);

    if (apexRadius == 0.0f)
    {
        for (int i = stepSize; i <= 360; i += stepSize)
        {
            vecScale(temp1, axis[0], floatSin(degreesToRadians(i)));
            vecScale(temp2, axis[1], floatCos(degreesToRadians(i)));
            vecAdd(temp0, temp1, temp2);

            vecScale(temp0, temp0, baseRadius);
            vecAdd(p2, top, temp0);

            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastP2, p2, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p2, apex, color, durationMillis, depthEnabled);

            vecCopy(lastP2, p2);
        }
    }
    else // A degenerate cone with open apex:
    {
        vecScale(temp1, axis[1], apexRadius);
        vecAdd(lastP1, apex, temp1);

        for (int i = stepSize; i <= 360; i += stepSize)
        {
            vecScale(temp1, axis[0], floatSin(degreesToRadians(i)));
            vecScale(temp2, axis[1], floatCos(degreesToRadians(i)));
            vecAdd(temp0, temp1, temp2);

            vecScale(temp1, temp0, apexRadius);
            vecScale(temp2, temp0, baseRadius);

            vecAdd(p1, apex, temp1);
            vecAdd(p2, top,  temp2);

            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastP1, p1, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) lastP2, p2, color, durationMillis, depthEnabled);
            line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) p1, p2, color, durationMillis, depthEnabled);

            vecCopy(lastP1, p1);
            vecCopy(lastP2, p2);
        }
    }
}

void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const ddVec3 points[8], ddVec3_In color,
         const int durationMillis, const bool depthEnabled)
{
    // Build the lines from points using clever indexing tricks:
    // (& 3 is a fancy way of doing % 4, but avoids the expensive modulo operation)
    for (int i = 0; i < 4; ++i)
    {
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points[i], points[(i + 1) & 3], color, durationMillis, depthEnabled);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points[4 + i], points[4 + ((i + 1) & 3)], color, durationMillis, depthEnabled);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points[i], points[4 + i], color, durationMillis, depthEnabled);
    }
}

void box(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In center, ddVec3_In color, const float width,
         const float height, const float depth, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    const float cx = center[X];
    const float cy = center[Y];
    const float cz = center[Z];
    const float w  = width  * 0.5f;
    const float h  = height * 0.5f;
    const float d  = depth  * 0.5f;

    // Create all the 8 points:
    ddVec3 points[8];
    #define DD_BOX_V(v, op1, op2, op3) \
    v[X] = cx op1 w; \
    v[Y] = cy op2 h; \
    v[Z] = cz op3 d
    DD_BOX_V(points[0], -, +, +);
    DD_BOX_V(points[1], -, +, -);
    DD_BOX_V(points[2], +, +, -);
    DD_BOX_V(points[3], +, +, +);
    DD_BOX_V(points[4], -, -, +);
    DD_BOX_V(points[5], -, -, -);
    DD_BOX_V(points[6], +, -, -);
    DD_BOX_V(points[7], +, -, +);
    #undef DD_BOX_V

    box(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points, color, durationMillis, depthEnabled);
}

void aabb(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In mins, ddVec3_In maxs,
          ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 bb[2];
    ddVec3 points[8];

    vecCopy(bb[0], mins);
    vecCopy(bb[1], maxs);

    // Expand min/max bounds:
    for (int i = 0; i < arrayLength(points); ++i)
    {
        points[i][X] = bb[(i ^ (i >> 1)) & 1][X];
        points[i][Y] = bb[(i >> 1) & 1][Y];
        points[i][Z] = bb[(i >> 2) & 1][Z];
    }

    // Build the lines:
    box(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points, color, durationMillis, depthEnabled);
}

void frustum(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddMat4x4_In invClipMatrix,
             ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    // Start with the standard clip volume, then bring it back to world space.
    static const float planes[8][3] = {
        // near plane
        { -1.0f, -1.0f, -1.0f }, {  1.0f, -1.0f, -1.0f },
        {  1.0f,  1.0f, -1.0f }, { -1.0f,  1.0f, -1.0f },
        // far plane
        { -1.0f, -1.0f,  1.0f }, {  1.0f, -1.0f,  1.0f },
        {  1.0f,  1.0f,  1.0f }, { -1.0f,  1.0f,  1.0f }
    };

    ddVec3 points[8];
    float wCoords[8];

    // Transform the planes by the inverse clip matrix:
    for (int i = 0; i < arrayLength(planes); ++i)
    {
        wCoords[i] = matTransformPointXYZW2(points[i], planes[i], invClipMatrix);
    }

    // Divide by the W component of each:
    for (int i = 0; i < arrayLength(planes); ++i)
    {
        // But bail if any W ended up as zero.
        if (floatAbs(wCoords[W]) < FloatEpsilon)
        {
            return;
        }

        points[i][X] /= wCoords[i];
        points[i][Y] /= wCoords[i];
        points[i][Z] /= wCoords[i];
    }

    // Connect the dots:
    box(DD_EXPLICIT_CONTEXT_ONLY(ctx,) points, color, durationMillis, depthEnabled);
}

void vertexNormal(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In origin, ddVec3_In normal,
                  const float length, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 normalVec;
    ddVec3 normalColor;

    vecSet(normalColor, 1.0f, 1.0f, 1.0f);

    normalVec[X] = (normal[X] * length) + origin[X];
    normalVec[Y] = (normal[Y] * length) + origin[Y];
    normalVec[Z] = (normal[Z] * length) + origin[Z];

    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, normalVec, normalColor, durationMillis, depthEnabled);
}

void tangentBasis(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) ddVec3_In origin, ddVec3_In normal, ddVec3_In tangent,
                  ddVec3_In bitangent, const float lengths, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 cN, cT, cB;
    ddVec3 vN, vT, vB;

    vecSet(cN, 1.0f, 1.0f, 1.0f); // Vertex normals are WHITE
    vecSet(cT, 1.0f, 1.0f, 0.0f); // Tangents are YELLOW
    vecSet(cB, 1.0f, 0.0f, 1.0f); // Bi-tangents are MAGENTA

    vN[X] = (normal[X] * lengths) + origin[X];
    vN[Y] = (normal[Y] * lengths) + origin[Y];
    vN[Z] = (normal[Z] * lengths) + origin[Z];

    vT[X] = (tangent[X] * lengths) + origin[X];
    vT[Y] = (tangent[Y] * lengths) + origin[Y];
    vT[Z] = (tangent[Z] * lengths) + origin[Z];

    vB[X] = (bitangent[X] * lengths) + origin[X];
    vB[Y] = (bitangent[Y] * lengths) + origin[Y];
    vB[Z] = (bitangent[Z] * lengths) + origin[Z];

    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, vN, cN, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, vT, cT, durationMillis, depthEnabled);
    line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) origin, vB, cB, durationMillis, depthEnabled);
}

void xzSquareGrid(DD_EXPLICIT_CONTEXT_ONLY(ContextHandle ctx,) const float mins, const float maxs, const float y,
                  const float step, ddVec3_In color, const int durationMillis, const bool depthEnabled)
{
    if (!isInitialized(DD_EXPLICIT_CONTEXT_ONLY(ctx)))
    {
        return;
    }

    ddVec3 from, to;
    for (float i = mins; i <= maxs; i += step)
    {
        // Horizontal line (along the X)
        vecSet(from, mins, y, i);
        vecSet(to,   maxs, y, i);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, color, durationMillis, depthEnabled);

        // Vertical line (along the Z)
        vecSet(from, i, y, mins);
        vecSet(to,   i, y, maxs);
        line(DD_EXPLICIT_CONTEXT_ONLY(ctx,) from, to, color, durationMillis, depthEnabled);
    }
}

// ========================================================
// RenderInterface stubs:
// ========================================================

RenderInterface::~RenderInterface()                                              { }
void RenderInterface::beginDraw()                                                { }
void RenderInterface::endDraw()                                                  { }
void RenderInterface::drawPointList(const DrawVertex *, int, bool)               { }
void RenderInterface::drawLineList(const DrawVertex *, int, bool)                { }
void RenderInterface::drawGlyphList(const DrawVertex *, int, GlyphTextureHandle) { }
void RenderInterface::destroyGlyphTexture(GlyphTextureHandle)                    { }
GlyphTextureHandle RenderInterface::createGlyphTexture(int, int, const void *)   { return nullptr; }

} // namespace dd

#undef DD_CONTEXT
#undef DD_MALLOC
#undef DD_MFREE

// ================ End of implementation =================
#endif // DEBUG_DRAW_IMPLEMENTATION
// ================ End of implementation =================

